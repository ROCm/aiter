#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0)
module {
  tt.func public @_gemm_afp4_wfp4_kernel_preshuffled_scales(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":177:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst = arith.constant dense<256> : tensor<8x256xi32> loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<4x256xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<128x256xi32> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<128x128xi32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x256xf32> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.cmpi sgt, %arg8, %c0_i32 : i32 loc(#loc2)
    llvm.intr.assume %0 : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    %1 = arith.cmpi sgt, %arg9, %c0_i32 : i32 loc(#loc6)
    llvm.intr.assume %1 : i1 loc(#loc7)
    %2 = arith.cmpi sgt, %arg11, %c0_i32 : i32 loc(#loc8)
    llvm.intr.assume %2 : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    %3 = arith.cmpi sgt, %arg12, %c0_i32 : i32 loc(#loc11)
    llvm.intr.assume %3 : i1 loc(#loc12)
    llvm.intr.assume %true : i1 loc(#loc13)
    llvm.intr.assume %true : i1 loc(#loc14)
    %4 = arith.cmpi sgt, %arg13, %c0_i32 : i32 loc(#loc15)
    llvm.intr.assume %4 : i1 loc(#loc16)
    %5 = tt.get_program_id x : i32 loc(#loc17)
    %6 = arith.addi %arg6, %c255_i32 : i32 loc(#loc97)
    %7 = arith.divsi %6, %c256_i32 : i32 loc(#loc98)
    %8 = arith.divsi %5, %7 : i32 loc(#loc99)
    %9 = arith.remsi %5, %7 : i32 loc(#loc100)
    %10 = arith.cmpi sgt, %8, %c0_i32 : i32 loc(#loc24)
    llvm.intr.assume %10 : i1 loc(#loc25)
    %11 = arith.cmpi sgt, %9, %c0_i32 : i32 loc(#loc26)
    llvm.intr.assume %11 : i1 loc(#loc27)
    %12 = arith.cmpi sgt, %arg7, %c0_i32 : i32 loc(#loc28)
    scf.if %12 {
      %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc30)
      %14 = arith.muli %8, %c128_i32 : i32 loc(#loc31)
      %15 = tt.splat %14 : i32 -> tensor<128xi32> loc(#loc32)
      %16 = arith.addi %15, %13 : tensor<128xi32> loc(#loc32)
      %17 = tt.splat %arg5 : i32 -> tensor<128xi32> loc(#loc33)
      %18 = arith.remsi %16, %17 : tensor<128xi32> loc(#loc33)
      %19 = arith.muli %9, %c256_i32 : i32 loc(#loc34)
      %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc35)
      %21 = tt.splat %19 : i32 -> tensor<256xi32> loc(#loc36)
      %22 = arith.addi %21, %20 : tensor<256xi32> loc(#loc36)
      %23 = tt.splat %arg6 : i32 -> tensor<256xi32> loc(#loc37)
      %24 = arith.remsi %22, %23 : tensor<256xi32> loc(#loc37)
      %25 = tt.expand_dims %18 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc38)
      %26 = tt.splat %arg8 : i32 -> tensor<128x1xi32> loc(#loc39)
      %27 = arith.muli %25, %26 : tensor<128x1xi32> loc(#loc39)
      %28 = tt.expand_dims %13 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc40)
      %29 = tt.broadcast %27 : tensor<128x1xi32> -> tensor<128x128xi32> loc(#loc41)
      %30 = tt.broadcast %28 : tensor<1x128xi32> -> tensor<128x128xi32> loc(#loc41)
      %31 = arith.addi %29, %30 : tensor<128x128xi32> loc(#loc41)
      %32 = tt.splat %arg0 : !tt.ptr<i8> -> tensor<128x128x!tt.ptr<i8>> loc(#loc42)
      %33 = tt.addptr %32, %31 : tensor<128x128x!tt.ptr<i8>>, tensor<128x128xi32> loc(#loc42)
      %34 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc43)
      %35 = tt.expand_dims %24 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc44)
      %36 = tt.splat %arg9 : i32 -> tensor<1x256xi32> loc(#loc45)
      %37 = arith.muli %35, %36 : tensor<1x256xi32> loc(#loc45)
      %38 = tt.broadcast %34 : tensor<128x1xi32> -> tensor<128x256xi32> loc(#loc46)
      %39 = tt.broadcast %37 : tensor<1x256xi32> -> tensor<128x256xi32> loc(#loc46)
      %40 = arith.addi %38, %39 : tensor<128x256xi32> loc(#loc46)
      %41 = tt.splat %arg1 : !tt.ptr<i8> -> tensor<128x256x!tt.ptr<i8>> loc(#loc47)
      %42 = tt.addptr %41, %40 : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc47)
      %43 = arith.muli %9, %c8_i32 : i32 loc(#loc48)
      %44 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc49)
      %45 = tt.splat %43 : i32 -> tensor<8xi32> loc(#loc50)
      %46 = arith.addi %45, %44 : tensor<8xi32> loc(#loc50)
      %47 = tt.splat %arg6 : i32 -> tensor<8xi32> loc(#loc51)
      %48 = arith.remsi %46, %47 : tensor<8xi32> loc(#loc51)
      %49 = tt.expand_dims %48 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc52)
      %50 = tt.splat %arg13 : i32 -> tensor<8x1xi32> loc(#loc53)
      %51 = arith.muli %49, %50 : tensor<8x1xi32> loc(#loc53)
      %52 = tt.splat %arg4 : !tt.ptr<i8> -> tensor<8x1x!tt.ptr<i8>> loc(#loc54)
      %53 = tt.addptr %52, %51 : tensor<8x1x!tt.ptr<i8>>, tensor<8x1xi32> loc(#loc54)
      %54 = tt.expand_dims %20 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc55)
      %55 = tt.broadcast %53 : tensor<8x1x!tt.ptr<i8>> -> tensor<8x256x!tt.ptr<i8>> loc(#loc56)
      %56 = tt.broadcast %54 : tensor<1x256xi32> -> tensor<8x256xi32> loc(#loc56)
      %57 = tt.addptr %55, %56 : tensor<8x256x!tt.ptr<i8>>, tensor<8x256xi32> loc(#loc56)
      %58 = arith.muli %8, %c4_i32 : i32 loc(#loc57)
      %59 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32> loc(#loc58)
      %60 = tt.splat %58 : i32 -> tensor<4xi32> loc(#loc59)
      %61 = arith.addi %60, %59 : tensor<4xi32> loc(#loc59)
      %62 = tt.splat %arg5 : i32 -> tensor<4xi32> loc(#loc60)
      %63 = arith.remsi %61, %62 : tensor<4xi32> loc(#loc60)
      %64 = tt.expand_dims %63 {axis = 1 : i32} : tensor<4xi32> -> tensor<4x1xi32> loc(#loc61)
      %65 = tt.splat %arg12 : i32 -> tensor<4x1xi32> loc(#loc62)
      %66 = arith.muli %64, %65 : tensor<4x1xi32> loc(#loc62)
      %67 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<4x1x!tt.ptr<i8>> loc(#loc63)
      %68 = tt.addptr %67, %66 : tensor<4x1x!tt.ptr<i8>>, tensor<4x1xi32> loc(#loc63)
      %69 = tt.broadcast %68 : tensor<4x1x!tt.ptr<i8>> -> tensor<4x256x!tt.ptr<i8>> loc(#loc64)
      %70 = tt.broadcast %54 : tensor<1x256xi32> -> tensor<4x256xi32> loc(#loc64)
      %71 = tt.addptr %69, %70 : tensor<4x256x!tt.ptr<i8>>, tensor<4x256xi32> loc(#loc64)
      %72:5 = scf.for %arg14 = %c0_i32 to %c64_i32 step %c1_i32 iter_args(%arg15 = %cst_3, %arg16 = %33, %arg17 = %42, %arg18 = %71, %arg19 = %57) -> (tensor<128x256xf32>, tensor<128x128x!tt.ptr<i8>>, tensor<128x256x!tt.ptr<i8>>, tensor<4x256x!tt.ptr<i8>>, tensor<8x256x!tt.ptr<i8>>)  : i32 {
        %101 = tt.load %arg18 : tensor<4x256x!tt.ptr<i8>> loc(#loc66)
        %102 = tt.load %arg19 cacheModifier = cg : tensor<8x256x!tt.ptr<i8>> loc(#loc67)
        %103 = tt.reshape %101 : tensor<4x256xi8> -> tensor<4x1x4x16x2x2x1xi8> loc(#loc68)
        %104 = tt.trans %103 {order = array<i32: 0, 1, 5, 3, 4, 2, 6>} : tensor<4x1x4x16x2x2x1xi8> -> tensor<4x1x2x16x2x4x1xi8> loc(#loc69)
        %105 = tt.reshape %104 : tensor<4x1x2x16x2x4x1xi8> -> tensor<128x8xi8> loc(#loc70)
        %106 = tt.reshape %102 : tensor<8x256xi8> -> tensor<8x1x4x16x2x2x1xi8> loc(#loc71)
        %107 = tt.trans %106 {order = array<i32: 0, 1, 5, 3, 4, 2, 6>} : tensor<8x1x4x16x2x2x1xi8> -> tensor<8x1x2x16x2x4x1xi8> loc(#loc72)
        %108 = tt.reshape %107 : tensor<8x1x2x16x2x4x1xi8> -> tensor<256x8xi8> loc(#loc73)
        %109 = tt.load %arg16 : tensor<128x128x!tt.ptr<i8>> loc(#loc74)
        %110 = tt.load %arg17 cacheModifier = cg : tensor<128x256x!tt.ptr<i8>> loc(#loc75)
        %111 = tt.dot_scaled %109 scale %105, %110 scale %108, %arg15 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x128xi8>, tensor<128x8xi8> * tensor<128x256xi8>, tensor<256x8xi8> -> tensor<128x256xf32> loc(#loc76)
        %112 = tt.addptr %arg16, %cst_2 : tensor<128x128x!tt.ptr<i8>>, tensor<128x128xi32> loc(#loc77)
        %113 = tt.addptr %arg17, %cst_1 : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc78)
        %114 = tt.addptr %arg18, %cst_0 : tensor<4x256x!tt.ptr<i8>>, tensor<4x256xi32> loc(#loc79)
        %115 = tt.addptr %arg19, %cst : tensor<8x256x!tt.ptr<i8>>, tensor<8x256xi32> loc(#loc80)
        scf.yield %111, %112, %113, %114, %115 : tensor<128x256xf32>, tensor<128x128x!tt.ptr<i8>>, tensor<128x256x!tt.ptr<i8>>, tensor<4x256x!tt.ptr<i8>>, tensor<8x256x!tt.ptr<i8>> loc(#loc81)
      } loc(#loc65)
      %73 = arith.truncf %72#0 : tensor<128x256xf32> to tensor<128x256xbf16> loc(#loc82)
      %74 = arith.extsi %13 : tensor<128xi32> to tensor<128xi64> loc(#loc83)
      %75 = arith.extsi %14 : i32 to i64 loc(#loc84)
      %76 = tt.splat %75 : i64 -> tensor<128xi64> loc(#loc84)
      %77 = arith.addi %76, %74 : tensor<128xi64> loc(#loc84)
      %78 = arith.extsi %20 : tensor<256xi32> to tensor<256xi64> loc(#loc85)
      %79 = arith.extsi %19 : i32 to i64 loc(#loc86)
      %80 = tt.splat %79 : i64 -> tensor<256xi64> loc(#loc86)
      %81 = arith.addi %80, %78 : tensor<256xi64> loc(#loc86)
      %82 = tt.expand_dims %77 {axis = 1 : i32} : tensor<128xi64> -> tensor<128x1xi64> loc(#loc87)
      %83 = arith.extsi %arg11 : i32 to i64 loc(#loc88)
      %84 = tt.splat %83 : i64 -> tensor<128x1xi64> loc(#loc88)
      %85 = arith.muli %84, %82 : tensor<128x1xi64> loc(#loc88)
      %86 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc89)
      %87 = tt.addptr %86, %85 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi64> loc(#loc89)
      %88 = tt.expand_dims %81 {axis = 0 : i32} : tensor<256xi64> -> tensor<1x256xi64> loc(#loc90)
      %89 = tt.broadcast %87 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x256x!tt.ptr<bf16>> loc(#loc91)
      %90 = tt.broadcast %88 : tensor<1x256xi64> -> tensor<128x256xi64> loc(#loc91)
      %91 = tt.addptr %89, %90 : tensor<128x256x!tt.ptr<bf16>>, tensor<128x256xi64> loc(#loc91)
      %92 = arith.extsi %arg5 : i32 to i64 loc(#loc92)
      %93 = tt.splat %92 : i64 -> tensor<128x1xi64> loc(#loc92)
      %94 = arith.cmpi slt, %82, %93 : tensor<128x1xi64> loc(#loc92)
      %95 = arith.extsi %arg6 : i32 to i64 loc(#loc93)
      %96 = tt.splat %95 : i64 -> tensor<1x256xi64> loc(#loc93)
      %97 = arith.cmpi slt, %88, %96 : tensor<1x256xi64> loc(#loc93)
      %98 = tt.broadcast %94 : tensor<128x1xi1> -> tensor<128x256xi1> loc(#loc94)
      %99 = tt.broadcast %97 : tensor<1x256xi1> -> tensor<128x256xi1> loc(#loc94)
      %100 = arith.andi %98, %99 : tensor<128x256xi1> loc(#loc94)
      tt.store %91, %73, %100 cacheModifier = wt : tensor<128x256x!tt.ptr<bf16>> loc(#loc95)
    } loc(#loc29)
    tt.return loc(#loc96)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":214:26)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":214:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":215:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":216:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":217:26)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":217:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":218:26)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":218:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":219:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":220:27)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":220:14)
#loc13 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":221:14)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":222:14)
#loc15 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":223:27)
#loc16 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":223:14)
#loc17 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":228:32)
#loc18 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc19 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":232:27)
#loc20 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc21 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":51:23)
#loc22 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":237:48)
#loc23 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":52:22)
#loc24 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":242:22)
#loc25 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":242:14)
#loc26 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":243:22)
#loc27 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":243:14)
#loc28 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":247:42)
#loc29 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":247:7)
#loc30 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":253:30)
#loc31 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":255:27)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":255:42)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":255:72)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":256:27)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":256:55)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":256:42)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":256:72)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":258:20)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":258:31)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":258:56)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":258:43)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":258:12)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":261:25)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":261:56)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":261:67)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":261:48)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":261:12)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":266:21)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":266:57)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":266:43)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":267:12)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":274:23)
#loc53 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":274:34)
#loc54 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":274:14)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":275:22)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":275:14)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":289:25)
#loc58 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":289:61)
#loc59 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":289:47)
#loc60 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":290:16)
#loc61 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":293:27)
#loc62 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":293:38)
#loc63 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":293:18)
#loc64 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":294:18)
#loc65 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":303:43)
#loc66 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":304:31)
#loc67 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":305:31)
#loc68 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":310:71)
#loc69 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":310:92)
#loc70 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":310:117)
#loc71 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":314:67)
#loc72 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":314:88)
#loc73 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":314:113)
#loc74 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":321:28)
#loc75 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":322:28)
#loc76 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":331:75)
#loc77 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":334:22)
#loc78 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":335:22)
#loc79 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":339:32)
#loc80 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":340:28)
#loc81 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":340:12)
#loc82 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":342:27)
#loc83 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":345:71)
#loc84 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":345:41)
#loc85 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":346:71)
#loc86 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":346:41)
#loc87 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":349:34)
#loc88 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":349:26)
#loc89 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":349:14)
#loc90 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":350:34)
#loc91 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":350:14)
#loc92 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":353:37)
#loc93 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":353:62)
#loc94 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":353:43)
#loc95 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":354:25)
#loc96 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":247:4)
#loc97 = loc(callsite(#loc18 at #loc19))
#loc98 = loc(callsite(#loc20 at #loc19))
#loc99 = loc(callsite(#loc21 at #loc22))
#loc100 = loc(callsite(#loc23 at #loc22))
