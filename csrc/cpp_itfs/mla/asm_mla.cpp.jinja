#include <hip/hip_runtime.h>
#include "aiter_hip_common.h"

void mla_stage1_asm_fwd(void* Q,                 //   [num_seqs, num_heads, head_size]
                        void* KV,                //   [num_page, page_size, num_kv_heads, head_size]
                        void* kv_indptr,         //   [batch_size+1]
                        void* kv_page_indices,   //   [num_page_used]
                        void* kv_last_page_lens, //   [batch_size]
                        float softmax_scale,
                        // following are output
                        void* splitData, //[batch_size, num_kv_splits, num_heads, v_head_dim]
                        void* splitLse,   //[batch_size, num_kv_splits, num_heads,  1]
                        int num_seqs,
                        int num_heads,
                        int head_size,
                        int page_size,
                        int num_kv_heads,
                        int kv_split,
                        int stride_Q,
                        int stride_Page,
                        int log2_page,
                        void* stream
                        ){

unsigned char hsaco[{{bin_size}}] = { {{bin_data}} };
AiterAsmKernelFast impl_ptr("mla_stage1_asm_fwd", hsaco);

KernelArgs args;
size_t arg_size = sizeof(args);
args.ptr_R = splitData.data_ptr();
args.ptr_LSE = splitLse.data_ptr();
args.ptr_Q = Q.data_ptr();
args.ptr_KV = KV.data_ptr();
args.ptr_LTP = kv_indptr.data_ptr();
args.ptr_LTD = kv_page_indices.data_ptr();
args.ptr_LTL = kv_last_page_lens.data_ptr();
args.scalar = softmax_scale;
args.s_MQA = gqa_ratio;
args.s_kv_split = kv_split;
args.s_Q_Bs = stride_Q;
args.s_Bs = stride_Page;
args.s_log2_plen = log2_page;
impl_ptr->launch_kernel({&args,
                        &arg_size,
                        (gqa_ratio + 15) / 16, // gdx
                        num_seqs,              // gdy
                        kv_split,              // gdz
                        256,                   // bdx: 4 wv64
                        1,                     // bdy
                        1,                     // bdz
                        stream});

                        }