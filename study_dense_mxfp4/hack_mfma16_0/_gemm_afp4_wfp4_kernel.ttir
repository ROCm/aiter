#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)
module {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)) attributes {noinline = false} {
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst = arith.constant dense<128> : tensor<128x256xi32> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<256x128xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x256xf32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.cmpi sgt, %arg8, %c0_i32 : i32 loc(#loc2)
    llvm.intr.assume %0 : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    %1 = arith.cmpi sgt, %arg9, %c0_i32 : i32 loc(#loc6)
    llvm.intr.assume %1 : i1 loc(#loc7)
    %2 = arith.cmpi sgt, %arg10, %c0_i32 : i32 loc(#loc8)
    llvm.intr.assume %2 : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %3 = arith.cmpi sgt, %arg11, %c0_i32 : i32 loc(#loc12)
    llvm.intr.assume %3 : i1 loc(#loc13)
    %4 = arith.cmpi sgt, %arg12, %c0_i32 : i32 loc(#loc14)
    llvm.intr.assume %4 : i1 loc(#loc15)
    llvm.intr.assume %true : i1 loc(#loc16)
    %5 = tt.get_program_id x : i32 loc(#loc17)
    %6 = arith.addi %arg5, %c255_i32 : i32 loc(#loc91)
    %7 = arith.divsi %6, %c256_i32 : i32 loc(#loc92)
    %8 = arith.addi %arg6, %c255_i32 : i32 loc(#loc93)
    %9 = arith.divsi %8, %c256_i32 : i32 loc(#loc94)
    %10 = arith.muli %9, %c4_i32 : i32 loc(#loc95)
    %11 = arith.divsi %5, %10 : i32 loc(#loc96)
    %12 = arith.muli %11, %c4_i32 : i32 loc(#loc97)
    %13 = arith.subi %7, %12 : i32 loc(#loc98)
    %14 = arith.minsi %13, %c4_i32 : i32 loc(#loc99)
    %15 = arith.remsi %5, %14 : i32 loc(#loc100)
    %16 = arith.addi %12, %15 : i32 loc(#loc101)
    %17 = arith.remsi %5, %10 : i32 loc(#loc102)
    %18 = arith.divsi %17, %14 : i32 loc(#loc103)
    %19 = arith.cmpi sgt, %16, %c0_i32 : i32 loc(#loc32)
    llvm.intr.assume %19 : i1 loc(#loc33)
    %20 = arith.cmpi sgt, %18, %c0_i32 : i32 loc(#loc34)
    llvm.intr.assume %20 : i1 loc(#loc35)
    %21 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc36)
    %22 = arith.muli %16, %c256_i32 : i32 loc(#loc37)
    %23 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc38)
    %24 = tt.splat %22 : i32 -> tensor<256xi32> loc(#loc39)
    %25 = arith.addi %24, %23 : tensor<256xi32> loc(#loc39)
    %26 = tt.splat %arg5 : i32 -> tensor<256xi32> loc(#loc40)
    %27 = arith.remsi %25, %26 : tensor<256xi32> loc(#loc40)
    %28 = arith.muli %18, %c256_i32 : i32 loc(#loc41)
    %29 = tt.splat %28 : i32 -> tensor<256xi32> loc(#loc42)
    %30 = arith.addi %29, %23 : tensor<256xi32> loc(#loc42)
    %31 = tt.splat %arg6 : i32 -> tensor<256xi32> loc(#loc43)
    %32 = arith.remsi %30, %31 : tensor<256xi32> loc(#loc43)
    %33 = tt.expand_dims %27 {axis = 1 : i32} : tensor<256xi32> -> tensor<256x1xi32> loc(#loc44)
    %34 = tt.splat %arg8 : i32 -> tensor<256x1xi32> loc(#loc45)
    %35 = arith.muli %33, %34 : tensor<256x1xi32> loc(#loc45)
    %36 = tt.expand_dims %21 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc46)
    %37 = tt.broadcast %35 : tensor<256x1xi32> -> tensor<256x128xi32> loc(#loc47)
    %38 = tt.broadcast %36 : tensor<1x128xi32> -> tensor<256x128xi32> loc(#loc47)
    %39 = arith.addi %37, %38 : tensor<256x128xi32> loc(#loc47)
    %40 = tt.splat %arg0 : !tt.ptr<i8> -> tensor<256x128x!tt.ptr<i8>> loc(#loc48)
    %41 = tt.addptr %40, %39 : tensor<256x128x!tt.ptr<i8>>, tensor<256x128xi32> loc(#loc48)
    %42 = tt.expand_dims %21 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc49)
    %43 = tt.expand_dims %32 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc50)
    %44 = tt.splat %arg9 : i32 -> tensor<1x256xi32> loc(#loc51)
    %45 = arith.muli %43, %44 : tensor<1x256xi32> loc(#loc51)
    %46 = tt.broadcast %42 : tensor<128x1xi32> -> tensor<128x256xi32> loc(#loc52)
    %47 = tt.broadcast %45 : tensor<1x256xi32> -> tensor<128x256xi32> loc(#loc52)
    %48 = arith.addi %46, %47 : tensor<128x256xi32> loc(#loc52)
    %49 = tt.splat %arg1 : !tt.ptr<i8> -> tensor<128x256x!tt.ptr<i8>> loc(#loc53)
    %50 = tt.addptr %49, %48 : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc53)
    %51 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc54)
    %52 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<256x1x!tt.ptr<i8>> loc(#loc55)
    %53 = tt.addptr %52, %33 : tensor<256x1x!tt.ptr<i8>>, tensor<256x1xi32> loc(#loc55)
    %54 = tt.expand_dims %51 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc56)
    %55 = tt.splat %arg11 : i32 -> tensor<1x8xi32> loc(#loc57)
    %56 = arith.muli %54, %55 : tensor<1x8xi32> loc(#loc57)
    %57 = tt.broadcast %53 : tensor<256x1x!tt.ptr<i8>> -> tensor<256x8x!tt.ptr<i8>> loc(#loc58)
    %58 = tt.broadcast %56 : tensor<1x8xi32> -> tensor<256x8xi32> loc(#loc58)
    %59 = tt.addptr %57, %58 : tensor<256x8x!tt.ptr<i8>>, tensor<256x8xi32> loc(#loc58)
    %60 = tt.expand_dims %32 {axis = 1 : i32} : tensor<256xi32> -> tensor<256x1xi32> loc(#loc59)
    %61 = tt.splat %arg4 : !tt.ptr<i8> -> tensor<256x1x!tt.ptr<i8>> loc(#loc60)
    %62 = tt.addptr %61, %60 : tensor<256x1x!tt.ptr<i8>>, tensor<256x1xi32> loc(#loc60)
    %63 = tt.splat %arg12 : i32 -> tensor<1x8xi32> loc(#loc61)
    %64 = arith.muli %54, %63 : tensor<1x8xi32> loc(#loc61)
    %65 = tt.broadcast %62 : tensor<256x1x!tt.ptr<i8>> -> tensor<256x8x!tt.ptr<i8>> loc(#loc62)
    %66 = tt.broadcast %64 : tensor<1x8xi32> -> tensor<256x8xi32> loc(#loc62)
    %67 = tt.addptr %65, %66 : tensor<256x8x!tt.ptr<i8>>, tensor<256x8xi32> loc(#loc62)
    %68 = arith.addi %arg7, %c127_i32 : i32 loc(#loc104)
    %69 = arith.divsi %68, %c128_i32 : i32 loc(#loc105)
    %70 = arith.muli %arg11, %c8_i32 : i32 loc(#loc64)
    %71 = tt.splat %70 : i32 -> tensor<256x8xi32> loc(#loc65)
    %72 = arith.muli %arg12, %c8_i32 : i32 loc(#loc66)
    %73 = tt.splat %72 : i32 -> tensor<256x8xi32> loc(#loc67)
    %74:5 = scf.for %arg13 = %c0_i32 to %69 step %c1_i32 iter_args(%arg14 = %cst_1, %arg15 = %41, %arg16 = %50, %arg17 = %59, %arg18 = %67) -> (tensor<256x256xf32>, tensor<256x128x!tt.ptr<i8>>, tensor<128x256x!tt.ptr<i8>>, tensor<256x8x!tt.ptr<i8>>, tensor<256x8x!tt.ptr<i8>>)  : i32 {
      %102 = tt.load %arg17 : tensor<256x8x!tt.ptr<i8>> loc(#loc69)
      %103 = tt.load %arg18 : tensor<256x8x!tt.ptr<i8>> loc(#loc70)
      %104 = tt.load %arg15 : tensor<256x128x!tt.ptr<i8>> loc(#loc71)
      %105 = tt.load %arg16 : tensor<128x256x!tt.ptr<i8>> loc(#loc72)
      %106 = tt.dot_scaled %104 scale %102, %105 scale %103, %arg14 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<256x128xi8>, tensor<256x8xi8> * tensor<128x256xi8>, tensor<256x8xi8> -> tensor<256x256xf32> loc(#loc73)
      %107 = tt.addptr %arg15, %cst_0 : tensor<256x128x!tt.ptr<i8>>, tensor<256x128xi32> loc(#loc74)
      %108 = tt.addptr %arg16, %cst : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc75)
      %109 = tt.addptr %arg17, %71 : tensor<256x8x!tt.ptr<i8>>, tensor<256x8xi32> loc(#loc65)
      %110 = tt.addptr %arg18, %73 : tensor<256x8x!tt.ptr<i8>>, tensor<256x8xi32> loc(#loc67)
      scf.yield %106, %107, %108, %109, %110 : tensor<256x256xf32>, tensor<256x128x!tt.ptr<i8>>, tensor<128x256x!tt.ptr<i8>>, tensor<256x8x!tt.ptr<i8>>, tensor<256x8x!tt.ptr<i8>> loc(#loc76)
    } loc(#loc68)
    %75 = arith.truncf %74#0 : tensor<256x256xf32> to tensor<256x256xbf16> loc(#loc77)
    %76 = arith.extsi %23 : tensor<256xi32> to tensor<256xi64> loc(#loc78)
    %77 = arith.extsi %22 : i32 to i64 loc(#loc79)
    %78 = tt.splat %77 : i64 -> tensor<256xi64> loc(#loc79)
    %79 = arith.addi %78, %76 : tensor<256xi64> loc(#loc79)
    %80 = arith.extsi %28 : i32 to i64 loc(#loc80)
    %81 = tt.splat %80 : i64 -> tensor<256xi64> loc(#loc80)
    %82 = arith.addi %81, %76 : tensor<256xi64> loc(#loc80)
    %83 = tt.expand_dims %79 {axis = 1 : i32} : tensor<256xi64> -> tensor<256x1xi64> loc(#loc81)
    %84 = arith.extsi %arg10 : i32 to i64 loc(#loc82)
    %85 = tt.splat %84 : i64 -> tensor<256x1xi64> loc(#loc82)
    %86 = arith.muli %85, %83 : tensor<256x1xi64> loc(#loc82)
    %87 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<256x1x!tt.ptr<bf16>> loc(#loc83)
    %88 = tt.addptr %87, %86 : tensor<256x1x!tt.ptr<bf16>>, tensor<256x1xi64> loc(#loc83)
    %89 = tt.expand_dims %82 {axis = 0 : i32} : tensor<256xi64> -> tensor<1x256xi64> loc(#loc84)
    %90 = tt.broadcast %88 : tensor<256x1x!tt.ptr<bf16>> -> tensor<256x256x!tt.ptr<bf16>> loc(#loc85)
    %91 = tt.broadcast %89 : tensor<1x256xi64> -> tensor<256x256xi64> loc(#loc85)
    %92 = tt.addptr %90, %91 : tensor<256x256x!tt.ptr<bf16>>, tensor<256x256xi64> loc(#loc85)
    %93 = arith.extsi %arg5 : i32 to i64 loc(#loc86)
    %94 = tt.splat %93 : i64 -> tensor<256x1xi64> loc(#loc86)
    %95 = arith.cmpi slt, %83, %94 : tensor<256x1xi64> loc(#loc86)
    %96 = arith.extsi %arg6 : i32 to i64 loc(#loc87)
    %97 = tt.splat %96 : i64 -> tensor<1x256xi64> loc(#loc87)
    %98 = arith.cmpi slt, %89, %97 : tensor<1x256xi64> loc(#loc87)
    %99 = tt.broadcast %95 : tensor<256x1xi1> -> tensor<256x256xi1> loc(#loc88)
    %100 = tt.broadcast %98 : tensor<1x256xi1> -> tensor<256x256xi1> loc(#loc88)
    %101 = arith.andi %99, %100 : tensor<256x256xi1> loc(#loc88)
    tt.store %92, %75, %101 : tensor<256x256x!tt.ptr<bf16>> loc(#loc89)
    tt.return loc(#loc90)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:26)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":48:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:26)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:26)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:27)
#loc13 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:27)
#loc15 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc16 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc17 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":61:24)
#loc18 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc19 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":62:27)
#loc20 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc21 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:27)
#loc22 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":35:42)
#loc23 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":67:44)
#loc24 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":36:26)
#loc25 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":37:33)
#loc26 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":38:39)
#loc27 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":38:52)
#loc28 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":39:37)
#loc29 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":39:31)
#loc30 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":40:23)
#loc31 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":40:44)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:22)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:14)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:22)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:14)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":76:26)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:23)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:51)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:38)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:68)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:23)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:38)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:68)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:30)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:41)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:60)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:53)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:22)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:29)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:60)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:71)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:52)
#loc53 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:22)
#loc54 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":82:27)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:34)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:74)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:85)
#loc58 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:66)
#loc59 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:42)
#loc60 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:34)
#loc61 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:85)
#loc62 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:66)
#loc63 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:33)
#loc64 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:61)
#loc65 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:24)
#loc66 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:61)
#loc67 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:24)
#loc68 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:22)
#loc69 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:27)
#loc70 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":91:27)
#loc71 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:24)
#loc72 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":98:24)
#loc73 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:71)
#loc74 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":106:18)
#loc75 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":107:18)
#loc76 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:8)
#loc77 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":111:23)
#loc78 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:67)
#loc79 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:37)
#loc80 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:37)
#loc81 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:41)
#loc82 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:33)
#loc83 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:21)
#loc84 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:72)
#loc85 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:52)
#loc86 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:33)
#loc87 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:58)
#loc88 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:39)
#loc89 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:21)
#loc90 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:4)
#loc91 = loc(callsite(#loc18 at #loc19))
#loc92 = loc(callsite(#loc20 at #loc19))
#loc93 = loc(callsite(#loc18 at #loc21))
#loc94 = loc(callsite(#loc20 at #loc21))
#loc95 = loc(callsite(#loc22 at #loc23))
#loc96 = loc(callsite(#loc24 at #loc23))
#loc97 = loc(callsite(#loc25 at #loc23))
#loc98 = loc(callsite(#loc26 at #loc23))
#loc99 = loc(callsite(#loc27 at #loc23))
#loc100 = loc(callsite(#loc28 at #loc23))
#loc101 = loc(callsite(#loc29 at #loc23))
#loc102 = loc(callsite(#loc30 at #loc23))
#loc103 = loc(callsite(#loc31 at #loc23))
#loc104 = loc(callsite(#loc18 at #loc63))
#loc105 = loc(callsite(#loc20 at #loc63))
