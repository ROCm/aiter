; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_gemm_afp4_wfp4_kernel(ptr addrspace(1) inreg readonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg writeonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, i32 inreg %5, i32 inreg %6, i32 inreg %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, ptr addrspace(1) inreg readnone captures(none) %13) local_unnamed_addr #0 !dbg !4 {
  %15 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %16 = add i32 %5, 255, !dbg !8
  %17 = sdiv i32 %16, 256, !dbg !12
  %18 = add i32 %6, 255, !dbg !13
  %19 = sdiv i32 %18, 256, !dbg !15
  %20 = shl nsw i32 %19, 2, !dbg !16
  %.frozen = freeze i32 %20, !dbg !20
  %21 = sdiv i32 %15, %.frozen, !dbg !20
  %22 = shl i32 %21, 2, !dbg !21
  %23 = sub i32 %17, %22, !dbg !22
  %24 = tail call i32 @llvm.smin.i32(i32 %23, i32 4), !dbg !23
  %25 = srem i32 %15, %24, !dbg !24
  %26 = add i32 %22, %25, !dbg !25
  %27 = mul i32 %21, %.frozen, !dbg !26
  %.decomposed = sub i32 %15, %27, !dbg !26
  %28 = sdiv i32 %.decomposed, %24, !dbg !27
  %29 = shl i32 %26, 8, !dbg !28
  %30 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !29
  %31 = and i32 %30, 63, !dbg !29
  %32 = lshr i32 %30, 3, !dbg !29
  %33 = and i32 %32, 63, !dbg !29
  %34 = or disjoint i32 %33, 64, !dbg !29
  %35 = or disjoint i32 %33, 128, !dbg !29
  %36 = or disjoint i32 %33, 192, !dbg !29
  %37 = shl i32 %30, 2, !dbg !29
  %38 = and i32 %37, 252, !dbg !29
  %39 = and i32 %30, 15, !dbg !29
  %40 = lshr i32 %30, 4, !dbg !29
  %41 = and i32 %40, 16, !dbg !29
  %42 = or disjoint i32 %41, %39, !dbg !29
  %43 = lshr i32 %30, 2, !dbg !29
  %44 = and i32 %43, 16, !dbg !29
  %45 = lshr i32 %30, 2, !dbg !29
  %46 = and i32 %45, 32, !dbg !29
  %47 = or disjoint i32 %29, %33, !dbg !30
  %48 = or disjoint i32 %29, %34, !dbg !30
  %49 = or disjoint i32 %29, %35, !dbg !30
  %50 = or disjoint i32 %29, %36, !dbg !30
  %51 = or disjoint i32 %29, %38, !dbg !30
  %52 = srem i32 %47, %5, !dbg !31
  %53 = srem i32 %48, %5, !dbg !31
  %54 = srem i32 %49, %5, !dbg !31
  %55 = srem i32 %50, %5, !dbg !31
  %56 = srem i32 %51, %5, !dbg !31
  %57 = shl i32 %28, 8, !dbg !32
  %58 = or disjoint i32 %57, %33, !dbg !33
  %59 = or disjoint i32 %57, %34, !dbg !33
  %60 = or disjoint i32 %57, %35, !dbg !33
  %61 = or disjoint i32 %57, %36, !dbg !33
  %62 = or disjoint i32 %57, %38, !dbg !33
  %63 = srem i32 %58, %6, !dbg !34
  %64 = srem i32 %59, %6, !dbg !34
  %65 = srem i32 %60, %6, !dbg !34
  %66 = srem i32 %61, %6, !dbg !34
  %67 = srem i32 %62, %6, !dbg !34
  %68 = shl i32 %30, 4, !dbg !35
  %69 = and i32 %68, 112, !dbg !35
  %70 = mul i32 %52, %8, !dbg !36
  %71 = mul i32 %53, %8, !dbg !36
  %72 = mul i32 %54, %8, !dbg !36
  %73 = mul i32 %55, %8, !dbg !36
  %74 = add i32 %70, %69, !dbg !36
  %75 = add i32 %71, %69, !dbg !36
  %76 = add i32 %72, %69, !dbg !36
  %77 = add i32 %73, %69, !dbg !36
  %78 = mul i32 %63, %9, !dbg !37
  %79 = mul i32 %64, %9, !dbg !37
  %80 = mul i32 %65, %9, !dbg !37
  %81 = mul i32 %66, %9, !dbg !37
  %82 = add i32 %78, %69, !dbg !37
  %83 = add i32 %79, %69, !dbg !37
  %84 = add i32 %80, %69, !dbg !37
  %85 = add i32 %81, %69, !dbg !37
  %86 = lshr i32 %30, 6, !dbg !38
  %87 = and i32 %86, 7, !dbg !38
  %88 = mul i32 %11, %87, !dbg !39
  %89 = add i32 %56, %88, !dbg !39
  %90 = mul i32 %12, %87, !dbg !40
  %91 = add i32 %67, %90, !dbg !40
  %92 = add i32 %7, 127, !dbg !41
  %93 = icmp sgt i32 %92, 127, !dbg !43
  %94 = shl nuw nsw i32 %87, 8, !dbg !44
  %95 = or disjoint i32 %94, %38, !dbg !44
  %96 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %95, !dbg !44
  %97 = trunc i32 %11 to i16, !dbg !44
  %98 = and i16 %97, 16383, !dbg !44
  %99 = or disjoint i16 %98, 16384, !dbg !44
  %100 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %3, i16 %99, i32 2147483646, i32 159744), !dbg !44
  %101 = select i1 %93, i32 %89, i32 -2147483648, !dbg !44
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %100, ptr addrspace(3) %96, i32 4, i32 %101, i32 0, i32 0, i32 0), !dbg !44, !alias.scope !45
  %102 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), i32 %95, !dbg !48
  %103 = trunc i32 %12 to i16, !dbg !48
  %104 = and i16 %103, 16383, !dbg !48
  %105 = or disjoint i16 %104, 16384, !dbg !48
  %106 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %4, i16 %105, i32 2147483646, i32 159744), !dbg !48
  %107 = select i1 %93, i32 %91, i32 -2147483648, !dbg !48
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %106, ptr addrspace(3) %102, i32 4, i32 %107, i32 0, i32 0, i32 0), !dbg !48, !alias.scope !45
  %108 = xor i32 %68, %30, !dbg !49
  %109 = and i32 %108, 112, !dbg !49
  %110 = shl nuw nsw i32 %33, 7, !dbg !49
  %111 = or disjoint i32 %110, 8192, !dbg !49
  %112 = or disjoint i32 %110, 16384, !dbg !49
  %113 = or disjoint i32 %110, 24576, !dbg !49
  %114 = or disjoint i32 %110, %69, !dbg !49
  %115 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !49
  %116 = or disjoint i32 %111, %69, !dbg !49
  %117 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !49
  %118 = or disjoint i32 %112, %69, !dbg !49
  %119 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !49
  %120 = or disjoint i32 %113, %69, !dbg !49
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !49
  %122 = trunc i32 %8 to i16, !dbg !49
  %123 = and i16 %122, 16383, !dbg !49
  %124 = or disjoint i16 %123, 16384, !dbg !49
  %125 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %0, i16 %124, i32 2147483646, i32 159744), !dbg !49
  %gepdiff = sub nsw i32 %109, %69, !dbg !49
  %126 = ashr exact i32 %gepdiff, 4, !dbg !49
  %127 = add nsw i32 %126, %31, !dbg !49
  %128 = shl nsw i32 %127, 2, !dbg !49
  %129 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %74), !dbg !49
  %130 = tail call i64 @llvm.amdgcn.ballot.i64(i1 %93), !dbg !49
  %131 = zext nneg i32 %127 to i64, !dbg !49
  %132 = lshr i64 %130, %131, !dbg !49
  %133 = trunc i64 %132 to i1, !dbg !49
  %134 = select i1 %133, i32 %129, i32 -2147483648, !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %125, ptr addrspace(3) %115, i32 16, i32 %134, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %135 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %75), !dbg !49
  %136 = select i1 %133, i32 %135, i32 -2147483648, !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %125, ptr addrspace(3) nonnull %117, i32 16, i32 %136, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %137 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %76), !dbg !49
  %138 = select i1 %133, i32 %137, i32 -2147483648, !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %125, ptr addrspace(3) nonnull %119, i32 16, i32 %138, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %139 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %77), !dbg !49
  %140 = select i1 %133, i32 %139, i32 -2147483648, !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %125, ptr addrspace(3) nonnull %121, i32 16, i32 %140, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %141 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %114, !dbg !50
  %142 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %116, !dbg !50
  %143 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %118, !dbg !50
  %144 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %120, !dbg !50
  %145 = trunc i32 %9 to i16, !dbg !50
  %146 = and i16 %145, 16383, !dbg !50
  %147 = or disjoint i16 %146, 16384, !dbg !50
  %148 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1, i16 %147, i32 2147483646, i32 159744), !dbg !50
  %149 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %82), !dbg !50
  %150 = select i1 %133, i32 %149, i32 -2147483648, !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %148, ptr addrspace(3) %141, i32 16, i32 %150, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %151 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %83), !dbg !50
  %152 = select i1 %133, i32 %151, i32 -2147483648, !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %148, ptr addrspace(3) nonnull %142, i32 16, i32 %152, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %153 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %84), !dbg !50
  %154 = select i1 %133, i32 %153, i32 -2147483648, !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %148, ptr addrspace(3) nonnull %143, i32 16, i32 %154, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %155 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %85), !dbg !50
  %156 = select i1 %133, i32 %155, i32 -2147483648, !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %148, ptr addrspace(3) nonnull %144, i32 16, i32 %156, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %157 = icmp sgt i32 %92, 255, !dbg !43
  br i1 %157, label %.lr.ph, label %._crit_edge, !dbg !43

.lr.ph:                                           ; preds = %14
  %158 = lshr i32 %92, 7, !dbg !51
  %invariant.op102 = or disjoint i32 %44, %46, !dbg !43
  %159 = shl i32 %12, 3, !dbg !52
  %160 = shl i32 %11, 3, !dbg !53
  %161 = sext i32 %160 to i64
  %162 = sext i32 %159 to i64
  %163 = and i32 %30, 48
  %164 = or disjoint i32 %42, 32
  %165 = or disjoint i32 %39, 64
  %166 = or disjoint i32 %165, %41
  %167 = or disjoint i32 %42, 96
  %168 = or disjoint i32 %39, 128
  %169 = or disjoint i32 %168, %41
  %170 = or disjoint i32 %42, 160
  %171 = or disjoint i32 %39, 192
  %172 = or disjoint i32 %171, %41
  %173 = or disjoint i32 %42, 224
  %174 = or disjoint i32 %invariant.op102, %39
  %.reass = or disjoint i32 %165, %invariant.op102
  %.reass101 = or disjoint i32 %168, %invariant.op102
  %.reass103 = or disjoint i32 %171, %invariant.op102
  %175 = and i32 %68, 768
  %176 = or disjoint i32 %42, %175
  %177 = or disjoint i32 %164, %175
  %178 = or disjoint i32 %166, %175
  %179 = or disjoint i32 %167, %175
  %180 = or disjoint i32 %169, %175
  %181 = or disjoint i32 %170, %175
  %182 = or disjoint i32 %172, %175
  %183 = or disjoint i32 %173, %175
  %184 = or disjoint i32 %174, %175
  %185 = or disjoint i32 %.reass, %175
  %186 = or disjoint i32 %.reass101, %175
  %187 = or disjoint i32 %.reass103, %175
  %invariant.op108 = or disjoint i32 %163, 64, !dbg !43
  %188 = add nsw i32 %158, -2
  %189 = shl nuw nsw i32 %42, 7
  %190 = and i32 %30, 2
  %191 = icmp eq i32 %190, 0
  %192 = select i1 %191, i32 0, i32 272
  %193 = and i32 %30, 4
  %194 = icmp eq i32 %193, 0
  %195 = select i1 %194, i32 0, i32 544
  %196 = and i32 %30, 8
  %197 = icmp eq i32 %196, 0
  %198 = select i1 %197, i32 0, i32 1088
  %199 = and i32 %189, 2176
  %200 = or disjoint i32 %199, %192
  %201 = or disjoint i32 %200, %195
  %202 = or disjoint i32 %201, %198
  %203 = xor i32 %202, %163
  %204 = shl nuw nsw i32 %164, 7
  %205 = and i32 %30, 2
  %206 = icmp eq i32 %205, 0
  %207 = select i1 %206, i32 0, i32 272
  %208 = and i32 %30, 4
  %209 = icmp eq i32 %208, 0
  %210 = select i1 %209, i32 0, i32 544
  %211 = and i32 %30, 8
  %212 = icmp eq i32 %211, 0
  %213 = select i1 %212, i32 0, i32 1088
  %214 = and i32 %204, 6272
  %215 = or disjoint i32 %214, %207
  %216 = or disjoint i32 %215, %210
  %217 = or disjoint i32 %216, %213
  %218 = xor i32 %217, %163
  %219 = shl nuw nsw i32 %166, 7
  %220 = and i32 %30, 2
  %221 = icmp eq i32 %220, 0
  %222 = select i1 %221, i32 0, i32 272
  %223 = and i32 %30, 4
  %224 = icmp eq i32 %223, 0
  %225 = select i1 %224, i32 0, i32 544
  %226 = and i32 %30, 8
  %227 = icmp eq i32 %226, 0
  %228 = select i1 %227, i32 0, i32 1088
  %229 = and i32 %219, 10368
  %230 = or disjoint i32 %229, %222
  %231 = or disjoint i32 %230, %225
  %232 = or disjoint i32 %231, %228
  %233 = xor i32 %232, %163
  %234 = shl nuw nsw i32 %167, 7
  %235 = and i32 %30, 2
  %236 = icmp eq i32 %235, 0
  %237 = select i1 %236, i32 0, i32 272
  %238 = and i32 %30, 4
  %239 = icmp eq i32 %238, 0
  %240 = select i1 %239, i32 0, i32 544
  %241 = and i32 %30, 8
  %242 = icmp eq i32 %241, 0
  %243 = select i1 %242, i32 0, i32 1088
  %244 = and i32 %234, 14464
  %245 = or disjoint i32 %244, %237
  %246 = or disjoint i32 %245, %240
  %247 = or disjoint i32 %246, %243
  %248 = xor i32 %247, %163
  %249 = shl nuw nsw i32 %169, 7
  %250 = and i32 %30, 2
  %251 = icmp eq i32 %250, 0
  %252 = select i1 %251, i32 0, i32 272
  %253 = and i32 %30, 4
  %254 = icmp eq i32 %253, 0
  %255 = select i1 %254, i32 0, i32 544
  %256 = and i32 %30, 8
  %257 = icmp eq i32 %256, 0
  %258 = select i1 %257, i32 0, i32 1088
  %259 = and i32 %249, 18560
  %260 = or disjoint i32 %259, %252
  %261 = or disjoint i32 %260, %255
  %262 = or disjoint i32 %261, %258
  %263 = xor i32 %262, %163
  %264 = shl nuw nsw i32 %170, 7
  %265 = and i32 %30, 2
  %266 = icmp eq i32 %265, 0
  %267 = select i1 %266, i32 0, i32 272
  %268 = and i32 %30, 4
  %269 = icmp eq i32 %268, 0
  %270 = select i1 %269, i32 0, i32 544
  %271 = and i32 %30, 8
  %272 = icmp eq i32 %271, 0
  %273 = select i1 %272, i32 0, i32 1088
  %274 = and i32 %264, 22656
  %275 = or disjoint i32 %274, %267
  %276 = or disjoint i32 %275, %270
  %277 = or disjoint i32 %276, %273
  %278 = xor i32 %277, %163
  %279 = shl nuw nsw i32 %172, 7
  %280 = and i32 %30, 2
  %281 = icmp eq i32 %280, 0
  %282 = select i1 %281, i32 0, i32 272
  %283 = and i32 %30, 4
  %284 = icmp eq i32 %283, 0
  %285 = select i1 %284, i32 0, i32 544
  %286 = and i32 %30, 8
  %287 = icmp eq i32 %286, 0
  %288 = select i1 %287, i32 0, i32 1088
  %289 = and i32 %279, 26752
  %290 = or disjoint i32 %289, %282
  %291 = or disjoint i32 %290, %285
  %292 = or disjoint i32 %291, %288
  %293 = xor i32 %292, %163
  %294 = shl nuw nsw i32 %173, 7
  %295 = and i32 %30, 2
  %296 = icmp eq i32 %295, 0
  %297 = select i1 %296, i32 0, i32 272
  %298 = and i32 %30, 4
  %299 = icmp eq i32 %298, 0
  %300 = select i1 %299, i32 0, i32 544
  %301 = and i32 %30, 8
  %302 = icmp eq i32 %301, 0
  %303 = select i1 %302, i32 0, i32 1088
  %304 = and i32 %294, 30848
  %305 = or disjoint i32 %304, %297
  %306 = or disjoint i32 %305, %300
  %307 = or disjoint i32 %306, %303
  %308 = xor i32 %307, %163
  %309 = shl nuw nsw i32 %174, 7
  %310 = and i32 %309, 128
  %311 = or disjoint i32 %163, %310
  %312 = and i32 %30, 2
  %313 = icmp eq i32 %312, 0
  %314 = select i1 %313, i32 0, i32 272
  %315 = and i32 %30, 4
  %316 = icmp eq i32 %315, 0
  %317 = select i1 %316, i32 0, i32 544
  %318 = and i32 %30, 8
  %319 = icmp eq i32 %318, 0
  %320 = select i1 %319, i32 0, i32 1088
  %and.ra58 = and i32 %309, 6144
  %321 = or disjoint i32 %314, %and.ra58
  %322 = or disjoint i32 %321, %317
  %323 = xor i32 %322, %311
  %324 = shl nuw nsw i32 %.reass, 7
  %325 = and i32 %324, 128
  %326 = or disjoint i32 %163, %325
  %327 = and i32 %30, 2
  %328 = icmp eq i32 %327, 0
  %329 = select i1 %328, i32 0, i32 272
  %330 = and i32 %30, 4
  %331 = icmp eq i32 %330, 0
  %332 = select i1 %331, i32 0, i32 544
  %333 = and i32 %30, 8
  %334 = icmp eq i32 %333, 0
  %335 = select i1 %334, i32 0, i32 1088
  %and.ra61 = and i32 %324, 14336
  %336 = or disjoint i32 %329, %and.ra61
  %337 = or disjoint i32 %336, %332
  %338 = xor i32 %337, %326
  %339 = shl nuw nsw i32 %.reass101, 7
  %340 = and i32 %339, 128
  %341 = or disjoint i32 %163, %340
  %342 = and i32 %30, 2
  %343 = icmp eq i32 %342, 0
  %344 = select i1 %343, i32 0, i32 272
  %345 = and i32 %30, 4
  %346 = icmp eq i32 %345, 0
  %347 = select i1 %346, i32 0, i32 544
  %348 = and i32 %30, 8
  %349 = icmp eq i32 %348, 0
  %350 = select i1 %349, i32 0, i32 1088
  %and.ra64 = and i32 %339, 22528
  %351 = or disjoint i32 %344, %and.ra64
  %352 = or disjoint i32 %351, %347
  %353 = xor i32 %352, %341
  %354 = shl nuw nsw i32 %.reass103, 7
  %355 = and i32 %354, 128
  %356 = or disjoint i32 %163, %355
  %357 = and i32 %30, 2
  %358 = icmp eq i32 %357, 0
  %359 = select i1 %358, i32 0, i32 272
  %360 = and i32 %30, 4
  %361 = icmp eq i32 %360, 0
  %362 = select i1 %361, i32 0, i32 544
  %363 = and i32 %30, 8
  %364 = icmp eq i32 %363, 0
  %365 = select i1 %364, i32 0, i32 1088
  %and.ra67 = and i32 %354, 30720
  %366 = or disjoint i32 %359, %and.ra67
  %367 = or disjoint i32 %366, %362
  %368 = xor i32 %367, %356
  %369 = xor i32 %202, %invariant.op108
  %370 = xor i32 %217, %invariant.op108
  %371 = xor i32 %232, %invariant.op108
  %372 = xor i32 %247, %invariant.op108
  %373 = xor i32 %262, %invariant.op108
  %374 = xor i32 %277, %invariant.op108
  %375 = xor i32 %292, %invariant.op108
  %376 = xor i32 %307, %invariant.op108
  %377 = or disjoint i32 %invariant.op108, %310
  %378 = or disjoint i32 %322, %320
  %379 = xor i32 %378, %377
  %380 = or disjoint i32 %invariant.op108, %325
  %381 = or disjoint i32 %337, %335
  %382 = xor i32 %381, %380
  %383 = or disjoint i32 %invariant.op108, %340
  %384 = or disjoint i32 %352, %350
  %385 = xor i32 %384, %383
  %386 = or disjoint i32 %invariant.op108, %355
  %387 = or disjoint i32 %367, %365
  %388 = xor i32 %387, %386
  br label %389, !dbg !43

389:                                              ; preds = %.lr.ph, %389
  %390 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), %.lr.ph ], [ %774, %389 ]
  %391 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %536, %389 ]
  %392 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), %.lr.ph ], [ %813, %389 ]
  %393 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), %.lr.ph ], [ %547, %389 ]
  %394 = phi i32 [ 0, %.lr.ph ], [ %534, %389 ]
  %395 = phi ptr addrspace(1) [ %1, %.lr.ph ], [ %529, %389 ]
  %396 = phi ptr addrspace(1) [ %0, %.lr.ph ], [ %528, %389 ]
  %397 = phi ptr addrspace(1) [ %4, %.lr.ph ], [ %531, %389 ]
  %398 = phi ptr addrspace(1) [ %3, %.lr.ph ], [ %530, %389 ]
  %399 = phi float [ 0.000000e+00, %.lr.ph ], [ %879, %389 ]
  %400 = phi float [ 0.000000e+00, %.lr.ph ], [ %880, %389 ]
  %401 = phi float [ 0.000000e+00, %.lr.ph ], [ %881, %389 ]
  %402 = phi float [ 0.000000e+00, %.lr.ph ], [ %882, %389 ]
  %403 = phi float [ 0.000000e+00, %.lr.ph ], [ %884, %389 ]
  %404 = phi float [ 0.000000e+00, %.lr.ph ], [ %885, %389 ]
  %405 = phi float [ 0.000000e+00, %.lr.ph ], [ %886, %389 ]
  %406 = phi float [ 0.000000e+00, %.lr.ph ], [ %887, %389 ]
  %407 = phi float [ 0.000000e+00, %.lr.ph ], [ %889, %389 ]
  %408 = phi float [ 0.000000e+00, %.lr.ph ], [ %890, %389 ]
  %409 = phi float [ 0.000000e+00, %.lr.ph ], [ %891, %389 ]
  %410 = phi float [ 0.000000e+00, %.lr.ph ], [ %892, %389 ]
  %411 = phi float [ 0.000000e+00, %.lr.ph ], [ %894, %389 ]
  %412 = phi float [ 0.000000e+00, %.lr.ph ], [ %895, %389 ]
  %413 = phi float [ 0.000000e+00, %.lr.ph ], [ %896, %389 ]
  %414 = phi float [ 0.000000e+00, %.lr.ph ], [ %897, %389 ]
  %415 = phi float [ 0.000000e+00, %.lr.ph ], [ %899, %389 ]
  %416 = phi float [ 0.000000e+00, %.lr.ph ], [ %900, %389 ]
  %417 = phi float [ 0.000000e+00, %.lr.ph ], [ %901, %389 ]
  %418 = phi float [ 0.000000e+00, %.lr.ph ], [ %902, %389 ]
  %419 = phi float [ 0.000000e+00, %.lr.ph ], [ %904, %389 ]
  %420 = phi float [ 0.000000e+00, %.lr.ph ], [ %905, %389 ]
  %421 = phi float [ 0.000000e+00, %.lr.ph ], [ %906, %389 ]
  %422 = phi float [ 0.000000e+00, %.lr.ph ], [ %907, %389 ]
  %423 = phi float [ 0.000000e+00, %.lr.ph ], [ %909, %389 ]
  %424 = phi float [ 0.000000e+00, %.lr.ph ], [ %910, %389 ]
  %425 = phi float [ 0.000000e+00, %.lr.ph ], [ %911, %389 ]
  %426 = phi float [ 0.000000e+00, %.lr.ph ], [ %912, %389 ]
  %427 = phi float [ 0.000000e+00, %.lr.ph ], [ %914, %389 ]
  %428 = phi float [ 0.000000e+00, %.lr.ph ], [ %915, %389 ]
  %429 = phi float [ 0.000000e+00, %.lr.ph ], [ %916, %389 ]
  %430 = phi float [ 0.000000e+00, %.lr.ph ], [ %917, %389 ]
  %431 = phi float [ 0.000000e+00, %.lr.ph ], [ %919, %389 ]
  %432 = phi float [ 0.000000e+00, %.lr.ph ], [ %920, %389 ]
  %433 = phi float [ 0.000000e+00, %.lr.ph ], [ %921, %389 ]
  %434 = phi float [ 0.000000e+00, %.lr.ph ], [ %922, %389 ]
  %435 = phi float [ 0.000000e+00, %.lr.ph ], [ %924, %389 ]
  %436 = phi float [ 0.000000e+00, %.lr.ph ], [ %925, %389 ]
  %437 = phi float [ 0.000000e+00, %.lr.ph ], [ %926, %389 ]
  %438 = phi float [ 0.000000e+00, %.lr.ph ], [ %927, %389 ]
  %439 = phi float [ 0.000000e+00, %.lr.ph ], [ %929, %389 ]
  %440 = phi float [ 0.000000e+00, %.lr.ph ], [ %930, %389 ]
  %441 = phi float [ 0.000000e+00, %.lr.ph ], [ %931, %389 ]
  %442 = phi float [ 0.000000e+00, %.lr.ph ], [ %932, %389 ]
  %443 = phi float [ 0.000000e+00, %.lr.ph ], [ %934, %389 ]
  %444 = phi float [ 0.000000e+00, %.lr.ph ], [ %935, %389 ]
  %445 = phi float [ 0.000000e+00, %.lr.ph ], [ %936, %389 ]
  %446 = phi float [ 0.000000e+00, %.lr.ph ], [ %937, %389 ]
  %447 = phi float [ 0.000000e+00, %.lr.ph ], [ %939, %389 ]
  %448 = phi float [ 0.000000e+00, %.lr.ph ], [ %940, %389 ]
  %449 = phi float [ 0.000000e+00, %.lr.ph ], [ %941, %389 ]
  %450 = phi float [ 0.000000e+00, %.lr.ph ], [ %942, %389 ]
  %451 = phi float [ 0.000000e+00, %.lr.ph ], [ %944, %389 ]
  %452 = phi float [ 0.000000e+00, %.lr.ph ], [ %945, %389 ]
  %453 = phi float [ 0.000000e+00, %.lr.ph ], [ %946, %389 ]
  %454 = phi float [ 0.000000e+00, %.lr.ph ], [ %947, %389 ]
  %455 = phi float [ 0.000000e+00, %.lr.ph ], [ %949, %389 ]
  %456 = phi float [ 0.000000e+00, %.lr.ph ], [ %950, %389 ]
  %457 = phi float [ 0.000000e+00, %.lr.ph ], [ %951, %389 ]
  %458 = phi float [ 0.000000e+00, %.lr.ph ], [ %952, %389 ]
  %459 = phi float [ 0.000000e+00, %.lr.ph ], [ %954, %389 ]
  %460 = phi float [ 0.000000e+00, %.lr.ph ], [ %955, %389 ]
  %461 = phi float [ 0.000000e+00, %.lr.ph ], [ %956, %389 ]
  %462 = phi float [ 0.000000e+00, %.lr.ph ], [ %957, %389 ]
  %463 = phi float [ 0.000000e+00, %.lr.ph ], [ %959, %389 ]
  %464 = phi float [ 0.000000e+00, %.lr.ph ], [ %960, %389 ]
  %465 = phi float [ 0.000000e+00, %.lr.ph ], [ %961, %389 ]
  %466 = phi float [ 0.000000e+00, %.lr.ph ], [ %962, %389 ]
  %467 = phi float [ 0.000000e+00, %.lr.ph ], [ %964, %389 ]
  %468 = phi float [ 0.000000e+00, %.lr.ph ], [ %965, %389 ]
  %469 = phi float [ 0.000000e+00, %.lr.ph ], [ %966, %389 ]
  %470 = phi float [ 0.000000e+00, %.lr.ph ], [ %967, %389 ]
  %471 = phi float [ 0.000000e+00, %.lr.ph ], [ %969, %389 ]
  %472 = phi float [ 0.000000e+00, %.lr.ph ], [ %970, %389 ]
  %473 = phi float [ 0.000000e+00, %.lr.ph ], [ %971, %389 ]
  %474 = phi float [ 0.000000e+00, %.lr.ph ], [ %972, %389 ]
  %475 = phi float [ 0.000000e+00, %.lr.ph ], [ %974, %389 ]
  %476 = phi float [ 0.000000e+00, %.lr.ph ], [ %975, %389 ]
  %477 = phi float [ 0.000000e+00, %.lr.ph ], [ %976, %389 ]
  %478 = phi float [ 0.000000e+00, %.lr.ph ], [ %977, %389 ]
  %479 = phi float [ 0.000000e+00, %.lr.ph ], [ %979, %389 ]
  %480 = phi float [ 0.000000e+00, %.lr.ph ], [ %980, %389 ]
  %481 = phi float [ 0.000000e+00, %.lr.ph ], [ %981, %389 ]
  %482 = phi float [ 0.000000e+00, %.lr.ph ], [ %982, %389 ]
  %483 = phi float [ 0.000000e+00, %.lr.ph ], [ %984, %389 ]
  %484 = phi float [ 0.000000e+00, %.lr.ph ], [ %985, %389 ]
  %485 = phi float [ 0.000000e+00, %.lr.ph ], [ %986, %389 ]
  %486 = phi float [ 0.000000e+00, %.lr.ph ], [ %987, %389 ]
  %487 = phi float [ 0.000000e+00, %.lr.ph ], [ %989, %389 ]
  %488 = phi float [ 0.000000e+00, %.lr.ph ], [ %990, %389 ]
  %489 = phi float [ 0.000000e+00, %.lr.ph ], [ %991, %389 ]
  %490 = phi float [ 0.000000e+00, %.lr.ph ], [ %992, %389 ]
  %491 = phi float [ 0.000000e+00, %.lr.ph ], [ %994, %389 ]
  %492 = phi float [ 0.000000e+00, %.lr.ph ], [ %995, %389 ]
  %493 = phi float [ 0.000000e+00, %.lr.ph ], [ %996, %389 ]
  %494 = phi float [ 0.000000e+00, %.lr.ph ], [ %997, %389 ]
  %495 = phi float [ 0.000000e+00, %.lr.ph ], [ %999, %389 ]
  %496 = phi float [ 0.000000e+00, %.lr.ph ], [ %1000, %389 ]
  %497 = phi float [ 0.000000e+00, %.lr.ph ], [ %1001, %389 ]
  %498 = phi float [ 0.000000e+00, %.lr.ph ], [ %1002, %389 ]
  %499 = phi float [ 0.000000e+00, %.lr.ph ], [ %1004, %389 ]
  %500 = phi float [ 0.000000e+00, %.lr.ph ], [ %1005, %389 ]
  %501 = phi float [ 0.000000e+00, %.lr.ph ], [ %1006, %389 ]
  %502 = phi float [ 0.000000e+00, %.lr.ph ], [ %1007, %389 ]
  %503 = phi float [ 0.000000e+00, %.lr.ph ], [ %1009, %389 ]
  %504 = phi float [ 0.000000e+00, %.lr.ph ], [ %1010, %389 ]
  %505 = phi float [ 0.000000e+00, %.lr.ph ], [ %1011, %389 ]
  %506 = phi float [ 0.000000e+00, %.lr.ph ], [ %1012, %389 ]
  %507 = phi float [ 0.000000e+00, %.lr.ph ], [ %1014, %389 ]
  %508 = phi float [ 0.000000e+00, %.lr.ph ], [ %1015, %389 ]
  %509 = phi float [ 0.000000e+00, %.lr.ph ], [ %1016, %389 ]
  %510 = phi float [ 0.000000e+00, %.lr.ph ], [ %1017, %389 ]
  %511 = phi float [ 0.000000e+00, %.lr.ph ], [ %1019, %389 ]
  %512 = phi float [ 0.000000e+00, %.lr.ph ], [ %1020, %389 ]
  %513 = phi float [ 0.000000e+00, %.lr.ph ], [ %1021, %389 ]
  %514 = phi float [ 0.000000e+00, %.lr.ph ], [ %1022, %389 ]
  %515 = phi float [ 0.000000e+00, %.lr.ph ], [ %1024, %389 ]
  %516 = phi float [ 0.000000e+00, %.lr.ph ], [ %1025, %389 ]
  %517 = phi float [ 0.000000e+00, %.lr.ph ], [ %1026, %389 ]
  %518 = phi float [ 0.000000e+00, %.lr.ph ], [ %1027, %389 ]
  %519 = phi float [ 0.000000e+00, %.lr.ph ], [ %1029, %389 ]
  %520 = phi float [ 0.000000e+00, %.lr.ph ], [ %1030, %389 ]
  %521 = phi float [ 0.000000e+00, %.lr.ph ], [ %1031, %389 ]
  %522 = phi float [ 0.000000e+00, %.lr.ph ], [ %1032, %389 ]
  %523 = phi float [ 0.000000e+00, %.lr.ph ], [ %1034, %389 ]
  %524 = phi float [ 0.000000e+00, %.lr.ph ], [ %1035, %389 ]
  %525 = phi float [ 0.000000e+00, %.lr.ph ], [ %1036, %389 ]
  %526 = phi float [ 0.000000e+00, %.lr.ph ], [ %1037, %389 ]
  %527 = phi i32 [ 0, %.lr.ph ], [ %1038, %389 ]
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !54
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !44
  fence syncscope("workgroup") release, !dbg !44
  tail call void @llvm.amdgcn.s.barrier(), !dbg !44
  fence syncscope("workgroup") acquire, !dbg !44
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !55
  %528 = getelementptr i8, ptr addrspace(1) %396, i64 128, !dbg !56
  %529 = getelementptr i8, ptr addrspace(1) %395, i64 128, !dbg !57
  %530 = getelementptr i8, ptr addrspace(1) %398, i64 %161, !dbg !58
  %531 = getelementptr i8, ptr addrspace(1) %397, i64 %162, !dbg !59
  %532 = add i32 %394, 1, !dbg !43
  %533 = icmp slt i32 %532, 2, !dbg !43
  %534 = select i1 %533, i32 %532, i32 0, !dbg !43
  %535 = shl i32 %534, 15, !dbg !49
  %536 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %535, !dbg !49
  %537 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 %114, !dbg !49
  %538 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 %116, !dbg !49
  %539 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 %118, !dbg !49
  %540 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 %120, !dbg !49
  %541 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %528, i16 %124, i32 2147483646, i32 159744), !dbg !49
  %542 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %74), !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %541, ptr addrspace(3) %537, i32 16, i32 %542, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %543 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %75), !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %541, ptr addrspace(3) nonnull %538, i32 16, i32 %543, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %544 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %76), !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %541, ptr addrspace(3) nonnull %539, i32 16, i32 %544, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %545 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %128, i32 %77), !dbg !49
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %541, ptr addrspace(3) nonnull %540, i32 16, i32 %545, i32 0, i32 0, i32 0), !dbg !49, !alias.scope !45
  %546 = shl i32 %534, 11, !dbg !44
  %547 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %546, !dbg !44
  %548 = getelementptr inbounds nuw i8, ptr addrspace(3) %547, i32 %95, !dbg !44
  %549 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %530, i16 %99, i32 2147483646, i32 159744), !dbg !44
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %549, ptr addrspace(3) %548, i32 4, i32 %89, i32 0, i32 0, i32 0), !dbg !44, !alias.scope !45
  %550 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %203, !dbg !49
  %551 = load <4 x i32>, ptr addrspace(3) %550, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %552 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %218, !dbg !49
  %553 = load <4 x i32>, ptr addrspace(3) %552, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %554 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %233, !dbg !49
  %555 = load <4 x i32>, ptr addrspace(3) %554, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %556 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %248, !dbg !49
  %557 = load <4 x i32>, ptr addrspace(3) %556, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %558 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %263, !dbg !49
  %559 = load <4 x i32>, ptr addrspace(3) %558, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %560 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %278, !dbg !49
  %561 = load <4 x i32>, ptr addrspace(3) %560, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %562 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %293, !dbg !49
  %563 = load <4 x i32>, ptr addrspace(3) %562, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %564 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %308, !dbg !49
  %565 = load <4 x i32>, ptr addrspace(3) %564, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %566 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 %323, !dbg !50
  %567 = getelementptr inbounds nuw i8, ptr addrspace(3) %566, i32 %320, !dbg !50
  %568 = load <4 x i32>, ptr addrspace(3) %567, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %569 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 %338, !dbg !50
  %570 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 %335, !dbg !50
  %571 = load <4 x i32>, ptr addrspace(3) %570, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %572 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 %353, !dbg !50
  %573 = getelementptr inbounds nuw i8, ptr addrspace(3) %572, i32 %350, !dbg !50
  %574 = load <4 x i32>, ptr addrspace(3) %573, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %575 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 %368, !dbg !50
  %576 = getelementptr inbounds nuw i8, ptr addrspace(3) %575, i32 %365, !dbg !50
  %577 = load <4 x i32>, ptr addrspace(3) %576, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %578 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %176, !dbg !44
  %579 = load i8, ptr addrspace(3) %578, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %580 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %177, !dbg !44
  %581 = load i8, ptr addrspace(3) %580, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %582 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %178, !dbg !44
  %583 = load i8, ptr addrspace(3) %582, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %584 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %179, !dbg !44
  %585 = load i8, ptr addrspace(3) %584, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %586 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %180, !dbg !44
  %587 = load i8, ptr addrspace(3) %586, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %588 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %181, !dbg !44
  %589 = load i8, ptr addrspace(3) %588, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %590 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %182, !dbg !44
  %591 = load i8, ptr addrspace(3) %590, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %592 = getelementptr inbounds nuw i8, ptr addrspace(3) %393, i32 %183, !dbg !44
  %593 = load i8, ptr addrspace(3) %592, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %594 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 %184, !dbg !62
  %595 = load i8, ptr addrspace(3) %594, align 1, !dbg !62, !alias.scope !60, !noalias !45
  %596 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 %185, !dbg !62
  %597 = load i8, ptr addrspace(3) %596, align 1, !dbg !62, !alias.scope !60, !noalias !45
  %598 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 %186, !dbg !62
  %599 = load i8, ptr addrspace(3) %598, align 1, !dbg !62, !alias.scope !60, !noalias !45
  %600 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 %187, !dbg !62
  %601 = load i8, ptr addrspace(3) %600, align 1, !dbg !62, !alias.scope !60, !noalias !45
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !63
  %602 = zext i8 %579 to i32, !dbg !64
  %603 = zext i8 %581 to i32, !dbg !64
  %604 = zext i8 %583 to i32, !dbg !64
  %605 = zext i8 %585 to i32, !dbg !64
  %606 = zext i8 %587 to i32, !dbg !64
  %607 = zext i8 %589 to i32, !dbg !64
  %608 = zext i8 %591 to i32, !dbg !64
  %609 = zext i8 %593 to i32, !dbg !64
  %610 = zext i8 %595 to i32, !dbg !64
  %611 = zext i8 %597 to i32, !dbg !64
  %612 = zext i8 %599 to i32, !dbg !64
  %613 = zext i8 %601 to i32, !dbg !64
  %614 = insertelement <4 x float> poison, float %399, i64 0, !dbg !64
  %615 = insertelement <4 x float> %614, float %400, i64 1, !dbg !64
  %616 = insertelement <4 x float> %615, float %401, i64 2, !dbg !64
  %617 = insertelement <4 x float> %616, float %402, i64 3, !dbg !64
  %618 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %551, <4 x float> %617, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %602), !dbg !64
  %619 = insertelement <4 x float> poison, float %403, i64 0, !dbg !64
  %620 = insertelement <4 x float> %619, float %404, i64 1, !dbg !64
  %621 = insertelement <4 x float> %620, float %405, i64 2, !dbg !64
  %622 = insertelement <4 x float> %621, float %406, i64 3, !dbg !64
  %623 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %551, <4 x float> %622, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %602), !dbg !64
  %624 = insertelement <4 x float> poison, float %407, i64 0, !dbg !64
  %625 = insertelement <4 x float> %624, float %408, i64 1, !dbg !64
  %626 = insertelement <4 x float> %625, float %409, i64 2, !dbg !64
  %627 = insertelement <4 x float> %626, float %410, i64 3, !dbg !64
  %628 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %551, <4 x float> %627, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %602), !dbg !64
  %629 = insertelement <4 x float> poison, float %411, i64 0, !dbg !64
  %630 = insertelement <4 x float> %629, float %412, i64 1, !dbg !64
  %631 = insertelement <4 x float> %630, float %413, i64 2, !dbg !64
  %632 = insertelement <4 x float> %631, float %414, i64 3, !dbg !64
  %633 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %551, <4 x float> %632, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %602), !dbg !64
  %634 = insertelement <4 x float> poison, float %415, i64 0, !dbg !64
  %635 = insertelement <4 x float> %634, float %416, i64 1, !dbg !64
  %636 = insertelement <4 x float> %635, float %417, i64 2, !dbg !64
  %637 = insertelement <4 x float> %636, float %418, i64 3, !dbg !64
  %638 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %553, <4 x float> %637, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %603), !dbg !64
  %639 = insertelement <4 x float> poison, float %419, i64 0, !dbg !64
  %640 = insertelement <4 x float> %639, float %420, i64 1, !dbg !64
  %641 = insertelement <4 x float> %640, float %421, i64 2, !dbg !64
  %642 = insertelement <4 x float> %641, float %422, i64 3, !dbg !64
  %643 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %553, <4 x float> %642, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %603), !dbg !64
  %644 = insertelement <4 x float> poison, float %423, i64 0, !dbg !64
  %645 = insertelement <4 x float> %644, float %424, i64 1, !dbg !64
  %646 = insertelement <4 x float> %645, float %425, i64 2, !dbg !64
  %647 = insertelement <4 x float> %646, float %426, i64 3, !dbg !64
  %648 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %553, <4 x float> %647, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %603), !dbg !64
  %649 = insertelement <4 x float> poison, float %427, i64 0, !dbg !64
  %650 = insertelement <4 x float> %649, float %428, i64 1, !dbg !64
  %651 = insertelement <4 x float> %650, float %429, i64 2, !dbg !64
  %652 = insertelement <4 x float> %651, float %430, i64 3, !dbg !64
  %653 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %553, <4 x float> %652, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %603), !dbg !64
  %654 = insertelement <4 x float> poison, float %431, i64 0, !dbg !64
  %655 = insertelement <4 x float> %654, float %432, i64 1, !dbg !64
  %656 = insertelement <4 x float> %655, float %433, i64 2, !dbg !64
  %657 = insertelement <4 x float> %656, float %434, i64 3, !dbg !64
  %658 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %555, <4 x float> %657, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %604), !dbg !64
  %659 = insertelement <4 x float> poison, float %435, i64 0, !dbg !64
  %660 = insertelement <4 x float> %659, float %436, i64 1, !dbg !64
  %661 = insertelement <4 x float> %660, float %437, i64 2, !dbg !64
  %662 = insertelement <4 x float> %661, float %438, i64 3, !dbg !64
  %663 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %555, <4 x float> %662, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %604), !dbg !64
  %664 = insertelement <4 x float> poison, float %439, i64 0, !dbg !64
  %665 = insertelement <4 x float> %664, float %440, i64 1, !dbg !64
  %666 = insertelement <4 x float> %665, float %441, i64 2, !dbg !64
  %667 = insertelement <4 x float> %666, float %442, i64 3, !dbg !64
  %668 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %555, <4 x float> %667, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %604), !dbg !64
  %669 = insertelement <4 x float> poison, float %443, i64 0, !dbg !64
  %670 = insertelement <4 x float> %669, float %444, i64 1, !dbg !64
  %671 = insertelement <4 x float> %670, float %445, i64 2, !dbg !64
  %672 = insertelement <4 x float> %671, float %446, i64 3, !dbg !64
  %673 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %555, <4 x float> %672, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %604), !dbg !64
  %674 = insertelement <4 x float> poison, float %447, i64 0, !dbg !64
  %675 = insertelement <4 x float> %674, float %448, i64 1, !dbg !64
  %676 = insertelement <4 x float> %675, float %449, i64 2, !dbg !64
  %677 = insertelement <4 x float> %676, float %450, i64 3, !dbg !64
  %678 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %557, <4 x float> %677, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %605), !dbg !64
  %679 = insertelement <4 x float> poison, float %451, i64 0, !dbg !64
  %680 = insertelement <4 x float> %679, float %452, i64 1, !dbg !64
  %681 = insertelement <4 x float> %680, float %453, i64 2, !dbg !64
  %682 = insertelement <4 x float> %681, float %454, i64 3, !dbg !64
  %683 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %557, <4 x float> %682, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %605), !dbg !64
  %684 = insertelement <4 x float> poison, float %455, i64 0, !dbg !64
  %685 = insertelement <4 x float> %684, float %456, i64 1, !dbg !64
  %686 = insertelement <4 x float> %685, float %457, i64 2, !dbg !64
  %687 = insertelement <4 x float> %686, float %458, i64 3, !dbg !64
  %688 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %557, <4 x float> %687, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %605), !dbg !64
  %689 = insertelement <4 x float> poison, float %459, i64 0, !dbg !64
  %690 = insertelement <4 x float> %689, float %460, i64 1, !dbg !64
  %691 = insertelement <4 x float> %690, float %461, i64 2, !dbg !64
  %692 = insertelement <4 x float> %691, float %462, i64 3, !dbg !64
  %693 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %557, <4 x float> %692, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %605), !dbg !64
  %694 = insertelement <4 x float> poison, float %463, i64 0, !dbg !64
  %695 = insertelement <4 x float> %694, float %464, i64 1, !dbg !64
  %696 = insertelement <4 x float> %695, float %465, i64 2, !dbg !64
  %697 = insertelement <4 x float> %696, float %466, i64 3, !dbg !64
  %698 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %559, <4 x float> %697, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %606), !dbg !64
  %699 = insertelement <4 x float> poison, float %467, i64 0, !dbg !64
  %700 = insertelement <4 x float> %699, float %468, i64 1, !dbg !64
  %701 = insertelement <4 x float> %700, float %469, i64 2, !dbg !64
  %702 = insertelement <4 x float> %701, float %470, i64 3, !dbg !64
  %703 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %559, <4 x float> %702, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %606), !dbg !64
  %704 = insertelement <4 x float> poison, float %471, i64 0, !dbg !64
  %705 = insertelement <4 x float> %704, float %472, i64 1, !dbg !64
  %706 = insertelement <4 x float> %705, float %473, i64 2, !dbg !64
  %707 = insertelement <4 x float> %706, float %474, i64 3, !dbg !64
  %708 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %559, <4 x float> %707, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %606), !dbg !64
  %709 = insertelement <4 x float> poison, float %475, i64 0, !dbg !64
  %710 = insertelement <4 x float> %709, float %476, i64 1, !dbg !64
  %711 = insertelement <4 x float> %710, float %477, i64 2, !dbg !64
  %712 = insertelement <4 x float> %711, float %478, i64 3, !dbg !64
  %713 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %559, <4 x float> %712, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %606), !dbg !64
  %714 = insertelement <4 x float> poison, float %479, i64 0, !dbg !64
  %715 = insertelement <4 x float> %714, float %480, i64 1, !dbg !64
  %716 = insertelement <4 x float> %715, float %481, i64 2, !dbg !64
  %717 = insertelement <4 x float> %716, float %482, i64 3, !dbg !64
  %718 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %561, <4 x float> %717, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %607), !dbg !64
  %719 = insertelement <4 x float> poison, float %483, i64 0, !dbg !64
  %720 = insertelement <4 x float> %719, float %484, i64 1, !dbg !64
  %721 = insertelement <4 x float> %720, float %485, i64 2, !dbg !64
  %722 = insertelement <4 x float> %721, float %486, i64 3, !dbg !64
  %723 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %561, <4 x float> %722, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %607), !dbg !64
  %724 = insertelement <4 x float> poison, float %487, i64 0, !dbg !64
  %725 = insertelement <4 x float> %724, float %488, i64 1, !dbg !64
  %726 = insertelement <4 x float> %725, float %489, i64 2, !dbg !64
  %727 = insertelement <4 x float> %726, float %490, i64 3, !dbg !64
  %728 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %561, <4 x float> %727, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %607), !dbg !64
  %729 = insertelement <4 x float> poison, float %491, i64 0, !dbg !64
  %730 = insertelement <4 x float> %729, float %492, i64 1, !dbg !64
  %731 = insertelement <4 x float> %730, float %493, i64 2, !dbg !64
  %732 = insertelement <4 x float> %731, float %494, i64 3, !dbg !64
  %733 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %561, <4 x float> %732, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %607), !dbg !64
  %734 = insertelement <4 x float> poison, float %495, i64 0, !dbg !64
  %735 = insertelement <4 x float> %734, float %496, i64 1, !dbg !64
  %736 = insertelement <4 x float> %735, float %497, i64 2, !dbg !64
  %737 = insertelement <4 x float> %736, float %498, i64 3, !dbg !64
  %738 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %563, <4 x float> %737, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %608), !dbg !64
  %739 = insertelement <4 x float> poison, float %499, i64 0, !dbg !64
  %740 = insertelement <4 x float> %739, float %500, i64 1, !dbg !64
  %741 = insertelement <4 x float> %740, float %501, i64 2, !dbg !64
  %742 = insertelement <4 x float> %741, float %502, i64 3, !dbg !64
  %743 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %563, <4 x float> %742, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %608), !dbg !64
  %744 = insertelement <4 x float> poison, float %503, i64 0, !dbg !64
  %745 = insertelement <4 x float> %744, float %504, i64 1, !dbg !64
  %746 = insertelement <4 x float> %745, float %505, i64 2, !dbg !64
  %747 = insertelement <4 x float> %746, float %506, i64 3, !dbg !64
  %748 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %563, <4 x float> %747, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %608), !dbg !64
  %749 = insertelement <4 x float> poison, float %507, i64 0, !dbg !64
  %750 = insertelement <4 x float> %749, float %508, i64 1, !dbg !64
  %751 = insertelement <4 x float> %750, float %509, i64 2, !dbg !64
  %752 = insertelement <4 x float> %751, float %510, i64 3, !dbg !64
  %753 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %563, <4 x float> %752, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %608), !dbg !64
  %754 = insertelement <4 x float> poison, float %511, i64 0, !dbg !64
  %755 = insertelement <4 x float> %754, float %512, i64 1, !dbg !64
  %756 = insertelement <4 x float> %755, float %513, i64 2, !dbg !64
  %757 = insertelement <4 x float> %756, float %514, i64 3, !dbg !64
  %758 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %568, <4 x i32> %565, <4 x float> %757, i32 4, i32 4, i32 0, i32 %610, i32 0, i32 %609), !dbg !64
  %759 = insertelement <4 x float> poison, float %515, i64 0, !dbg !64
  %760 = insertelement <4 x float> %759, float %516, i64 1, !dbg !64
  %761 = insertelement <4 x float> %760, float %517, i64 2, !dbg !64
  %762 = insertelement <4 x float> %761, float %518, i64 3, !dbg !64
  %763 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %571, <4 x i32> %565, <4 x float> %762, i32 4, i32 4, i32 0, i32 %611, i32 0, i32 %609), !dbg !64
  %764 = insertelement <4 x float> poison, float %519, i64 0, !dbg !64
  %765 = insertelement <4 x float> %764, float %520, i64 1, !dbg !64
  %766 = insertelement <4 x float> %765, float %521, i64 2, !dbg !64
  %767 = insertelement <4 x float> %766, float %522, i64 3, !dbg !64
  %768 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %574, <4 x i32> %565, <4 x float> %767, i32 4, i32 4, i32 0, i32 %612, i32 0, i32 %609), !dbg !64
  %769 = insertelement <4 x float> poison, float %523, i64 0, !dbg !64
  %770 = insertelement <4 x float> %769, float %524, i64 1, !dbg !64
  %771 = insertelement <4 x float> %770, float %525, i64 2, !dbg !64
  %772 = insertelement <4 x float> %771, float %526, i64 3, !dbg !64
  %773 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %577, <4 x i32> %565, <4 x float> %772, i32 4, i32 4, i32 0, i32 %613, i32 0, i32 %609), !dbg !64
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !65
  %774 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %535, !dbg !50
  %775 = getelementptr inbounds nuw i8, ptr addrspace(3) %774, i32 %109, !dbg !50
  %776 = getelementptr inbounds nuw i8, ptr addrspace(3) %775, i32 %110, !dbg !50
  %777 = getelementptr inbounds nuw i8, ptr addrspace(3) %775, i32 %111, !dbg !50
  %778 = getelementptr inbounds nuw i8, ptr addrspace(3) %775, i32 %112, !dbg !50
  %779 = getelementptr inbounds nuw i8, ptr addrspace(3) %775, i32 %113, !dbg !50
  %780 = getelementptr inbounds nuw i8, ptr addrspace(3) %774, i32 %114, !dbg !50
  %781 = getelementptr inbounds nuw i8, ptr addrspace(3) %774, i32 %116, !dbg !50
  %782 = getelementptr inbounds nuw i8, ptr addrspace(3) %774, i32 %118, !dbg !50
  %783 = getelementptr inbounds nuw i8, ptr addrspace(3) %774, i32 %120, !dbg !50
  %784 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %529, i16 %147, i32 2147483646, i32 159744), !dbg !50
  %785 = ptrtoint ptr addrspace(3) %780 to i32, !dbg !50
  %786 = ptrtoint ptr addrspace(3) %776 to i32, !dbg !50
  %787 = sub i32 %786, %785, !dbg !50
  %788 = sdiv i32 %787, 16, !dbg !50
  %789 = add nsw i32 %788, %31, !dbg !50
  %790 = shl nsw i32 %789, 2, !dbg !50
  %791 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %790, i32 %82), !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %784, ptr addrspace(3) %780, i32 16, i32 %791, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %792 = ptrtoint ptr addrspace(3) %781 to i32, !dbg !50
  %793 = ptrtoint ptr addrspace(3) %777 to i32, !dbg !50
  %794 = sub i32 %793, %792, !dbg !50
  %795 = sdiv i32 %794, 16, !dbg !50
  %796 = add nsw i32 %795, %31, !dbg !50
  %797 = shl nsw i32 %796, 2, !dbg !50
  %798 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %797, i32 %83), !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %784, ptr addrspace(3) nonnull %781, i32 16, i32 %798, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %799 = ptrtoint ptr addrspace(3) %782 to i32, !dbg !50
  %800 = ptrtoint ptr addrspace(3) %778 to i32, !dbg !50
  %801 = sub i32 %800, %799, !dbg !50
  %802 = sdiv i32 %801, 16, !dbg !50
  %803 = add nsw i32 %802, %31, !dbg !50
  %804 = shl nsw i32 %803, 2, !dbg !50
  %805 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %804, i32 %84), !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %784, ptr addrspace(3) nonnull %782, i32 16, i32 %805, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %806 = ptrtoint ptr addrspace(3) %783 to i32, !dbg !50
  %807 = ptrtoint ptr addrspace(3) %779 to i32, !dbg !50
  %808 = sub i32 %807, %806, !dbg !50
  %809 = sdiv i32 %808, 16, !dbg !50
  %810 = add nsw i32 %809, %31, !dbg !50
  %811 = shl nsw i32 %810, 2, !dbg !50
  %812 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %811, i32 %85), !dbg !50
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %784, ptr addrspace(3) nonnull %783, i32 16, i32 %812, i32 0, i32 0, i32 0), !dbg !50, !alias.scope !45
  %813 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), i32 %546, !dbg !48
  %814 = getelementptr inbounds nuw i8, ptr addrspace(3) %813, i32 %95, !dbg !48
  %815 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %531, i16 %105, i32 2147483646, i32 159744), !dbg !48
  tail call void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) %815, ptr addrspace(3) %814, i32 4, i32 %91, i32 0, i32 0, i32 0), !dbg !48, !alias.scope !45
  %816 = getelementptr i8, ptr addrspace(3) %391, i32 %369, !dbg !49
  %817 = load <4 x i32>, ptr addrspace(3) %816, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %818 = getelementptr i8, ptr addrspace(3) %391, i32 %370, !dbg !49
  %819 = load <4 x i32>, ptr addrspace(3) %818, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %820 = getelementptr i8, ptr addrspace(3) %391, i32 %371, !dbg !49
  %821 = load <4 x i32>, ptr addrspace(3) %820, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %822 = getelementptr i8, ptr addrspace(3) %391, i32 %372, !dbg !49
  %823 = load <4 x i32>, ptr addrspace(3) %822, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %824 = getelementptr i8, ptr addrspace(3) %391, i32 %373, !dbg !49
  %825 = load <4 x i32>, ptr addrspace(3) %824, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %826 = getelementptr i8, ptr addrspace(3) %391, i32 %374, !dbg !49
  %827 = load <4 x i32>, ptr addrspace(3) %826, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %828 = getelementptr i8, ptr addrspace(3) %391, i32 %375, !dbg !49
  %829 = load <4 x i32>, ptr addrspace(3) %828, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %830 = getelementptr i8, ptr addrspace(3) %391, i32 %376, !dbg !49
  %831 = load <4 x i32>, ptr addrspace(3) %830, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %832 = getelementptr i8, ptr addrspace(3) %390, i32 %379, !dbg !50
  %833 = load <4 x i32>, ptr addrspace(3) %832, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %834 = getelementptr i8, ptr addrspace(3) %390, i32 %382, !dbg !50
  %835 = load <4 x i32>, ptr addrspace(3) %834, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %836 = getelementptr i8, ptr addrspace(3) %390, i32 %385, !dbg !50
  %837 = load <4 x i32>, ptr addrspace(3) %836, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %838 = getelementptr i8, ptr addrspace(3) %390, i32 %388, !dbg !50
  %839 = load <4 x i32>, ptr addrspace(3) %838, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %840 = getelementptr i8, ptr addrspace(3) %393, i32 1024, !dbg !66
  %841 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %176, !dbg !44
  %842 = load i8, ptr addrspace(3) %841, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %843 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %177, !dbg !44
  %844 = load i8, ptr addrspace(3) %843, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %845 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %178, !dbg !44
  %846 = load i8, ptr addrspace(3) %845, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %847 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %179, !dbg !44
  %848 = load i8, ptr addrspace(3) %847, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %849 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %180, !dbg !44
  %850 = load i8, ptr addrspace(3) %849, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %851 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %181, !dbg !44
  %852 = load i8, ptr addrspace(3) %851, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %853 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %182, !dbg !44
  %854 = load i8, ptr addrspace(3) %853, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %855 = getelementptr inbounds nuw i8, ptr addrspace(3) %840, i32 %183, !dbg !44
  %856 = load i8, ptr addrspace(3) %855, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %857 = getelementptr i8, ptr addrspace(3) %392, i32 1024, !dbg !67
  %858 = getelementptr inbounds nuw i8, ptr addrspace(3) %857, i32 %184, !dbg !48
  %859 = load i8, ptr addrspace(3) %858, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %860 = getelementptr inbounds nuw i8, ptr addrspace(3) %857, i32 %185, !dbg !48
  %861 = load i8, ptr addrspace(3) %860, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %862 = getelementptr inbounds nuw i8, ptr addrspace(3) %857, i32 %186, !dbg !48
  %863 = load i8, ptr addrspace(3) %862, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %864 = getelementptr inbounds nuw i8, ptr addrspace(3) %857, i32 %187, !dbg !48
  %865 = load i8, ptr addrspace(3) %864, align 1, !dbg !48, !alias.scope !60, !noalias !45
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !68
  %866 = zext i8 %842 to i32, !dbg !64
  %867 = zext i8 %844 to i32, !dbg !64
  %868 = zext i8 %846 to i32, !dbg !64
  %869 = zext i8 %848 to i32, !dbg !64
  %870 = zext i8 %850 to i32, !dbg !64
  %871 = zext i8 %852 to i32, !dbg !64
  %872 = zext i8 %854 to i32, !dbg !64
  %873 = zext i8 %856 to i32, !dbg !64
  %874 = zext i8 %859 to i32, !dbg !64
  %875 = zext i8 %861 to i32, !dbg !64
  %876 = zext i8 %863 to i32, !dbg !64
  %877 = zext i8 %865 to i32, !dbg !64
  %878 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %817, <4 x float> %618, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %866), !dbg !64
  %879 = extractelement <4 x float> %878, i64 0, !dbg !64
  %880 = extractelement <4 x float> %878, i64 1, !dbg !64
  %881 = extractelement <4 x float> %878, i64 2, !dbg !64
  %882 = extractelement <4 x float> %878, i64 3, !dbg !64
  %883 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %817, <4 x float> %623, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %866), !dbg !64
  %884 = extractelement <4 x float> %883, i64 0, !dbg !64
  %885 = extractelement <4 x float> %883, i64 1, !dbg !64
  %886 = extractelement <4 x float> %883, i64 2, !dbg !64
  %887 = extractelement <4 x float> %883, i64 3, !dbg !64
  %888 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %817, <4 x float> %628, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %866), !dbg !64
  %889 = extractelement <4 x float> %888, i64 0, !dbg !64
  %890 = extractelement <4 x float> %888, i64 1, !dbg !64
  %891 = extractelement <4 x float> %888, i64 2, !dbg !64
  %892 = extractelement <4 x float> %888, i64 3, !dbg !64
  %893 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %817, <4 x float> %633, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %866), !dbg !64
  %894 = extractelement <4 x float> %893, i64 0, !dbg !64
  %895 = extractelement <4 x float> %893, i64 1, !dbg !64
  %896 = extractelement <4 x float> %893, i64 2, !dbg !64
  %897 = extractelement <4 x float> %893, i64 3, !dbg !64
  %898 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %819, <4 x float> %638, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %867), !dbg !64
  %899 = extractelement <4 x float> %898, i64 0, !dbg !64
  %900 = extractelement <4 x float> %898, i64 1, !dbg !64
  %901 = extractelement <4 x float> %898, i64 2, !dbg !64
  %902 = extractelement <4 x float> %898, i64 3, !dbg !64
  %903 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %819, <4 x float> %643, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %867), !dbg !64
  %904 = extractelement <4 x float> %903, i64 0, !dbg !64
  %905 = extractelement <4 x float> %903, i64 1, !dbg !64
  %906 = extractelement <4 x float> %903, i64 2, !dbg !64
  %907 = extractelement <4 x float> %903, i64 3, !dbg !64
  %908 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %819, <4 x float> %648, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %867), !dbg !64
  %909 = extractelement <4 x float> %908, i64 0, !dbg !64
  %910 = extractelement <4 x float> %908, i64 1, !dbg !64
  %911 = extractelement <4 x float> %908, i64 2, !dbg !64
  %912 = extractelement <4 x float> %908, i64 3, !dbg !64
  %913 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %819, <4 x float> %653, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %867), !dbg !64
  %914 = extractelement <4 x float> %913, i64 0, !dbg !64
  %915 = extractelement <4 x float> %913, i64 1, !dbg !64
  %916 = extractelement <4 x float> %913, i64 2, !dbg !64
  %917 = extractelement <4 x float> %913, i64 3, !dbg !64
  %918 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %821, <4 x float> %658, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %868), !dbg !64
  %919 = extractelement <4 x float> %918, i64 0, !dbg !64
  %920 = extractelement <4 x float> %918, i64 1, !dbg !64
  %921 = extractelement <4 x float> %918, i64 2, !dbg !64
  %922 = extractelement <4 x float> %918, i64 3, !dbg !64
  %923 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %821, <4 x float> %663, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %868), !dbg !64
  %924 = extractelement <4 x float> %923, i64 0, !dbg !64
  %925 = extractelement <4 x float> %923, i64 1, !dbg !64
  %926 = extractelement <4 x float> %923, i64 2, !dbg !64
  %927 = extractelement <4 x float> %923, i64 3, !dbg !64
  %928 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %821, <4 x float> %668, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %868), !dbg !64
  %929 = extractelement <4 x float> %928, i64 0, !dbg !64
  %930 = extractelement <4 x float> %928, i64 1, !dbg !64
  %931 = extractelement <4 x float> %928, i64 2, !dbg !64
  %932 = extractelement <4 x float> %928, i64 3, !dbg !64
  %933 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %821, <4 x float> %673, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %868), !dbg !64
  %934 = extractelement <4 x float> %933, i64 0, !dbg !64
  %935 = extractelement <4 x float> %933, i64 1, !dbg !64
  %936 = extractelement <4 x float> %933, i64 2, !dbg !64
  %937 = extractelement <4 x float> %933, i64 3, !dbg !64
  %938 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %823, <4 x float> %678, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %869), !dbg !64
  %939 = extractelement <4 x float> %938, i64 0, !dbg !64
  %940 = extractelement <4 x float> %938, i64 1, !dbg !64
  %941 = extractelement <4 x float> %938, i64 2, !dbg !64
  %942 = extractelement <4 x float> %938, i64 3, !dbg !64
  %943 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %823, <4 x float> %683, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %869), !dbg !64
  %944 = extractelement <4 x float> %943, i64 0, !dbg !64
  %945 = extractelement <4 x float> %943, i64 1, !dbg !64
  %946 = extractelement <4 x float> %943, i64 2, !dbg !64
  %947 = extractelement <4 x float> %943, i64 3, !dbg !64
  %948 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %823, <4 x float> %688, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %869), !dbg !64
  %949 = extractelement <4 x float> %948, i64 0, !dbg !64
  %950 = extractelement <4 x float> %948, i64 1, !dbg !64
  %951 = extractelement <4 x float> %948, i64 2, !dbg !64
  %952 = extractelement <4 x float> %948, i64 3, !dbg !64
  %953 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %823, <4 x float> %693, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %869), !dbg !64
  %954 = extractelement <4 x float> %953, i64 0, !dbg !64
  %955 = extractelement <4 x float> %953, i64 1, !dbg !64
  %956 = extractelement <4 x float> %953, i64 2, !dbg !64
  %957 = extractelement <4 x float> %953, i64 3, !dbg !64
  %958 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %825, <4 x float> %698, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %870), !dbg !64
  %959 = extractelement <4 x float> %958, i64 0, !dbg !64
  %960 = extractelement <4 x float> %958, i64 1, !dbg !64
  %961 = extractelement <4 x float> %958, i64 2, !dbg !64
  %962 = extractelement <4 x float> %958, i64 3, !dbg !64
  %963 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %825, <4 x float> %703, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %870), !dbg !64
  %964 = extractelement <4 x float> %963, i64 0, !dbg !64
  %965 = extractelement <4 x float> %963, i64 1, !dbg !64
  %966 = extractelement <4 x float> %963, i64 2, !dbg !64
  %967 = extractelement <4 x float> %963, i64 3, !dbg !64
  %968 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %825, <4 x float> %708, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %870), !dbg !64
  %969 = extractelement <4 x float> %968, i64 0, !dbg !64
  %970 = extractelement <4 x float> %968, i64 1, !dbg !64
  %971 = extractelement <4 x float> %968, i64 2, !dbg !64
  %972 = extractelement <4 x float> %968, i64 3, !dbg !64
  %973 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %825, <4 x float> %713, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %870), !dbg !64
  %974 = extractelement <4 x float> %973, i64 0, !dbg !64
  %975 = extractelement <4 x float> %973, i64 1, !dbg !64
  %976 = extractelement <4 x float> %973, i64 2, !dbg !64
  %977 = extractelement <4 x float> %973, i64 3, !dbg !64
  %978 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %827, <4 x float> %718, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %871), !dbg !64
  %979 = extractelement <4 x float> %978, i64 0, !dbg !64
  %980 = extractelement <4 x float> %978, i64 1, !dbg !64
  %981 = extractelement <4 x float> %978, i64 2, !dbg !64
  %982 = extractelement <4 x float> %978, i64 3, !dbg !64
  %983 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %827, <4 x float> %723, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %871), !dbg !64
  %984 = extractelement <4 x float> %983, i64 0, !dbg !64
  %985 = extractelement <4 x float> %983, i64 1, !dbg !64
  %986 = extractelement <4 x float> %983, i64 2, !dbg !64
  %987 = extractelement <4 x float> %983, i64 3, !dbg !64
  %988 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %827, <4 x float> %728, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %871), !dbg !64
  %989 = extractelement <4 x float> %988, i64 0, !dbg !64
  %990 = extractelement <4 x float> %988, i64 1, !dbg !64
  %991 = extractelement <4 x float> %988, i64 2, !dbg !64
  %992 = extractelement <4 x float> %988, i64 3, !dbg !64
  %993 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %827, <4 x float> %733, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %871), !dbg !64
  %994 = extractelement <4 x float> %993, i64 0, !dbg !64
  %995 = extractelement <4 x float> %993, i64 1, !dbg !64
  %996 = extractelement <4 x float> %993, i64 2, !dbg !64
  %997 = extractelement <4 x float> %993, i64 3, !dbg !64
  %998 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %829, <4 x float> %738, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %872), !dbg !64
  %999 = extractelement <4 x float> %998, i64 0, !dbg !64
  %1000 = extractelement <4 x float> %998, i64 1, !dbg !64
  %1001 = extractelement <4 x float> %998, i64 2, !dbg !64
  %1002 = extractelement <4 x float> %998, i64 3, !dbg !64
  %1003 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %829, <4 x float> %743, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %872), !dbg !64
  %1004 = extractelement <4 x float> %1003, i64 0, !dbg !64
  %1005 = extractelement <4 x float> %1003, i64 1, !dbg !64
  %1006 = extractelement <4 x float> %1003, i64 2, !dbg !64
  %1007 = extractelement <4 x float> %1003, i64 3, !dbg !64
  %1008 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %829, <4 x float> %748, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %872), !dbg !64
  %1009 = extractelement <4 x float> %1008, i64 0, !dbg !64
  %1010 = extractelement <4 x float> %1008, i64 1, !dbg !64
  %1011 = extractelement <4 x float> %1008, i64 2, !dbg !64
  %1012 = extractelement <4 x float> %1008, i64 3, !dbg !64
  %1013 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %829, <4 x float> %753, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %872), !dbg !64
  %1014 = extractelement <4 x float> %1013, i64 0, !dbg !64
  %1015 = extractelement <4 x float> %1013, i64 1, !dbg !64
  %1016 = extractelement <4 x float> %1013, i64 2, !dbg !64
  %1017 = extractelement <4 x float> %1013, i64 3, !dbg !64
  %1018 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %833, <4 x i32> %831, <4 x float> %758, i32 4, i32 4, i32 0, i32 %874, i32 0, i32 %873), !dbg !64
  %1019 = extractelement <4 x float> %1018, i64 0, !dbg !64
  %1020 = extractelement <4 x float> %1018, i64 1, !dbg !64
  %1021 = extractelement <4 x float> %1018, i64 2, !dbg !64
  %1022 = extractelement <4 x float> %1018, i64 3, !dbg !64
  %1023 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %835, <4 x i32> %831, <4 x float> %763, i32 4, i32 4, i32 0, i32 %875, i32 0, i32 %873), !dbg !64
  %1024 = extractelement <4 x float> %1023, i64 0, !dbg !64
  %1025 = extractelement <4 x float> %1023, i64 1, !dbg !64
  %1026 = extractelement <4 x float> %1023, i64 2, !dbg !64
  %1027 = extractelement <4 x float> %1023, i64 3, !dbg !64
  %1028 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %837, <4 x i32> %831, <4 x float> %768, i32 4, i32 4, i32 0, i32 %876, i32 0, i32 %873), !dbg !64
  %1029 = extractelement <4 x float> %1028, i64 0, !dbg !64
  %1030 = extractelement <4 x float> %1028, i64 1, !dbg !64
  %1031 = extractelement <4 x float> %1028, i64 2, !dbg !64
  %1032 = extractelement <4 x float> %1028, i64 3, !dbg !64
  %1033 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %839, <4 x i32> %831, <4 x float> %773, i32 4, i32 4, i32 0, i32 %877, i32 0, i32 %873), !dbg !64
  %1034 = extractelement <4 x float> %1033, i64 0, !dbg !64
  %1035 = extractelement <4 x float> %1033, i64 1, !dbg !64
  %1036 = extractelement <4 x float> %1033, i64 2, !dbg !64
  %1037 = extractelement <4 x float> %1033, i64 3, !dbg !64
  %1038 = add nuw nsw i32 %527, 1, !dbg !43
  %exitcond.not = icmp eq i32 %527, %188, !dbg !43
  br i1 %exitcond.not, label %._crit_edge, label %389, !dbg !43

._crit_edge:                                      ; preds = %389, %14
  %1039 = phi float [ 0.000000e+00, %14 ], [ %879, %389 ], !dbg !69
  %1040 = phi float [ 0.000000e+00, %14 ], [ %880, %389 ], !dbg !69
  %1041 = phi float [ 0.000000e+00, %14 ], [ %881, %389 ], !dbg !69
  %1042 = phi float [ 0.000000e+00, %14 ], [ %882, %389 ], !dbg !69
  %1043 = phi float [ 0.000000e+00, %14 ], [ %884, %389 ], !dbg !69
  %1044 = phi float [ 0.000000e+00, %14 ], [ %885, %389 ], !dbg !69
  %1045 = phi float [ 0.000000e+00, %14 ], [ %886, %389 ], !dbg !69
  %1046 = phi float [ 0.000000e+00, %14 ], [ %887, %389 ], !dbg !69
  %1047 = phi float [ 0.000000e+00, %14 ], [ %889, %389 ], !dbg !69
  %1048 = phi float [ 0.000000e+00, %14 ], [ %890, %389 ], !dbg !69
  %1049 = phi float [ 0.000000e+00, %14 ], [ %891, %389 ], !dbg !69
  %1050 = phi float [ 0.000000e+00, %14 ], [ %892, %389 ], !dbg !69
  %1051 = phi float [ 0.000000e+00, %14 ], [ %894, %389 ], !dbg !69
  %1052 = phi float [ 0.000000e+00, %14 ], [ %895, %389 ], !dbg !69
  %1053 = phi float [ 0.000000e+00, %14 ], [ %896, %389 ], !dbg !69
  %1054 = phi float [ 0.000000e+00, %14 ], [ %897, %389 ], !dbg !69
  %1055 = phi float [ 0.000000e+00, %14 ], [ %899, %389 ], !dbg !69
  %1056 = phi float [ 0.000000e+00, %14 ], [ %900, %389 ], !dbg !69
  %1057 = phi float [ 0.000000e+00, %14 ], [ %901, %389 ], !dbg !69
  %1058 = phi float [ 0.000000e+00, %14 ], [ %902, %389 ], !dbg !69
  %1059 = phi float [ 0.000000e+00, %14 ], [ %904, %389 ], !dbg !69
  %1060 = phi float [ 0.000000e+00, %14 ], [ %905, %389 ], !dbg !69
  %1061 = phi float [ 0.000000e+00, %14 ], [ %906, %389 ], !dbg !69
  %1062 = phi float [ 0.000000e+00, %14 ], [ %907, %389 ], !dbg !69
  %1063 = phi float [ 0.000000e+00, %14 ], [ %909, %389 ], !dbg !69
  %1064 = phi float [ 0.000000e+00, %14 ], [ %910, %389 ], !dbg !69
  %1065 = phi float [ 0.000000e+00, %14 ], [ %911, %389 ], !dbg !69
  %1066 = phi float [ 0.000000e+00, %14 ], [ %912, %389 ], !dbg !69
  %1067 = phi float [ 0.000000e+00, %14 ], [ %914, %389 ], !dbg !69
  %1068 = phi float [ 0.000000e+00, %14 ], [ %915, %389 ], !dbg !69
  %1069 = phi float [ 0.000000e+00, %14 ], [ %916, %389 ], !dbg !69
  %1070 = phi float [ 0.000000e+00, %14 ], [ %917, %389 ], !dbg !69
  %1071 = phi float [ 0.000000e+00, %14 ], [ %919, %389 ], !dbg !69
  %1072 = phi float [ 0.000000e+00, %14 ], [ %920, %389 ], !dbg !69
  %1073 = phi float [ 0.000000e+00, %14 ], [ %921, %389 ], !dbg !69
  %1074 = phi float [ 0.000000e+00, %14 ], [ %922, %389 ], !dbg !69
  %1075 = phi float [ 0.000000e+00, %14 ], [ %924, %389 ], !dbg !69
  %1076 = phi float [ 0.000000e+00, %14 ], [ %925, %389 ], !dbg !69
  %1077 = phi float [ 0.000000e+00, %14 ], [ %926, %389 ], !dbg !69
  %1078 = phi float [ 0.000000e+00, %14 ], [ %927, %389 ], !dbg !69
  %1079 = phi float [ 0.000000e+00, %14 ], [ %929, %389 ], !dbg !69
  %1080 = phi float [ 0.000000e+00, %14 ], [ %930, %389 ], !dbg !69
  %1081 = phi float [ 0.000000e+00, %14 ], [ %931, %389 ], !dbg !69
  %1082 = phi float [ 0.000000e+00, %14 ], [ %932, %389 ], !dbg !69
  %1083 = phi float [ 0.000000e+00, %14 ], [ %934, %389 ], !dbg !69
  %1084 = phi float [ 0.000000e+00, %14 ], [ %935, %389 ], !dbg !69
  %1085 = phi float [ 0.000000e+00, %14 ], [ %936, %389 ], !dbg !69
  %1086 = phi float [ 0.000000e+00, %14 ], [ %937, %389 ], !dbg !69
  %1087 = phi float [ 0.000000e+00, %14 ], [ %939, %389 ], !dbg !69
  %1088 = phi float [ 0.000000e+00, %14 ], [ %940, %389 ], !dbg !69
  %1089 = phi float [ 0.000000e+00, %14 ], [ %941, %389 ], !dbg !69
  %1090 = phi float [ 0.000000e+00, %14 ], [ %942, %389 ], !dbg !69
  %1091 = phi float [ 0.000000e+00, %14 ], [ %944, %389 ], !dbg !69
  %1092 = phi float [ 0.000000e+00, %14 ], [ %945, %389 ], !dbg !69
  %1093 = phi float [ 0.000000e+00, %14 ], [ %946, %389 ], !dbg !69
  %1094 = phi float [ 0.000000e+00, %14 ], [ %947, %389 ], !dbg !69
  %1095 = phi float [ 0.000000e+00, %14 ], [ %949, %389 ], !dbg !69
  %1096 = phi float [ 0.000000e+00, %14 ], [ %950, %389 ], !dbg !69
  %1097 = phi float [ 0.000000e+00, %14 ], [ %951, %389 ], !dbg !69
  %1098 = phi float [ 0.000000e+00, %14 ], [ %952, %389 ], !dbg !69
  %1099 = phi float [ 0.000000e+00, %14 ], [ %954, %389 ], !dbg !69
  %1100 = phi float [ 0.000000e+00, %14 ], [ %955, %389 ], !dbg !69
  %1101 = phi float [ 0.000000e+00, %14 ], [ %956, %389 ], !dbg !69
  %1102 = phi float [ 0.000000e+00, %14 ], [ %957, %389 ], !dbg !69
  %1103 = phi float [ 0.000000e+00, %14 ], [ %959, %389 ], !dbg !69
  %1104 = phi float [ 0.000000e+00, %14 ], [ %960, %389 ], !dbg !69
  %1105 = phi float [ 0.000000e+00, %14 ], [ %961, %389 ], !dbg !69
  %1106 = phi float [ 0.000000e+00, %14 ], [ %962, %389 ], !dbg !69
  %1107 = phi float [ 0.000000e+00, %14 ], [ %964, %389 ], !dbg !69
  %1108 = phi float [ 0.000000e+00, %14 ], [ %965, %389 ], !dbg !69
  %1109 = phi float [ 0.000000e+00, %14 ], [ %966, %389 ], !dbg !69
  %1110 = phi float [ 0.000000e+00, %14 ], [ %967, %389 ], !dbg !69
  %1111 = phi float [ 0.000000e+00, %14 ], [ %969, %389 ], !dbg !69
  %1112 = phi float [ 0.000000e+00, %14 ], [ %970, %389 ], !dbg !69
  %1113 = phi float [ 0.000000e+00, %14 ], [ %971, %389 ], !dbg !69
  %1114 = phi float [ 0.000000e+00, %14 ], [ %972, %389 ], !dbg !69
  %1115 = phi float [ 0.000000e+00, %14 ], [ %974, %389 ], !dbg !69
  %1116 = phi float [ 0.000000e+00, %14 ], [ %975, %389 ], !dbg !69
  %1117 = phi float [ 0.000000e+00, %14 ], [ %976, %389 ], !dbg !69
  %1118 = phi float [ 0.000000e+00, %14 ], [ %977, %389 ], !dbg !69
  %1119 = phi float [ 0.000000e+00, %14 ], [ %979, %389 ], !dbg !69
  %1120 = phi float [ 0.000000e+00, %14 ], [ %980, %389 ], !dbg !69
  %1121 = phi float [ 0.000000e+00, %14 ], [ %981, %389 ], !dbg !69
  %1122 = phi float [ 0.000000e+00, %14 ], [ %982, %389 ], !dbg !69
  %1123 = phi float [ 0.000000e+00, %14 ], [ %984, %389 ], !dbg !69
  %1124 = phi float [ 0.000000e+00, %14 ], [ %985, %389 ], !dbg !69
  %1125 = phi float [ 0.000000e+00, %14 ], [ %986, %389 ], !dbg !69
  %1126 = phi float [ 0.000000e+00, %14 ], [ %987, %389 ], !dbg !69
  %1127 = phi float [ 0.000000e+00, %14 ], [ %989, %389 ], !dbg !69
  %1128 = phi float [ 0.000000e+00, %14 ], [ %990, %389 ], !dbg !69
  %1129 = phi float [ 0.000000e+00, %14 ], [ %991, %389 ], !dbg !69
  %1130 = phi float [ 0.000000e+00, %14 ], [ %992, %389 ], !dbg !69
  %1131 = phi float [ 0.000000e+00, %14 ], [ %994, %389 ], !dbg !69
  %1132 = phi float [ 0.000000e+00, %14 ], [ %995, %389 ], !dbg !69
  %1133 = phi float [ 0.000000e+00, %14 ], [ %996, %389 ], !dbg !69
  %1134 = phi float [ 0.000000e+00, %14 ], [ %997, %389 ], !dbg !69
  %1135 = phi float [ 0.000000e+00, %14 ], [ %999, %389 ], !dbg !69
  %1136 = phi float [ 0.000000e+00, %14 ], [ %1000, %389 ], !dbg !69
  %1137 = phi float [ 0.000000e+00, %14 ], [ %1001, %389 ], !dbg !69
  %1138 = phi float [ 0.000000e+00, %14 ], [ %1002, %389 ], !dbg !69
  %1139 = phi float [ 0.000000e+00, %14 ], [ %1004, %389 ], !dbg !69
  %1140 = phi float [ 0.000000e+00, %14 ], [ %1005, %389 ], !dbg !69
  %1141 = phi float [ 0.000000e+00, %14 ], [ %1006, %389 ], !dbg !69
  %1142 = phi float [ 0.000000e+00, %14 ], [ %1007, %389 ], !dbg !69
  %1143 = phi float [ 0.000000e+00, %14 ], [ %1009, %389 ], !dbg !69
  %1144 = phi float [ 0.000000e+00, %14 ], [ %1010, %389 ], !dbg !69
  %1145 = phi float [ 0.000000e+00, %14 ], [ %1011, %389 ], !dbg !69
  %1146 = phi float [ 0.000000e+00, %14 ], [ %1012, %389 ], !dbg !69
  %1147 = phi float [ 0.000000e+00, %14 ], [ %1014, %389 ], !dbg !69
  %1148 = phi float [ 0.000000e+00, %14 ], [ %1015, %389 ], !dbg !69
  %1149 = phi float [ 0.000000e+00, %14 ], [ %1016, %389 ], !dbg !69
  %1150 = phi float [ 0.000000e+00, %14 ], [ %1017, %389 ], !dbg !69
  %1151 = phi float [ 0.000000e+00, %14 ], [ %1019, %389 ], !dbg !69
  %1152 = phi float [ 0.000000e+00, %14 ], [ %1020, %389 ], !dbg !69
  %1153 = phi float [ 0.000000e+00, %14 ], [ %1021, %389 ], !dbg !69
  %1154 = phi float [ 0.000000e+00, %14 ], [ %1022, %389 ], !dbg !69
  %1155 = phi float [ 0.000000e+00, %14 ], [ %1024, %389 ], !dbg !69
  %1156 = phi float [ 0.000000e+00, %14 ], [ %1025, %389 ], !dbg !69
  %1157 = phi float [ 0.000000e+00, %14 ], [ %1026, %389 ], !dbg !69
  %1158 = phi float [ 0.000000e+00, %14 ], [ %1027, %389 ], !dbg !69
  %1159 = phi float [ 0.000000e+00, %14 ], [ %1029, %389 ], !dbg !69
  %1160 = phi float [ 0.000000e+00, %14 ], [ %1030, %389 ], !dbg !69
  %1161 = phi float [ 0.000000e+00, %14 ], [ %1031, %389 ], !dbg !69
  %1162 = phi float [ 0.000000e+00, %14 ], [ %1032, %389 ], !dbg !69
  %1163 = phi float [ 0.000000e+00, %14 ], [ %1034, %389 ], !dbg !69
  %1164 = phi float [ 0.000000e+00, %14 ], [ %1035, %389 ], !dbg !69
  %1165 = phi float [ 0.000000e+00, %14 ], [ %1036, %389 ], !dbg !69
  %1166 = phi float [ 0.000000e+00, %14 ], [ %1037, %389 ], !dbg !69
  %.lcssa98 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), %14 ], [ %547, %389 ], !dbg !70
  %.lcssa97 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), %14 ], [ %813, %389 ], !dbg !71
  %.lcssa96 = phi ptr addrspace(3) [ @global_smem, %14 ], [ %536, %389 ], !dbg !72
  %1167 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), %14 ], [ %774, %389 ], !dbg !73
  tail call void @llvm.amdgcn.s.waitcnt(i32 -49168), !dbg !44
  fence syncscope("workgroup") release, !dbg !44
  tail call void @llvm.amdgcn.s.barrier(), !dbg !44
  fence syncscope("workgroup") acquire, !dbg !44
  br i1 %93, label %1168, label %._crit_edge._crit_edge, !dbg !64

._crit_edge._crit_edge:                           ; preds = %._crit_edge
  %.pre = or disjoint i32 %42, 224, !dbg !29
  %.pre117 = or disjoint i32 %42, 160, !dbg !29
  %.pre119 = or disjoint i32 %42, 96, !dbg !29
  %.pre121 = or disjoint i32 %42, 32, !dbg !29
  br label %1665, !dbg !64

1168:                                             ; preds = %._crit_edge
  %1169 = shl i32 %30, 3, !dbg !49
  %1170 = and i32 %1169, 48, !dbg !49
  %1171 = or disjoint i32 %1170, 64, !dbg !49
  %1172 = and i32 %1169, 64, !dbg !49
  %and.ra = and i32 %30, 48, !dbg !49
  %1173 = or disjoint i32 %1172, %and.ra, !dbg !49
  %1174 = xor i32 %1173, %1171, !dbg !49
  %1175 = getelementptr inbounds nuw i8, ptr addrspace(3) %1167, i32 %1174, !dbg !50
  %1176 = or disjoint i32 %39, 192, !dbg !44
  %1177 = or disjoint i32 %1176, %44, !dbg !48
  %1178 = or disjoint i32 %1177, %46, !dbg !48
  %1179 = shl nuw nsw i32 %1178, 7, !dbg !50
  %1180 = getelementptr inbounds nuw i8, ptr addrspace(3) %1175, i32 %1179, !dbg !50
  %1181 = load <4 x i32>, ptr addrspace(3) %1180, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1182 = and i32 %1169, 112, !dbg !49
  %1183 = xor i32 %1182, %and.ra, !dbg !49
  %1184 = getelementptr inbounds nuw i8, ptr addrspace(3) %1167, i32 %1183, !dbg !50
  %1185 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1179, !dbg !50
  %1186 = load <4 x i32>, ptr addrspace(3) %1185, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1187 = or disjoint i32 %39, 128, !dbg !44
  %1188 = or disjoint i32 %1187, %44, !dbg !48
  %1189 = or disjoint i32 %1188, %46, !dbg !48
  %1190 = shl nuw nsw i32 %1189, 7, !dbg !50
  %1191 = getelementptr inbounds nuw i8, ptr addrspace(3) %1175, i32 %1190, !dbg !50
  %1192 = load <4 x i32>, ptr addrspace(3) %1191, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1193 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1190, !dbg !50
  %1194 = load <4 x i32>, ptr addrspace(3) %1193, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1195 = or disjoint i32 %39, 64, !dbg !44
  %1196 = or disjoint i32 %1195, %44, !dbg !48
  %1197 = or disjoint i32 %1196, %46, !dbg !48
  %1198 = shl nuw nsw i32 %1197, 7, !dbg !50
  %1199 = getelementptr inbounds nuw i8, ptr addrspace(3) %1175, i32 %1198, !dbg !50
  %1200 = load <4 x i32>, ptr addrspace(3) %1199, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1201 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1198, !dbg !50
  %1202 = load <4 x i32>, ptr addrspace(3) %1201, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1203 = or disjoint i32 %46, %44, !dbg !48
  %1204 = or disjoint i32 %1203, %39, !dbg !48
  %1205 = shl nuw nsw i32 %1204, 7, !dbg !50
  %1206 = getelementptr inbounds nuw i8, ptr addrspace(3) %1175, i32 %1205, !dbg !50
  %1207 = load <4 x i32>, ptr addrspace(3) %1206, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1208 = getelementptr inbounds nuw i8, ptr addrspace(3) %1184, i32 %1205, !dbg !50
  %1209 = load <4 x i32>, ptr addrspace(3) %1208, align 16, !dbg !50, !alias.scope !60, !noalias !45
  %1210 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa96, i32 %1174, !dbg !49
  %1211 = or disjoint i32 %42, 224, !dbg !44
  %1212 = shl nuw nsw i32 %1211, 7, !dbg !49
  %1213 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1212, !dbg !49
  %1214 = load <4 x i32>, ptr addrspace(3) %1213, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1215 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa96, i32 %1183, !dbg !49
  %1216 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1212, !dbg !49
  %1217 = load <4 x i32>, ptr addrspace(3) %1216, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1218 = or disjoint i32 %1176, %41, !dbg !44
  %1219 = shl nuw nsw i32 %1218, 7, !dbg !49
  %1220 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1219, !dbg !49
  %1221 = load <4 x i32>, ptr addrspace(3) %1220, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1222 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1219, !dbg !49
  %1223 = load <4 x i32>, ptr addrspace(3) %1222, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1224 = or disjoint i32 %42, 160, !dbg !44
  %1225 = shl nuw nsw i32 %1224, 7, !dbg !49
  %1226 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1225, !dbg !49
  %1227 = load <4 x i32>, ptr addrspace(3) %1226, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1228 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1225, !dbg !49
  %1229 = load <4 x i32>, ptr addrspace(3) %1228, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1230 = or disjoint i32 %1187, %41, !dbg !44
  %1231 = shl nuw nsw i32 %1230, 7, !dbg !49
  %1232 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1231, !dbg !49
  %1233 = load <4 x i32>, ptr addrspace(3) %1232, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1234 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1231, !dbg !49
  %1235 = load <4 x i32>, ptr addrspace(3) %1234, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1236 = or disjoint i32 %42, 96, !dbg !44
  %1237 = shl nuw nsw i32 %1236, 7, !dbg !49
  %1238 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1237, !dbg !49
  %1239 = load <4 x i32>, ptr addrspace(3) %1238, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1240 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1237, !dbg !49
  %1241 = load <4 x i32>, ptr addrspace(3) %1240, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1242 = or disjoint i32 %1195, %41, !dbg !44
  %1243 = shl nuw nsw i32 %1242, 7, !dbg !49
  %1244 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1243, !dbg !49
  %1245 = load <4 x i32>, ptr addrspace(3) %1244, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1246 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1243, !dbg !49
  %1247 = load <4 x i32>, ptr addrspace(3) %1246, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1248 = or disjoint i32 %42, 32, !dbg !44
  %1249 = shl nuw nsw i32 %1248, 7, !dbg !49
  %1250 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1249, !dbg !49
  %1251 = load <4 x i32>, ptr addrspace(3) %1250, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1252 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1249, !dbg !49
  %1253 = load <4 x i32>, ptr addrspace(3) %1252, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1254 = shl nuw nsw i32 %42, 7, !dbg !49
  %1255 = getelementptr inbounds nuw i8, ptr addrspace(3) %1210, i32 %1254, !dbg !49
  %1256 = load <4 x i32>, ptr addrspace(3) %1255, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1257 = getelementptr inbounds nuw i8, ptr addrspace(3) %1215, i32 %1254, !dbg !49
  %1258 = load <4 x i32>, ptr addrspace(3) %1257, align 16, !dbg !49, !alias.scope !60, !noalias !45
  %1259 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa97, i32 %1178, !dbg !48
  %1260 = and i32 %68, 768, !dbg !44
  %1261 = or disjoint i32 %1260, 1024, !dbg !44
  %1262 = getelementptr inbounds nuw i8, ptr addrspace(3) %1259, i32 %1261, !dbg !48
  %1263 = load i8, ptr addrspace(3) %1262, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1264 = getelementptr inbounds nuw i8, ptr addrspace(3) %1259, i32 %1260, !dbg !48
  %1265 = load i8, ptr addrspace(3) %1264, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1266 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa97, i32 %1189, !dbg !48
  %1267 = getelementptr inbounds nuw i8, ptr addrspace(3) %1266, i32 %1261, !dbg !48
  %1268 = load i8, ptr addrspace(3) %1267, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1269 = getelementptr inbounds nuw i8, ptr addrspace(3) %1266, i32 %1260, !dbg !48
  %1270 = load i8, ptr addrspace(3) %1269, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1271 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa97, i32 %1197, !dbg !48
  %1272 = getelementptr inbounds nuw i8, ptr addrspace(3) %1271, i32 %1261, !dbg !48
  %1273 = load i8, ptr addrspace(3) %1272, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1274 = getelementptr inbounds nuw i8, ptr addrspace(3) %1271, i32 %1260, !dbg !48
  %1275 = load i8, ptr addrspace(3) %1274, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1276 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa97, i32 %1204, !dbg !48
  %1277 = getelementptr inbounds nuw i8, ptr addrspace(3) %1276, i32 %1261, !dbg !48
  %1278 = load i8, ptr addrspace(3) %1277, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1279 = getelementptr inbounds nuw i8, ptr addrspace(3) %1276, i32 %1260, !dbg !48
  %1280 = load i8, ptr addrspace(3) %1279, align 1, !dbg !48, !alias.scope !60, !noalias !45
  %1281 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1211, !dbg !44
  %1282 = getelementptr inbounds nuw i8, ptr addrspace(3) %1281, i32 %1261, !dbg !44
  %1283 = load i8, ptr addrspace(3) %1282, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1284 = getelementptr inbounds nuw i8, ptr addrspace(3) %1281, i32 %1260, !dbg !44
  %1285 = load i8, ptr addrspace(3) %1284, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1286 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1218, !dbg !44
  %1287 = getelementptr inbounds nuw i8, ptr addrspace(3) %1286, i32 %1261, !dbg !44
  %1288 = load i8, ptr addrspace(3) %1287, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1289 = getelementptr inbounds nuw i8, ptr addrspace(3) %1286, i32 %1260, !dbg !44
  %1290 = load i8, ptr addrspace(3) %1289, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1291 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1224, !dbg !44
  %1292 = getelementptr inbounds nuw i8, ptr addrspace(3) %1291, i32 %1261, !dbg !44
  %1293 = load i8, ptr addrspace(3) %1292, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1294 = getelementptr inbounds nuw i8, ptr addrspace(3) %1291, i32 %1260, !dbg !44
  %1295 = load i8, ptr addrspace(3) %1294, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1296 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1230, !dbg !44
  %1297 = getelementptr inbounds nuw i8, ptr addrspace(3) %1296, i32 %1261, !dbg !44
  %1298 = load i8, ptr addrspace(3) %1297, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1299 = getelementptr inbounds nuw i8, ptr addrspace(3) %1296, i32 %1260, !dbg !44
  %1300 = load i8, ptr addrspace(3) %1299, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1301 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1236, !dbg !44
  %1302 = getelementptr inbounds nuw i8, ptr addrspace(3) %1301, i32 %1261, !dbg !44
  %1303 = load i8, ptr addrspace(3) %1302, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1304 = getelementptr inbounds nuw i8, ptr addrspace(3) %1301, i32 %1260, !dbg !44
  %1305 = load i8, ptr addrspace(3) %1304, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1306 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1242, !dbg !44
  %1307 = getelementptr inbounds nuw i8, ptr addrspace(3) %1306, i32 %1261, !dbg !44
  %1308 = load i8, ptr addrspace(3) %1307, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1309 = getelementptr inbounds nuw i8, ptr addrspace(3) %1306, i32 %1260, !dbg !44
  %1310 = load i8, ptr addrspace(3) %1309, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1311 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %1248, !dbg !44
  %1312 = getelementptr inbounds nuw i8, ptr addrspace(3) %1311, i32 %1261, !dbg !44
  %1313 = load i8, ptr addrspace(3) %1312, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1314 = getelementptr inbounds nuw i8, ptr addrspace(3) %1311, i32 %1260, !dbg !44
  %1315 = load i8, ptr addrspace(3) %1314, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1316 = getelementptr inbounds nuw i8, ptr addrspace(3) %.lcssa98, i32 %42, !dbg !44
  %1317 = getelementptr inbounds nuw i8, ptr addrspace(3) %1316, i32 %1261, !dbg !44
  %1318 = load i8, ptr addrspace(3) %1317, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1319 = getelementptr inbounds nuw i8, ptr addrspace(3) %1316, i32 %1260, !dbg !44
  %1320 = load i8, ptr addrspace(3) %1319, align 1, !dbg !44, !alias.scope !60, !noalias !45
  %1321 = zext i8 %1320 to i32, !dbg !64
  %1322 = zext i8 %1318 to i32, !dbg !64
  %1323 = zext i8 %1315 to i32, !dbg !64
  %1324 = zext i8 %1313 to i32, !dbg !64
  %1325 = zext i8 %1310 to i32, !dbg !64
  %1326 = zext i8 %1308 to i32, !dbg !64
  %1327 = zext i8 %1305 to i32, !dbg !64
  %1328 = zext i8 %1303 to i32, !dbg !64
  %1329 = zext i8 %1300 to i32, !dbg !64
  %1330 = zext i8 %1298 to i32, !dbg !64
  %1331 = zext i8 %1295 to i32, !dbg !64
  %1332 = zext i8 %1293 to i32, !dbg !64
  %1333 = zext i8 %1290 to i32, !dbg !64
  %1334 = zext i8 %1288 to i32, !dbg !64
  %1335 = zext i8 %1285 to i32, !dbg !64
  %1336 = zext i8 %1283 to i32, !dbg !64
  %1337 = zext i8 %1280 to i32, !dbg !64
  %1338 = zext i8 %1278 to i32, !dbg !64
  %1339 = zext i8 %1275 to i32, !dbg !64
  %1340 = zext i8 %1273 to i32, !dbg !64
  %1341 = zext i8 %1270 to i32, !dbg !64
  %1342 = zext i8 %1268 to i32, !dbg !64
  %1343 = zext i8 %1265 to i32, !dbg !64
  %1344 = zext i8 %1263 to i32, !dbg !64
  %1345 = insertelement <4 x float> poison, float %1039, i64 0, !dbg !64
  %1346 = insertelement <4 x float> %1345, float %1040, i64 1, !dbg !64
  %1347 = insertelement <4 x float> %1346, float %1041, i64 2, !dbg !64
  %1348 = insertelement <4 x float> %1347, float %1042, i64 3, !dbg !64
  %1349 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1258, <4 x float> %1348, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1321), !dbg !64
  %1350 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1256, <4 x float> %1349, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1322), !dbg !64
  %1351 = extractelement <4 x float> %1350, i64 0, !dbg !64
  %1352 = extractelement <4 x float> %1350, i64 1, !dbg !64
  %1353 = extractelement <4 x float> %1350, i64 2, !dbg !64
  %1354 = extractelement <4 x float> %1350, i64 3, !dbg !64
  %1355 = insertelement <4 x float> poison, float %1043, i64 0, !dbg !64
  %1356 = insertelement <4 x float> %1355, float %1044, i64 1, !dbg !64
  %1357 = insertelement <4 x float> %1356, float %1045, i64 2, !dbg !64
  %1358 = insertelement <4 x float> %1357, float %1046, i64 3, !dbg !64
  %1359 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1258, <4 x float> %1358, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1321), !dbg !64
  %1360 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1256, <4 x float> %1359, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1322), !dbg !64
  %1361 = extractelement <4 x float> %1360, i64 0, !dbg !64
  %1362 = extractelement <4 x float> %1360, i64 1, !dbg !64
  %1363 = extractelement <4 x float> %1360, i64 2, !dbg !64
  %1364 = extractelement <4 x float> %1360, i64 3, !dbg !64
  %1365 = insertelement <4 x float> poison, float %1047, i64 0, !dbg !64
  %1366 = insertelement <4 x float> %1365, float %1048, i64 1, !dbg !64
  %1367 = insertelement <4 x float> %1366, float %1049, i64 2, !dbg !64
  %1368 = insertelement <4 x float> %1367, float %1050, i64 3, !dbg !64
  %1369 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1258, <4 x float> %1368, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1321), !dbg !64
  %1370 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1256, <4 x float> %1369, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1322), !dbg !64
  %1371 = extractelement <4 x float> %1370, i64 0, !dbg !64
  %1372 = extractelement <4 x float> %1370, i64 1, !dbg !64
  %1373 = extractelement <4 x float> %1370, i64 2, !dbg !64
  %1374 = extractelement <4 x float> %1370, i64 3, !dbg !64
  %1375 = insertelement <4 x float> poison, float %1051, i64 0, !dbg !64
  %1376 = insertelement <4 x float> %1375, float %1052, i64 1, !dbg !64
  %1377 = insertelement <4 x float> %1376, float %1053, i64 2, !dbg !64
  %1378 = insertelement <4 x float> %1377, float %1054, i64 3, !dbg !64
  %1379 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1258, <4 x float> %1378, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1321), !dbg !64
  %1380 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1256, <4 x float> %1379, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1322), !dbg !64
  %1381 = extractelement <4 x float> %1380, i64 0, !dbg !64
  %1382 = extractelement <4 x float> %1380, i64 1, !dbg !64
  %1383 = extractelement <4 x float> %1380, i64 2, !dbg !64
  %1384 = extractelement <4 x float> %1380, i64 3, !dbg !64
  %1385 = insertelement <4 x float> poison, float %1055, i64 0, !dbg !64
  %1386 = insertelement <4 x float> %1385, float %1056, i64 1, !dbg !64
  %1387 = insertelement <4 x float> %1386, float %1057, i64 2, !dbg !64
  %1388 = insertelement <4 x float> %1387, float %1058, i64 3, !dbg !64
  %1389 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1253, <4 x float> %1388, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1323), !dbg !64
  %1390 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1251, <4 x float> %1389, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1324), !dbg !64
  %1391 = extractelement <4 x float> %1390, i64 0, !dbg !64
  %1392 = extractelement <4 x float> %1390, i64 1, !dbg !64
  %1393 = extractelement <4 x float> %1390, i64 2, !dbg !64
  %1394 = extractelement <4 x float> %1390, i64 3, !dbg !64
  %1395 = insertelement <4 x float> poison, float %1059, i64 0, !dbg !64
  %1396 = insertelement <4 x float> %1395, float %1060, i64 1, !dbg !64
  %1397 = insertelement <4 x float> %1396, float %1061, i64 2, !dbg !64
  %1398 = insertelement <4 x float> %1397, float %1062, i64 3, !dbg !64
  %1399 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1253, <4 x float> %1398, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1323), !dbg !64
  %1400 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1251, <4 x float> %1399, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1324), !dbg !64
  %1401 = extractelement <4 x float> %1400, i64 0, !dbg !64
  %1402 = extractelement <4 x float> %1400, i64 1, !dbg !64
  %1403 = extractelement <4 x float> %1400, i64 2, !dbg !64
  %1404 = extractelement <4 x float> %1400, i64 3, !dbg !64
  %1405 = insertelement <4 x float> poison, float %1063, i64 0, !dbg !64
  %1406 = insertelement <4 x float> %1405, float %1064, i64 1, !dbg !64
  %1407 = insertelement <4 x float> %1406, float %1065, i64 2, !dbg !64
  %1408 = insertelement <4 x float> %1407, float %1066, i64 3, !dbg !64
  %1409 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1253, <4 x float> %1408, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1323), !dbg !64
  %1410 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1251, <4 x float> %1409, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1324), !dbg !64
  %1411 = extractelement <4 x float> %1410, i64 0, !dbg !64
  %1412 = extractelement <4 x float> %1410, i64 1, !dbg !64
  %1413 = extractelement <4 x float> %1410, i64 2, !dbg !64
  %1414 = extractelement <4 x float> %1410, i64 3, !dbg !64
  %1415 = insertelement <4 x float> poison, float %1067, i64 0, !dbg !64
  %1416 = insertelement <4 x float> %1415, float %1068, i64 1, !dbg !64
  %1417 = insertelement <4 x float> %1416, float %1069, i64 2, !dbg !64
  %1418 = insertelement <4 x float> %1417, float %1070, i64 3, !dbg !64
  %1419 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1253, <4 x float> %1418, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1323), !dbg !64
  %1420 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1251, <4 x float> %1419, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1324), !dbg !64
  %1421 = extractelement <4 x float> %1420, i64 0, !dbg !64
  %1422 = extractelement <4 x float> %1420, i64 1, !dbg !64
  %1423 = extractelement <4 x float> %1420, i64 2, !dbg !64
  %1424 = extractelement <4 x float> %1420, i64 3, !dbg !64
  %1425 = insertelement <4 x float> poison, float %1071, i64 0, !dbg !64
  %1426 = insertelement <4 x float> %1425, float %1072, i64 1, !dbg !64
  %1427 = insertelement <4 x float> %1426, float %1073, i64 2, !dbg !64
  %1428 = insertelement <4 x float> %1427, float %1074, i64 3, !dbg !64
  %1429 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1247, <4 x float> %1428, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1325), !dbg !64
  %1430 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1245, <4 x float> %1429, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1326), !dbg !64
  %1431 = extractelement <4 x float> %1430, i64 0, !dbg !64
  %1432 = extractelement <4 x float> %1430, i64 1, !dbg !64
  %1433 = extractelement <4 x float> %1430, i64 2, !dbg !64
  %1434 = extractelement <4 x float> %1430, i64 3, !dbg !64
  %1435 = insertelement <4 x float> poison, float %1075, i64 0, !dbg !64
  %1436 = insertelement <4 x float> %1435, float %1076, i64 1, !dbg !64
  %1437 = insertelement <4 x float> %1436, float %1077, i64 2, !dbg !64
  %1438 = insertelement <4 x float> %1437, float %1078, i64 3, !dbg !64
  %1439 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1247, <4 x float> %1438, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1325), !dbg !64
  %1440 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1245, <4 x float> %1439, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1326), !dbg !64
  %1441 = extractelement <4 x float> %1440, i64 0, !dbg !64
  %1442 = extractelement <4 x float> %1440, i64 1, !dbg !64
  %1443 = extractelement <4 x float> %1440, i64 2, !dbg !64
  %1444 = extractelement <4 x float> %1440, i64 3, !dbg !64
  %1445 = insertelement <4 x float> poison, float %1079, i64 0, !dbg !64
  %1446 = insertelement <4 x float> %1445, float %1080, i64 1, !dbg !64
  %1447 = insertelement <4 x float> %1446, float %1081, i64 2, !dbg !64
  %1448 = insertelement <4 x float> %1447, float %1082, i64 3, !dbg !64
  %1449 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1247, <4 x float> %1448, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1325), !dbg !64
  %1450 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1245, <4 x float> %1449, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1326), !dbg !64
  %1451 = extractelement <4 x float> %1450, i64 0, !dbg !64
  %1452 = extractelement <4 x float> %1450, i64 1, !dbg !64
  %1453 = extractelement <4 x float> %1450, i64 2, !dbg !64
  %1454 = extractelement <4 x float> %1450, i64 3, !dbg !64
  %1455 = insertelement <4 x float> poison, float %1083, i64 0, !dbg !64
  %1456 = insertelement <4 x float> %1455, float %1084, i64 1, !dbg !64
  %1457 = insertelement <4 x float> %1456, float %1085, i64 2, !dbg !64
  %1458 = insertelement <4 x float> %1457, float %1086, i64 3, !dbg !64
  %1459 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1247, <4 x float> %1458, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1325), !dbg !64
  %1460 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1245, <4 x float> %1459, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1326), !dbg !64
  %1461 = extractelement <4 x float> %1460, i64 0, !dbg !64
  %1462 = extractelement <4 x float> %1460, i64 1, !dbg !64
  %1463 = extractelement <4 x float> %1460, i64 2, !dbg !64
  %1464 = extractelement <4 x float> %1460, i64 3, !dbg !64
  %1465 = insertelement <4 x float> poison, float %1087, i64 0, !dbg !64
  %1466 = insertelement <4 x float> %1465, float %1088, i64 1, !dbg !64
  %1467 = insertelement <4 x float> %1466, float %1089, i64 2, !dbg !64
  %1468 = insertelement <4 x float> %1467, float %1090, i64 3, !dbg !64
  %1469 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1241, <4 x float> %1468, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1327), !dbg !64
  %1470 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1239, <4 x float> %1469, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1328), !dbg !64
  %1471 = extractelement <4 x float> %1470, i64 0, !dbg !64
  %1472 = extractelement <4 x float> %1470, i64 1, !dbg !64
  %1473 = extractelement <4 x float> %1470, i64 2, !dbg !64
  %1474 = extractelement <4 x float> %1470, i64 3, !dbg !64
  %1475 = insertelement <4 x float> poison, float %1091, i64 0, !dbg !64
  %1476 = insertelement <4 x float> %1475, float %1092, i64 1, !dbg !64
  %1477 = insertelement <4 x float> %1476, float %1093, i64 2, !dbg !64
  %1478 = insertelement <4 x float> %1477, float %1094, i64 3, !dbg !64
  %1479 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1241, <4 x float> %1478, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1327), !dbg !64
  %1480 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1239, <4 x float> %1479, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1328), !dbg !64
  %1481 = extractelement <4 x float> %1480, i64 0, !dbg !64
  %1482 = extractelement <4 x float> %1480, i64 1, !dbg !64
  %1483 = extractelement <4 x float> %1480, i64 2, !dbg !64
  %1484 = extractelement <4 x float> %1480, i64 3, !dbg !64
  %1485 = insertelement <4 x float> poison, float %1095, i64 0, !dbg !64
  %1486 = insertelement <4 x float> %1485, float %1096, i64 1, !dbg !64
  %1487 = insertelement <4 x float> %1486, float %1097, i64 2, !dbg !64
  %1488 = insertelement <4 x float> %1487, float %1098, i64 3, !dbg !64
  %1489 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1241, <4 x float> %1488, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1327), !dbg !64
  %1490 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1239, <4 x float> %1489, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1328), !dbg !64
  %1491 = extractelement <4 x float> %1490, i64 0, !dbg !64
  %1492 = extractelement <4 x float> %1490, i64 1, !dbg !64
  %1493 = extractelement <4 x float> %1490, i64 2, !dbg !64
  %1494 = extractelement <4 x float> %1490, i64 3, !dbg !64
  %1495 = insertelement <4 x float> poison, float %1099, i64 0, !dbg !64
  %1496 = insertelement <4 x float> %1495, float %1100, i64 1, !dbg !64
  %1497 = insertelement <4 x float> %1496, float %1101, i64 2, !dbg !64
  %1498 = insertelement <4 x float> %1497, float %1102, i64 3, !dbg !64
  %1499 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1241, <4 x float> %1498, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1327), !dbg !64
  %1500 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1239, <4 x float> %1499, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1328), !dbg !64
  %1501 = extractelement <4 x float> %1500, i64 0, !dbg !64
  %1502 = extractelement <4 x float> %1500, i64 1, !dbg !64
  %1503 = extractelement <4 x float> %1500, i64 2, !dbg !64
  %1504 = extractelement <4 x float> %1500, i64 3, !dbg !64
  %1505 = insertelement <4 x float> poison, float %1103, i64 0, !dbg !64
  %1506 = insertelement <4 x float> %1505, float %1104, i64 1, !dbg !64
  %1507 = insertelement <4 x float> %1506, float %1105, i64 2, !dbg !64
  %1508 = insertelement <4 x float> %1507, float %1106, i64 3, !dbg !64
  %1509 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1235, <4 x float> %1508, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1329), !dbg !64
  %1510 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1233, <4 x float> %1509, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1330), !dbg !64
  %1511 = extractelement <4 x float> %1510, i64 0, !dbg !64
  %1512 = extractelement <4 x float> %1510, i64 1, !dbg !64
  %1513 = extractelement <4 x float> %1510, i64 2, !dbg !64
  %1514 = extractelement <4 x float> %1510, i64 3, !dbg !64
  %1515 = insertelement <4 x float> poison, float %1107, i64 0, !dbg !64
  %1516 = insertelement <4 x float> %1515, float %1108, i64 1, !dbg !64
  %1517 = insertelement <4 x float> %1516, float %1109, i64 2, !dbg !64
  %1518 = insertelement <4 x float> %1517, float %1110, i64 3, !dbg !64
  %1519 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1235, <4 x float> %1518, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1329), !dbg !64
  %1520 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1233, <4 x float> %1519, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1330), !dbg !64
  %1521 = extractelement <4 x float> %1520, i64 0, !dbg !64
  %1522 = extractelement <4 x float> %1520, i64 1, !dbg !64
  %1523 = extractelement <4 x float> %1520, i64 2, !dbg !64
  %1524 = extractelement <4 x float> %1520, i64 3, !dbg !64
  %1525 = insertelement <4 x float> poison, float %1111, i64 0, !dbg !64
  %1526 = insertelement <4 x float> %1525, float %1112, i64 1, !dbg !64
  %1527 = insertelement <4 x float> %1526, float %1113, i64 2, !dbg !64
  %1528 = insertelement <4 x float> %1527, float %1114, i64 3, !dbg !64
  %1529 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1235, <4 x float> %1528, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1329), !dbg !64
  %1530 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1233, <4 x float> %1529, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1330), !dbg !64
  %1531 = extractelement <4 x float> %1530, i64 0, !dbg !64
  %1532 = extractelement <4 x float> %1530, i64 1, !dbg !64
  %1533 = extractelement <4 x float> %1530, i64 2, !dbg !64
  %1534 = extractelement <4 x float> %1530, i64 3, !dbg !64
  %1535 = insertelement <4 x float> poison, float %1115, i64 0, !dbg !64
  %1536 = insertelement <4 x float> %1535, float %1116, i64 1, !dbg !64
  %1537 = insertelement <4 x float> %1536, float %1117, i64 2, !dbg !64
  %1538 = insertelement <4 x float> %1537, float %1118, i64 3, !dbg !64
  %1539 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1235, <4 x float> %1538, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1329), !dbg !64
  %1540 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1233, <4 x float> %1539, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1330), !dbg !64
  %1541 = extractelement <4 x float> %1540, i64 0, !dbg !64
  %1542 = extractelement <4 x float> %1540, i64 1, !dbg !64
  %1543 = extractelement <4 x float> %1540, i64 2, !dbg !64
  %1544 = extractelement <4 x float> %1540, i64 3, !dbg !64
  %1545 = insertelement <4 x float> poison, float %1119, i64 0, !dbg !64
  %1546 = insertelement <4 x float> %1545, float %1120, i64 1, !dbg !64
  %1547 = insertelement <4 x float> %1546, float %1121, i64 2, !dbg !64
  %1548 = insertelement <4 x float> %1547, float %1122, i64 3, !dbg !64
  %1549 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1229, <4 x float> %1548, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1331), !dbg !64
  %1550 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1227, <4 x float> %1549, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1332), !dbg !64
  %1551 = extractelement <4 x float> %1550, i64 0, !dbg !64
  %1552 = extractelement <4 x float> %1550, i64 1, !dbg !64
  %1553 = extractelement <4 x float> %1550, i64 2, !dbg !64
  %1554 = extractelement <4 x float> %1550, i64 3, !dbg !64
  %1555 = insertelement <4 x float> poison, float %1123, i64 0, !dbg !64
  %1556 = insertelement <4 x float> %1555, float %1124, i64 1, !dbg !64
  %1557 = insertelement <4 x float> %1556, float %1125, i64 2, !dbg !64
  %1558 = insertelement <4 x float> %1557, float %1126, i64 3, !dbg !64
  %1559 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1229, <4 x float> %1558, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1331), !dbg !64
  %1560 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1227, <4 x float> %1559, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1332), !dbg !64
  %1561 = extractelement <4 x float> %1560, i64 0, !dbg !64
  %1562 = extractelement <4 x float> %1560, i64 1, !dbg !64
  %1563 = extractelement <4 x float> %1560, i64 2, !dbg !64
  %1564 = extractelement <4 x float> %1560, i64 3, !dbg !64
  %1565 = insertelement <4 x float> poison, float %1127, i64 0, !dbg !64
  %1566 = insertelement <4 x float> %1565, float %1128, i64 1, !dbg !64
  %1567 = insertelement <4 x float> %1566, float %1129, i64 2, !dbg !64
  %1568 = insertelement <4 x float> %1567, float %1130, i64 3, !dbg !64
  %1569 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1229, <4 x float> %1568, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1331), !dbg !64
  %1570 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1227, <4 x float> %1569, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1332), !dbg !64
  %1571 = extractelement <4 x float> %1570, i64 0, !dbg !64
  %1572 = extractelement <4 x float> %1570, i64 1, !dbg !64
  %1573 = extractelement <4 x float> %1570, i64 2, !dbg !64
  %1574 = extractelement <4 x float> %1570, i64 3, !dbg !64
  %1575 = insertelement <4 x float> poison, float %1131, i64 0, !dbg !64
  %1576 = insertelement <4 x float> %1575, float %1132, i64 1, !dbg !64
  %1577 = insertelement <4 x float> %1576, float %1133, i64 2, !dbg !64
  %1578 = insertelement <4 x float> %1577, float %1134, i64 3, !dbg !64
  %1579 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1229, <4 x float> %1578, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1331), !dbg !64
  %1580 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1227, <4 x float> %1579, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1332), !dbg !64
  %1581 = extractelement <4 x float> %1580, i64 0, !dbg !64
  %1582 = extractelement <4 x float> %1580, i64 1, !dbg !64
  %1583 = extractelement <4 x float> %1580, i64 2, !dbg !64
  %1584 = extractelement <4 x float> %1580, i64 3, !dbg !64
  %1585 = insertelement <4 x float> poison, float %1135, i64 0, !dbg !64
  %1586 = insertelement <4 x float> %1585, float %1136, i64 1, !dbg !64
  %1587 = insertelement <4 x float> %1586, float %1137, i64 2, !dbg !64
  %1588 = insertelement <4 x float> %1587, float %1138, i64 3, !dbg !64
  %1589 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1223, <4 x float> %1588, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1333), !dbg !64
  %1590 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1221, <4 x float> %1589, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1334), !dbg !64
  %1591 = extractelement <4 x float> %1590, i64 0, !dbg !64
  %1592 = extractelement <4 x float> %1590, i64 1, !dbg !64
  %1593 = extractelement <4 x float> %1590, i64 2, !dbg !64
  %1594 = extractelement <4 x float> %1590, i64 3, !dbg !64
  %1595 = insertelement <4 x float> poison, float %1139, i64 0, !dbg !64
  %1596 = insertelement <4 x float> %1595, float %1140, i64 1, !dbg !64
  %1597 = insertelement <4 x float> %1596, float %1141, i64 2, !dbg !64
  %1598 = insertelement <4 x float> %1597, float %1142, i64 3, !dbg !64
  %1599 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1223, <4 x float> %1598, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1333), !dbg !64
  %1600 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1221, <4 x float> %1599, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1334), !dbg !64
  %1601 = extractelement <4 x float> %1600, i64 0, !dbg !64
  %1602 = extractelement <4 x float> %1600, i64 1, !dbg !64
  %1603 = extractelement <4 x float> %1600, i64 2, !dbg !64
  %1604 = extractelement <4 x float> %1600, i64 3, !dbg !64
  %1605 = insertelement <4 x float> poison, float %1143, i64 0, !dbg !64
  %1606 = insertelement <4 x float> %1605, float %1144, i64 1, !dbg !64
  %1607 = insertelement <4 x float> %1606, float %1145, i64 2, !dbg !64
  %1608 = insertelement <4 x float> %1607, float %1146, i64 3, !dbg !64
  %1609 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1223, <4 x float> %1608, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1333), !dbg !64
  %1610 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1221, <4 x float> %1609, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1334), !dbg !64
  %1611 = extractelement <4 x float> %1610, i64 0, !dbg !64
  %1612 = extractelement <4 x float> %1610, i64 1, !dbg !64
  %1613 = extractelement <4 x float> %1610, i64 2, !dbg !64
  %1614 = extractelement <4 x float> %1610, i64 3, !dbg !64
  %1615 = insertelement <4 x float> poison, float %1147, i64 0, !dbg !64
  %1616 = insertelement <4 x float> %1615, float %1148, i64 1, !dbg !64
  %1617 = insertelement <4 x float> %1616, float %1149, i64 2, !dbg !64
  %1618 = insertelement <4 x float> %1617, float %1150, i64 3, !dbg !64
  %1619 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1223, <4 x float> %1618, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1333), !dbg !64
  %1620 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1221, <4 x float> %1619, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1334), !dbg !64
  %1621 = extractelement <4 x float> %1620, i64 0, !dbg !64
  %1622 = extractelement <4 x float> %1620, i64 1, !dbg !64
  %1623 = extractelement <4 x float> %1620, i64 2, !dbg !64
  %1624 = extractelement <4 x float> %1620, i64 3, !dbg !64
  %1625 = insertelement <4 x float> poison, float %1151, i64 0, !dbg !64
  %1626 = insertelement <4 x float> %1625, float %1152, i64 1, !dbg !64
  %1627 = insertelement <4 x float> %1626, float %1153, i64 2, !dbg !64
  %1628 = insertelement <4 x float> %1627, float %1154, i64 3, !dbg !64
  %1629 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1209, <4 x i32> %1217, <4 x float> %1628, i32 4, i32 4, i32 0, i32 %1337, i32 0, i32 %1335), !dbg !64
  %1630 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1207, <4 x i32> %1214, <4 x float> %1629, i32 4, i32 4, i32 0, i32 %1338, i32 0, i32 %1336), !dbg !64
  %1631 = extractelement <4 x float> %1630, i64 0, !dbg !64
  %1632 = extractelement <4 x float> %1630, i64 1, !dbg !64
  %1633 = extractelement <4 x float> %1630, i64 2, !dbg !64
  %1634 = extractelement <4 x float> %1630, i64 3, !dbg !64
  %1635 = insertelement <4 x float> poison, float %1155, i64 0, !dbg !64
  %1636 = insertelement <4 x float> %1635, float %1156, i64 1, !dbg !64
  %1637 = insertelement <4 x float> %1636, float %1157, i64 2, !dbg !64
  %1638 = insertelement <4 x float> %1637, float %1158, i64 3, !dbg !64
  %1639 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1202, <4 x i32> %1217, <4 x float> %1638, i32 4, i32 4, i32 0, i32 %1339, i32 0, i32 %1335), !dbg !64
  %1640 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1200, <4 x i32> %1214, <4 x float> %1639, i32 4, i32 4, i32 0, i32 %1340, i32 0, i32 %1336), !dbg !64
  %1641 = extractelement <4 x float> %1640, i64 0, !dbg !64
  %1642 = extractelement <4 x float> %1640, i64 1, !dbg !64
  %1643 = extractelement <4 x float> %1640, i64 2, !dbg !64
  %1644 = extractelement <4 x float> %1640, i64 3, !dbg !64
  %1645 = insertelement <4 x float> poison, float %1159, i64 0, !dbg !64
  %1646 = insertelement <4 x float> %1645, float %1160, i64 1, !dbg !64
  %1647 = insertelement <4 x float> %1646, float %1161, i64 2, !dbg !64
  %1648 = insertelement <4 x float> %1647, float %1162, i64 3, !dbg !64
  %1649 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1194, <4 x i32> %1217, <4 x float> %1648, i32 4, i32 4, i32 0, i32 %1341, i32 0, i32 %1335), !dbg !64
  %1650 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1192, <4 x i32> %1214, <4 x float> %1649, i32 4, i32 4, i32 0, i32 %1342, i32 0, i32 %1336), !dbg !64
  %1651 = extractelement <4 x float> %1650, i64 0, !dbg !64
  %1652 = extractelement <4 x float> %1650, i64 1, !dbg !64
  %1653 = extractelement <4 x float> %1650, i64 2, !dbg !64
  %1654 = extractelement <4 x float> %1650, i64 3, !dbg !64
  %1655 = insertelement <4 x float> poison, float %1163, i64 0, !dbg !64
  %1656 = insertelement <4 x float> %1655, float %1164, i64 1, !dbg !64
  %1657 = insertelement <4 x float> %1656, float %1165, i64 2, !dbg !64
  %1658 = insertelement <4 x float> %1657, float %1166, i64 3, !dbg !64
  %1659 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1186, <4 x i32> %1217, <4 x float> %1658, i32 4, i32 4, i32 0, i32 %1343, i32 0, i32 %1335), !dbg !64
  %1660 = tail call <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32> %1181, <4 x i32> %1214, <4 x float> %1659, i32 4, i32 4, i32 0, i32 %1344, i32 0, i32 %1336), !dbg !64
  %1661 = extractelement <4 x float> %1660, i64 0, !dbg !64
  %1662 = extractelement <4 x float> %1660, i64 1, !dbg !64
  %1663 = extractelement <4 x float> %1660, i64 2, !dbg !64
  %1664 = extractelement <4 x float> %1660, i64 3, !dbg !64
  br label %1665, !dbg !64

1665:                                             ; preds = %._crit_edge._crit_edge, %1168
  %1666 = phi float [ %1166, %._crit_edge._crit_edge ], [ %1664, %1168 ], !dbg !43
  %1667 = phi float [ %1165, %._crit_edge._crit_edge ], [ %1663, %1168 ], !dbg !43
  %1668 = phi float [ %1164, %._crit_edge._crit_edge ], [ %1662, %1168 ], !dbg !43
  %1669 = phi float [ %1163, %._crit_edge._crit_edge ], [ %1661, %1168 ], !dbg !43
  %1670 = phi float [ %1162, %._crit_edge._crit_edge ], [ %1654, %1168 ], !dbg !43
  %1671 = phi float [ %1161, %._crit_edge._crit_edge ], [ %1653, %1168 ], !dbg !43
  %1672 = phi float [ %1160, %._crit_edge._crit_edge ], [ %1652, %1168 ], !dbg !43
  %1673 = phi float [ %1159, %._crit_edge._crit_edge ], [ %1651, %1168 ], !dbg !43
  %1674 = phi float [ %1158, %._crit_edge._crit_edge ], [ %1644, %1168 ], !dbg !43
  %1675 = phi float [ %1157, %._crit_edge._crit_edge ], [ %1643, %1168 ], !dbg !43
  %1676 = phi float [ %1156, %._crit_edge._crit_edge ], [ %1642, %1168 ], !dbg !43
  %1677 = phi float [ %1155, %._crit_edge._crit_edge ], [ %1641, %1168 ], !dbg !43
  %1678 = phi float [ %1154, %._crit_edge._crit_edge ], [ %1634, %1168 ], !dbg !43
  %1679 = phi float [ %1153, %._crit_edge._crit_edge ], [ %1633, %1168 ], !dbg !43
  %1680 = phi float [ %1152, %._crit_edge._crit_edge ], [ %1632, %1168 ], !dbg !43
  %1681 = phi float [ %1151, %._crit_edge._crit_edge ], [ %1631, %1168 ], !dbg !43
  %1682 = phi float [ %1150, %._crit_edge._crit_edge ], [ %1624, %1168 ], !dbg !43
  %1683 = phi float [ %1149, %._crit_edge._crit_edge ], [ %1623, %1168 ], !dbg !43
  %1684 = phi float [ %1148, %._crit_edge._crit_edge ], [ %1622, %1168 ], !dbg !43
  %1685 = phi float [ %1147, %._crit_edge._crit_edge ], [ %1621, %1168 ], !dbg !43
  %1686 = phi float [ %1146, %._crit_edge._crit_edge ], [ %1614, %1168 ], !dbg !43
  %1687 = phi float [ %1145, %._crit_edge._crit_edge ], [ %1613, %1168 ], !dbg !43
  %1688 = phi float [ %1144, %._crit_edge._crit_edge ], [ %1612, %1168 ], !dbg !43
  %1689 = phi float [ %1143, %._crit_edge._crit_edge ], [ %1611, %1168 ], !dbg !43
  %1690 = phi float [ %1142, %._crit_edge._crit_edge ], [ %1604, %1168 ], !dbg !43
  %1691 = phi float [ %1141, %._crit_edge._crit_edge ], [ %1603, %1168 ], !dbg !43
  %1692 = phi float [ %1140, %._crit_edge._crit_edge ], [ %1602, %1168 ], !dbg !43
  %1693 = phi float [ %1139, %._crit_edge._crit_edge ], [ %1601, %1168 ], !dbg !43
  %1694 = phi float [ %1138, %._crit_edge._crit_edge ], [ %1594, %1168 ], !dbg !43
  %1695 = phi float [ %1137, %._crit_edge._crit_edge ], [ %1593, %1168 ], !dbg !43
  %1696 = phi float [ %1136, %._crit_edge._crit_edge ], [ %1592, %1168 ], !dbg !43
  %1697 = phi float [ %1135, %._crit_edge._crit_edge ], [ %1591, %1168 ], !dbg !43
  %1698 = phi float [ %1134, %._crit_edge._crit_edge ], [ %1584, %1168 ], !dbg !43
  %1699 = phi float [ %1133, %._crit_edge._crit_edge ], [ %1583, %1168 ], !dbg !43
  %1700 = phi float [ %1132, %._crit_edge._crit_edge ], [ %1582, %1168 ], !dbg !43
  %1701 = phi float [ %1131, %._crit_edge._crit_edge ], [ %1581, %1168 ], !dbg !43
  %1702 = phi float [ %1130, %._crit_edge._crit_edge ], [ %1574, %1168 ], !dbg !43
  %1703 = phi float [ %1129, %._crit_edge._crit_edge ], [ %1573, %1168 ], !dbg !43
  %1704 = phi float [ %1128, %._crit_edge._crit_edge ], [ %1572, %1168 ], !dbg !43
  %1705 = phi float [ %1127, %._crit_edge._crit_edge ], [ %1571, %1168 ], !dbg !43
  %1706 = phi float [ %1126, %._crit_edge._crit_edge ], [ %1564, %1168 ], !dbg !43
  %1707 = phi float [ %1125, %._crit_edge._crit_edge ], [ %1563, %1168 ], !dbg !43
  %1708 = phi float [ %1124, %._crit_edge._crit_edge ], [ %1562, %1168 ], !dbg !43
  %1709 = phi float [ %1123, %._crit_edge._crit_edge ], [ %1561, %1168 ], !dbg !43
  %1710 = phi float [ %1122, %._crit_edge._crit_edge ], [ %1554, %1168 ], !dbg !43
  %1711 = phi float [ %1121, %._crit_edge._crit_edge ], [ %1553, %1168 ], !dbg !43
  %1712 = phi float [ %1120, %._crit_edge._crit_edge ], [ %1552, %1168 ], !dbg !43
  %1713 = phi float [ %1119, %._crit_edge._crit_edge ], [ %1551, %1168 ], !dbg !43
  %1714 = phi float [ %1118, %._crit_edge._crit_edge ], [ %1544, %1168 ], !dbg !43
  %1715 = phi float [ %1117, %._crit_edge._crit_edge ], [ %1543, %1168 ], !dbg !43
  %1716 = phi float [ %1116, %._crit_edge._crit_edge ], [ %1542, %1168 ], !dbg !43
  %1717 = phi float [ %1115, %._crit_edge._crit_edge ], [ %1541, %1168 ], !dbg !43
  %1718 = phi float [ %1114, %._crit_edge._crit_edge ], [ %1534, %1168 ], !dbg !43
  %1719 = phi float [ %1113, %._crit_edge._crit_edge ], [ %1533, %1168 ], !dbg !43
  %1720 = phi float [ %1112, %._crit_edge._crit_edge ], [ %1532, %1168 ], !dbg !43
  %1721 = phi float [ %1111, %._crit_edge._crit_edge ], [ %1531, %1168 ], !dbg !43
  %1722 = phi float [ %1110, %._crit_edge._crit_edge ], [ %1524, %1168 ], !dbg !43
  %1723 = phi float [ %1109, %._crit_edge._crit_edge ], [ %1523, %1168 ], !dbg !43
  %1724 = phi float [ %1108, %._crit_edge._crit_edge ], [ %1522, %1168 ], !dbg !43
  %1725 = phi float [ %1107, %._crit_edge._crit_edge ], [ %1521, %1168 ], !dbg !43
  %1726 = phi float [ %1106, %._crit_edge._crit_edge ], [ %1514, %1168 ], !dbg !43
  %1727 = phi float [ %1105, %._crit_edge._crit_edge ], [ %1513, %1168 ], !dbg !43
  %1728 = phi float [ %1104, %._crit_edge._crit_edge ], [ %1512, %1168 ], !dbg !43
  %1729 = phi float [ %1103, %._crit_edge._crit_edge ], [ %1511, %1168 ], !dbg !43
  %1730 = phi float [ %1102, %._crit_edge._crit_edge ], [ %1504, %1168 ], !dbg !43
  %1731 = phi float [ %1101, %._crit_edge._crit_edge ], [ %1503, %1168 ], !dbg !43
  %1732 = phi float [ %1100, %._crit_edge._crit_edge ], [ %1502, %1168 ], !dbg !43
  %1733 = phi float [ %1099, %._crit_edge._crit_edge ], [ %1501, %1168 ], !dbg !43
  %1734 = phi float [ %1098, %._crit_edge._crit_edge ], [ %1494, %1168 ], !dbg !43
  %1735 = phi float [ %1097, %._crit_edge._crit_edge ], [ %1493, %1168 ], !dbg !43
  %1736 = phi float [ %1096, %._crit_edge._crit_edge ], [ %1492, %1168 ], !dbg !43
  %1737 = phi float [ %1095, %._crit_edge._crit_edge ], [ %1491, %1168 ], !dbg !43
  %1738 = phi float [ %1094, %._crit_edge._crit_edge ], [ %1484, %1168 ], !dbg !43
  %1739 = phi float [ %1093, %._crit_edge._crit_edge ], [ %1483, %1168 ], !dbg !43
  %1740 = phi float [ %1092, %._crit_edge._crit_edge ], [ %1482, %1168 ], !dbg !43
  %1741 = phi float [ %1091, %._crit_edge._crit_edge ], [ %1481, %1168 ], !dbg !43
  %1742 = phi float [ %1090, %._crit_edge._crit_edge ], [ %1474, %1168 ], !dbg !43
  %1743 = phi float [ %1089, %._crit_edge._crit_edge ], [ %1473, %1168 ], !dbg !43
  %1744 = phi float [ %1088, %._crit_edge._crit_edge ], [ %1472, %1168 ], !dbg !43
  %1745 = phi float [ %1087, %._crit_edge._crit_edge ], [ %1471, %1168 ], !dbg !43
  %1746 = phi float [ %1086, %._crit_edge._crit_edge ], [ %1464, %1168 ], !dbg !43
  %1747 = phi float [ %1085, %._crit_edge._crit_edge ], [ %1463, %1168 ], !dbg !43
  %1748 = phi float [ %1084, %._crit_edge._crit_edge ], [ %1462, %1168 ], !dbg !43
  %1749 = phi float [ %1083, %._crit_edge._crit_edge ], [ %1461, %1168 ], !dbg !43
  %1750 = phi float [ %1082, %._crit_edge._crit_edge ], [ %1454, %1168 ], !dbg !43
  %1751 = phi float [ %1081, %._crit_edge._crit_edge ], [ %1453, %1168 ], !dbg !43
  %1752 = phi float [ %1080, %._crit_edge._crit_edge ], [ %1452, %1168 ], !dbg !43
  %1753 = phi float [ %1079, %._crit_edge._crit_edge ], [ %1451, %1168 ], !dbg !43
  %1754 = phi float [ %1078, %._crit_edge._crit_edge ], [ %1444, %1168 ], !dbg !43
  %1755 = phi float [ %1077, %._crit_edge._crit_edge ], [ %1443, %1168 ], !dbg !43
  %1756 = phi float [ %1076, %._crit_edge._crit_edge ], [ %1442, %1168 ], !dbg !43
  %1757 = phi float [ %1075, %._crit_edge._crit_edge ], [ %1441, %1168 ], !dbg !43
  %1758 = phi float [ %1074, %._crit_edge._crit_edge ], [ %1434, %1168 ], !dbg !43
  %1759 = phi float [ %1073, %._crit_edge._crit_edge ], [ %1433, %1168 ], !dbg !43
  %1760 = phi float [ %1072, %._crit_edge._crit_edge ], [ %1432, %1168 ], !dbg !43
  %1761 = phi float [ %1071, %._crit_edge._crit_edge ], [ %1431, %1168 ], !dbg !43
  %1762 = phi float [ %1070, %._crit_edge._crit_edge ], [ %1424, %1168 ], !dbg !43
  %1763 = phi float [ %1069, %._crit_edge._crit_edge ], [ %1423, %1168 ], !dbg !43
  %1764 = phi float [ %1068, %._crit_edge._crit_edge ], [ %1422, %1168 ], !dbg !43
  %1765 = phi float [ %1067, %._crit_edge._crit_edge ], [ %1421, %1168 ], !dbg !43
  %1766 = phi float [ %1066, %._crit_edge._crit_edge ], [ %1414, %1168 ], !dbg !43
  %1767 = phi float [ %1065, %._crit_edge._crit_edge ], [ %1413, %1168 ], !dbg !43
  %1768 = phi float [ %1064, %._crit_edge._crit_edge ], [ %1412, %1168 ], !dbg !43
  %1769 = phi float [ %1063, %._crit_edge._crit_edge ], [ %1411, %1168 ], !dbg !43
  %1770 = phi float [ %1062, %._crit_edge._crit_edge ], [ %1404, %1168 ], !dbg !43
  %1771 = phi float [ %1061, %._crit_edge._crit_edge ], [ %1403, %1168 ], !dbg !43
  %1772 = phi float [ %1060, %._crit_edge._crit_edge ], [ %1402, %1168 ], !dbg !43
  %1773 = phi float [ %1059, %._crit_edge._crit_edge ], [ %1401, %1168 ], !dbg !43
  %1774 = phi float [ %1058, %._crit_edge._crit_edge ], [ %1394, %1168 ], !dbg !43
  %1775 = phi float [ %1057, %._crit_edge._crit_edge ], [ %1393, %1168 ], !dbg !43
  %1776 = phi float [ %1056, %._crit_edge._crit_edge ], [ %1392, %1168 ], !dbg !43
  %1777 = phi float [ %1055, %._crit_edge._crit_edge ], [ %1391, %1168 ], !dbg !43
  %1778 = phi float [ %1054, %._crit_edge._crit_edge ], [ %1384, %1168 ], !dbg !43
  %1779 = phi float [ %1053, %._crit_edge._crit_edge ], [ %1383, %1168 ], !dbg !43
  %1780 = phi float [ %1052, %._crit_edge._crit_edge ], [ %1382, %1168 ], !dbg !43
  %1781 = phi float [ %1051, %._crit_edge._crit_edge ], [ %1381, %1168 ], !dbg !43
  %1782 = phi float [ %1050, %._crit_edge._crit_edge ], [ %1374, %1168 ], !dbg !43
  %1783 = phi float [ %1049, %._crit_edge._crit_edge ], [ %1373, %1168 ], !dbg !43
  %1784 = phi float [ %1048, %._crit_edge._crit_edge ], [ %1372, %1168 ], !dbg !43
  %1785 = phi float [ %1047, %._crit_edge._crit_edge ], [ %1371, %1168 ], !dbg !43
  %1786 = phi float [ %1046, %._crit_edge._crit_edge ], [ %1364, %1168 ], !dbg !43
  %1787 = phi float [ %1045, %._crit_edge._crit_edge ], [ %1363, %1168 ], !dbg !43
  %1788 = phi float [ %1044, %._crit_edge._crit_edge ], [ %1362, %1168 ], !dbg !43
  %1789 = phi float [ %1043, %._crit_edge._crit_edge ], [ %1361, %1168 ], !dbg !43
  %1790 = phi float [ %1042, %._crit_edge._crit_edge ], [ %1354, %1168 ], !dbg !43
  %1791 = phi float [ %1041, %._crit_edge._crit_edge ], [ %1353, %1168 ], !dbg !43
  %1792 = phi float [ %1040, %._crit_edge._crit_edge ], [ %1352, %1168 ], !dbg !43
  %1793 = phi float [ %1039, %._crit_edge._crit_edge ], [ %1351, %1168 ], !dbg !43
  %.pre-phi122 = phi i32 [ %.pre121, %._crit_edge._crit_edge ], [ %1248, %1168 ], !dbg !29
  %.pre-phi120 = phi i32 [ %.pre119, %._crit_edge._crit_edge ], [ %1236, %1168 ], !dbg !29
  %.pre-phi118 = phi i32 [ %.pre117, %._crit_edge._crit_edge ], [ %1224, %1168 ], !dbg !29
  %.pre-phi = phi i32 [ %.pre, %._crit_edge._crit_edge ], [ %1211, %1168 ], !dbg !29
  %1794 = and i32 %43, 28, !dbg !29
  %1795 = or disjoint i32 %1794, %46, !dbg !29
  %1796 = or disjoint i32 %1795, 192, !dbg !29
  %1797 = or disjoint i32 %1795, 128, !dbg !29
  %1798 = or disjoint i32 %1795, 64, !dbg !29
  %1799 = or disjoint i32 %42, 192, !dbg !29
  %1800 = or disjoint i32 %42, 128, !dbg !29
  %1801 = or disjoint i32 %42, 64, !dbg !29
  %1802 = insertelement <2 x float> poison, float %1793, i64 0, !dbg !74
  %1803 = insertelement <2 x float> %1802, float %1792, i64 1, !dbg !74
  %1804 = insertelement <2 x float> poison, float %1791, i64 0, !dbg !74
  %1805 = insertelement <2 x float> %1804, float %1790, i64 1, !dbg !74
  %1806 = insertelement <2 x float> poison, float %1789, i64 0, !dbg !74
  %1807 = insertelement <2 x float> %1806, float %1788, i64 1, !dbg !74
  %1808 = insertelement <2 x float> poison, float %1787, i64 0, !dbg !74
  %1809 = insertelement <2 x float> %1808, float %1786, i64 1, !dbg !74
  %1810 = insertelement <2 x float> poison, float %1785, i64 0, !dbg !74
  %1811 = insertelement <2 x float> %1810, float %1784, i64 1, !dbg !74
  %1812 = insertelement <2 x float> poison, float %1783, i64 0, !dbg !74
  %1813 = insertelement <2 x float> %1812, float %1782, i64 1, !dbg !74
  %1814 = insertelement <2 x float> poison, float %1781, i64 0, !dbg !74
  %1815 = insertelement <2 x float> %1814, float %1780, i64 1, !dbg !74
  %1816 = insertelement <2 x float> poison, float %1779, i64 0, !dbg !74
  %1817 = insertelement <2 x float> %1816, float %1778, i64 1, !dbg !74
  %1818 = insertelement <2 x float> poison, float %1777, i64 0, !dbg !74
  %1819 = insertelement <2 x float> %1818, float %1776, i64 1, !dbg !74
  %1820 = insertelement <2 x float> poison, float %1775, i64 0, !dbg !74
  %1821 = insertelement <2 x float> %1820, float %1774, i64 1, !dbg !74
  %1822 = insertelement <2 x float> poison, float %1773, i64 0, !dbg !74
  %1823 = insertelement <2 x float> %1822, float %1772, i64 1, !dbg !74
  %1824 = insertelement <2 x float> poison, float %1771, i64 0, !dbg !74
  %1825 = insertelement <2 x float> %1824, float %1770, i64 1, !dbg !74
  %1826 = insertelement <2 x float> poison, float %1769, i64 0, !dbg !74
  %1827 = insertelement <2 x float> %1826, float %1768, i64 1, !dbg !74
  %1828 = insertelement <2 x float> poison, float %1767, i64 0, !dbg !74
  %1829 = insertelement <2 x float> %1828, float %1766, i64 1, !dbg !74
  %1830 = insertelement <2 x float> poison, float %1765, i64 0, !dbg !74
  %1831 = insertelement <2 x float> %1830, float %1764, i64 1, !dbg !74
  %1832 = insertelement <2 x float> poison, float %1763, i64 0, !dbg !74
  %1833 = insertelement <2 x float> %1832, float %1762, i64 1, !dbg !74
  %1834 = insertelement <2 x float> poison, float %1761, i64 0, !dbg !74
  %1835 = insertelement <2 x float> %1834, float %1760, i64 1, !dbg !74
  %1836 = insertelement <2 x float> poison, float %1759, i64 0, !dbg !74
  %1837 = insertelement <2 x float> %1836, float %1758, i64 1, !dbg !74
  %1838 = insertelement <2 x float> poison, float %1757, i64 0, !dbg !74
  %1839 = insertelement <2 x float> %1838, float %1756, i64 1, !dbg !74
  %1840 = insertelement <2 x float> poison, float %1755, i64 0, !dbg !74
  %1841 = insertelement <2 x float> %1840, float %1754, i64 1, !dbg !74
  %1842 = insertelement <2 x float> poison, float %1753, i64 0, !dbg !74
  %1843 = insertelement <2 x float> %1842, float %1752, i64 1, !dbg !74
  %1844 = insertelement <2 x float> poison, float %1751, i64 0, !dbg !74
  %1845 = insertelement <2 x float> %1844, float %1750, i64 1, !dbg !74
  %1846 = insertelement <2 x float> poison, float %1749, i64 0, !dbg !74
  %1847 = insertelement <2 x float> %1846, float %1748, i64 1, !dbg !74
  %1848 = insertelement <2 x float> poison, float %1747, i64 0, !dbg !74
  %1849 = insertelement <2 x float> %1848, float %1746, i64 1, !dbg !74
  %1850 = insertelement <2 x float> poison, float %1745, i64 0, !dbg !74
  %1851 = insertelement <2 x float> %1850, float %1744, i64 1, !dbg !74
  %1852 = insertelement <2 x float> poison, float %1743, i64 0, !dbg !74
  %1853 = insertelement <2 x float> %1852, float %1742, i64 1, !dbg !74
  %1854 = insertelement <2 x float> poison, float %1741, i64 0, !dbg !74
  %1855 = insertelement <2 x float> %1854, float %1740, i64 1, !dbg !74
  %1856 = insertelement <2 x float> poison, float %1739, i64 0, !dbg !74
  %1857 = insertelement <2 x float> %1856, float %1738, i64 1, !dbg !74
  %1858 = insertelement <2 x float> poison, float %1737, i64 0, !dbg !74
  %1859 = insertelement <2 x float> %1858, float %1736, i64 1, !dbg !74
  %1860 = insertelement <2 x float> poison, float %1735, i64 0, !dbg !74
  %1861 = insertelement <2 x float> %1860, float %1734, i64 1, !dbg !74
  %1862 = insertelement <2 x float> poison, float %1733, i64 0, !dbg !74
  %1863 = insertelement <2 x float> %1862, float %1732, i64 1, !dbg !74
  %1864 = insertelement <2 x float> poison, float %1731, i64 0, !dbg !74
  %1865 = insertelement <2 x float> %1864, float %1730, i64 1, !dbg !74
  %1866 = insertelement <2 x float> poison, float %1729, i64 0, !dbg !74
  %1867 = insertelement <2 x float> %1866, float %1728, i64 1, !dbg !74
  %1868 = insertelement <2 x float> poison, float %1727, i64 0, !dbg !74
  %1869 = insertelement <2 x float> %1868, float %1726, i64 1, !dbg !74
  %1870 = insertelement <2 x float> poison, float %1725, i64 0, !dbg !74
  %1871 = insertelement <2 x float> %1870, float %1724, i64 1, !dbg !74
  %1872 = insertelement <2 x float> poison, float %1723, i64 0, !dbg !74
  %1873 = insertelement <2 x float> %1872, float %1722, i64 1, !dbg !74
  %1874 = insertelement <2 x float> poison, float %1721, i64 0, !dbg !74
  %1875 = insertelement <2 x float> %1874, float %1720, i64 1, !dbg !74
  %1876 = insertelement <2 x float> poison, float %1719, i64 0, !dbg !74
  %1877 = insertelement <2 x float> %1876, float %1718, i64 1, !dbg !74
  %1878 = insertelement <2 x float> poison, float %1717, i64 0, !dbg !74
  %1879 = insertelement <2 x float> %1878, float %1716, i64 1, !dbg !74
  %1880 = insertelement <2 x float> poison, float %1715, i64 0, !dbg !74
  %1881 = insertelement <2 x float> %1880, float %1714, i64 1, !dbg !74
  %1882 = insertelement <2 x float> poison, float %1713, i64 0, !dbg !74
  %1883 = insertelement <2 x float> %1882, float %1712, i64 1, !dbg !74
  %1884 = insertelement <2 x float> poison, float %1711, i64 0, !dbg !74
  %1885 = insertelement <2 x float> %1884, float %1710, i64 1, !dbg !74
  %1886 = insertelement <2 x float> poison, float %1709, i64 0, !dbg !74
  %1887 = insertelement <2 x float> %1886, float %1708, i64 1, !dbg !74
  %1888 = insertelement <2 x float> poison, float %1707, i64 0, !dbg !74
  %1889 = insertelement <2 x float> %1888, float %1706, i64 1, !dbg !74
  %1890 = insertelement <2 x float> poison, float %1705, i64 0, !dbg !74
  %1891 = insertelement <2 x float> %1890, float %1704, i64 1, !dbg !74
  %1892 = insertelement <2 x float> poison, float %1703, i64 0, !dbg !74
  %1893 = insertelement <2 x float> %1892, float %1702, i64 1, !dbg !74
  %1894 = insertelement <2 x float> poison, float %1701, i64 0, !dbg !74
  %1895 = insertelement <2 x float> %1894, float %1700, i64 1, !dbg !74
  %1896 = insertelement <2 x float> poison, float %1699, i64 0, !dbg !74
  %1897 = insertelement <2 x float> %1896, float %1698, i64 1, !dbg !74
  %1898 = insertelement <2 x float> poison, float %1697, i64 0, !dbg !74
  %1899 = insertelement <2 x float> %1898, float %1696, i64 1, !dbg !74
  %1900 = insertelement <2 x float> poison, float %1695, i64 0, !dbg !74
  %1901 = insertelement <2 x float> %1900, float %1694, i64 1, !dbg !74
  %1902 = insertelement <2 x float> poison, float %1693, i64 0, !dbg !74
  %1903 = insertelement <2 x float> %1902, float %1692, i64 1, !dbg !74
  %1904 = insertelement <2 x float> poison, float %1691, i64 0, !dbg !74
  %1905 = insertelement <2 x float> %1904, float %1690, i64 1, !dbg !74
  %1906 = insertelement <2 x float> poison, float %1689, i64 0, !dbg !74
  %1907 = insertelement <2 x float> %1906, float %1688, i64 1, !dbg !74
  %1908 = insertelement <2 x float> poison, float %1687, i64 0, !dbg !74
  %1909 = insertelement <2 x float> %1908, float %1686, i64 1, !dbg !74
  %1910 = insertelement <2 x float> poison, float %1685, i64 0, !dbg !74
  %1911 = insertelement <2 x float> %1910, float %1684, i64 1, !dbg !74
  %1912 = insertelement <2 x float> poison, float %1683, i64 0, !dbg !74
  %1913 = insertelement <2 x float> %1912, float %1682, i64 1, !dbg !74
  %1914 = insertelement <2 x float> poison, float %1681, i64 0, !dbg !74
  %1915 = insertelement <2 x float> %1914, float %1680, i64 1, !dbg !74
  %1916 = insertelement <2 x float> poison, float %1679, i64 0, !dbg !74
  %1917 = insertelement <2 x float> %1916, float %1678, i64 1, !dbg !74
  %1918 = insertelement <2 x float> poison, float %1677, i64 0, !dbg !74
  %1919 = insertelement <2 x float> %1918, float %1676, i64 1, !dbg !74
  %1920 = insertelement <2 x float> poison, float %1675, i64 0, !dbg !74
  %1921 = insertelement <2 x float> %1920, float %1674, i64 1, !dbg !74
  %1922 = insertelement <2 x float> poison, float %1673, i64 0, !dbg !74
  %1923 = insertelement <2 x float> %1922, float %1672, i64 1, !dbg !74
  %1924 = insertelement <2 x float> poison, float %1671, i64 0, !dbg !74
  %1925 = insertelement <2 x float> %1924, float %1670, i64 1, !dbg !74
  %1926 = insertelement <2 x float> poison, float %1669, i64 0, !dbg !74
  %1927 = insertelement <2 x float> %1926, float %1668, i64 1, !dbg !74
  %1928 = insertelement <2 x float> poison, float %1667, i64 0, !dbg !74
  %1929 = insertelement <2 x float> %1928, float %1666, i64 1, !dbg !74
  %1930 = zext nneg i32 %42 to i64, !dbg !75
  %1931 = zext nneg i32 %.pre-phi122 to i64, !dbg !75
  %1932 = zext nneg i32 %1801 to i64, !dbg !75
  %1933 = zext nneg i32 %.pre-phi120 to i64, !dbg !75
  %1934 = zext nneg i32 %1800 to i64, !dbg !75
  %1935 = zext nneg i32 %.pre-phi118 to i64, !dbg !75
  %1936 = zext nneg i32 %1799 to i64, !dbg !75
  %1937 = zext nneg i32 %.pre-phi to i64, !dbg !75
  %1938 = zext nneg i32 %1795 to i64, !dbg !75
  %1939 = zext nneg i32 %1798 to i64, !dbg !75
  %1940 = zext nneg i32 %1797 to i64, !dbg !75
  %1941 = zext nneg i32 %1796 to i64, !dbg !75
  %1942 = sext i32 %29 to i64, !dbg !76
  %1943 = or disjoint i64 %1942, %1930, !dbg !76
  %1944 = or disjoint i64 %1942, %1931, !dbg !76
  %1945 = or disjoint i64 %1942, %1932, !dbg !76
  %1946 = or disjoint i64 %1942, %1933, !dbg !76
  %1947 = or disjoint i64 %1942, %1934, !dbg !76
  %1948 = or disjoint i64 %1942, %1935, !dbg !76
  %1949 = or disjoint i64 %1942, %1936, !dbg !76
  %1950 = or disjoint i64 %1942, %1937, !dbg !76
  %1951 = sext i32 %57 to i64, !dbg !77
  %1952 = or disjoint i64 %1951, %1938, !dbg !77
  %1953 = or disjoint i64 %1951, %1939, !dbg !77
  %1954 = or disjoint i64 %1951, %1940, !dbg !77
  %1955 = or disjoint i64 %1951, %1941, !dbg !77
  %1956 = sext i32 %10 to i64, !dbg !78
  %1957 = mul nsw i64 %1942, %1956, !dbg !79
  %1958 = mul i32 %10, %42, !dbg !79
  %1959 = mul i32 %10, %.pre-phi122, !dbg !79
  %1960 = mul i32 %10, %1801, !dbg !79
  %1961 = mul i32 %10, %.pre-phi120, !dbg !79
  %1962 = mul i32 %10, %1800, !dbg !79
  %1963 = mul i32 %10, %.pre-phi118, !dbg !79
  %1964 = mul i32 %10, %1799, !dbg !79
  %1965 = mul i32 %10, %.pre-phi, !dbg !79
  %1966 = getelementptr bfloat, ptr addrspace(1) %2, i64 %1957, !dbg !79
  %1967 = getelementptr bfloat, ptr addrspace(1) %1966, i64 %1951, !dbg !80
  %1968 = add i32 %1958, %1795, !dbg !80
  %1969 = add i32 %1958, %1798, !dbg !80
  %1970 = add i32 %1958, %1797, !dbg !80
  %1971 = add i32 %1958, %1796, !dbg !80
  %1972 = add i32 %1959, %1795, !dbg !80
  %1973 = add i32 %1959, %1798, !dbg !80
  %1974 = add i32 %1959, %1797, !dbg !80
  %1975 = add i32 %1959, %1796, !dbg !80
  %1976 = add i32 %1960, %1795, !dbg !80
  %1977 = add i32 %1960, %1798, !dbg !80
  %1978 = add i32 %1960, %1797, !dbg !80
  %1979 = add i32 %1960, %1796, !dbg !80
  %1980 = add i32 %1961, %1795, !dbg !80
  %1981 = add i32 %1961, %1798, !dbg !80
  %1982 = add i32 %1961, %1797, !dbg !80
  %1983 = add i32 %1961, %1796, !dbg !80
  %1984 = add i32 %1962, %1795, !dbg !80
  %1985 = add i32 %1962, %1798, !dbg !80
  %1986 = add i32 %1962, %1797, !dbg !80
  %1987 = add i32 %1962, %1796, !dbg !80
  %1988 = add i32 %1963, %1795, !dbg !80
  %1989 = add i32 %1963, %1798, !dbg !80
  %1990 = add i32 %1963, %1797, !dbg !80
  %1991 = add i32 %1963, %1796, !dbg !80
  %1992 = add i32 %1964, %1795, !dbg !80
  %1993 = add i32 %1964, %1798, !dbg !80
  %1994 = add i32 %1964, %1797, !dbg !80
  %1995 = add i32 %1964, %1796, !dbg !80
  %1996 = add i32 %1965, %1795, !dbg !80
  %1997 = add i32 %1965, %1798, !dbg !80
  %1998 = add i32 %1965, %1797, !dbg !80
  %1999 = add i32 %1965, %1796, !dbg !80
  %2000 = sext i32 %5 to i64, !dbg !81
  %2001 = icmp slt i64 %1943, %2000, !dbg !81
  %2002 = icmp slt i64 %1944, %2000, !dbg !81
  %2003 = icmp slt i64 %1945, %2000, !dbg !81
  %2004 = icmp slt i64 %1946, %2000, !dbg !81
  %2005 = icmp slt i64 %1947, %2000, !dbg !81
  %2006 = icmp slt i64 %1948, %2000, !dbg !81
  %2007 = icmp slt i64 %1949, %2000, !dbg !81
  %2008 = icmp slt i64 %1950, %2000, !dbg !81
  %2009 = sext i32 %6 to i64, !dbg !82
  %2010 = icmp slt i64 %1952, %2009, !dbg !82
  %2011 = icmp slt i64 %1953, %2009, !dbg !82
  %2012 = icmp slt i64 %1954, %2009, !dbg !82
  %2013 = icmp slt i64 %1955, %2009, !dbg !82
  %2014 = and i1 %2001, %2010, !dbg !83
  %2015 = and i1 %2001, %2011, !dbg !83
  %2016 = and i1 %2001, %2012, !dbg !83
  %2017 = and i1 %2001, %2013, !dbg !83
  %2018 = and i1 %2002, %2010, !dbg !83
  %2019 = and i1 %2002, %2011, !dbg !83
  %2020 = and i1 %2002, %2012, !dbg !83
  %2021 = and i1 %2002, %2013, !dbg !83
  %2022 = and i1 %2003, %2010, !dbg !83
  %2023 = and i1 %2003, %2011, !dbg !83
  %2024 = and i1 %2003, %2012, !dbg !83
  %2025 = and i1 %2003, %2013, !dbg !83
  %2026 = and i1 %2004, %2010, !dbg !83
  %2027 = and i1 %2004, %2011, !dbg !83
  %2028 = and i1 %2004, %2012, !dbg !83
  %2029 = and i1 %2004, %2013, !dbg !83
  %2030 = and i1 %2005, %2010, !dbg !83
  %2031 = and i1 %2005, %2011, !dbg !83
  %2032 = and i1 %2005, %2012, !dbg !83
  %2033 = and i1 %2005, %2013, !dbg !83
  %2034 = and i1 %2006, %2010, !dbg !83
  %2035 = and i1 %2006, %2011, !dbg !83
  %2036 = and i1 %2006, %2012, !dbg !83
  %2037 = and i1 %2006, %2013, !dbg !83
  %2038 = and i1 %2007, %2010, !dbg !83
  %2039 = and i1 %2007, %2011, !dbg !83
  %2040 = and i1 %2007, %2012, !dbg !83
  %2041 = and i1 %2007, %2013, !dbg !83
  %2042 = and i1 %2008, %2010, !dbg !83
  %2043 = and i1 %2008, %2011, !dbg !83
  %2044 = and i1 %2008, %2012, !dbg !83
  %2045 = and i1 %2008, %2013, !dbg !83
  %2046 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1967, i16 0, i32 2147483646, i32 159744), !dbg !84
  %2047 = shufflevector <2 x float> %1803, <2 x float> %1805, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2048 = fptrunc <4 x float> %2047 to <4 x bfloat>, !dbg !84
  %2049 = bitcast <4 x bfloat> %2048 to <2 x i32>, !dbg !84
  %2050 = shl i32 %1968, 1, !dbg !84
  %2051 = select i1 %2014, i32 %2050, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2049, ptr addrspace(8) %2046, i32 %2051, i32 0, i32 0), !dbg !84
  %2052 = shufflevector <2 x float> %1807, <2 x float> %1809, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2053 = fptrunc <4 x float> %2052 to <4 x bfloat>, !dbg !84
  %2054 = bitcast <4 x bfloat> %2053 to <2 x i32>, !dbg !84
  %2055 = shl i32 %1969, 1, !dbg !84
  %2056 = select i1 %2015, i32 %2055, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2054, ptr addrspace(8) %2046, i32 %2056, i32 0, i32 0), !dbg !84
  %2057 = shufflevector <2 x float> %1811, <2 x float> %1813, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2058 = fptrunc <4 x float> %2057 to <4 x bfloat>, !dbg !84
  %2059 = bitcast <4 x bfloat> %2058 to <2 x i32>, !dbg !84
  %2060 = shl i32 %1970, 1, !dbg !84
  %2061 = select i1 %2016, i32 %2060, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2059, ptr addrspace(8) %2046, i32 %2061, i32 0, i32 0), !dbg !84
  %2062 = shufflevector <2 x float> %1815, <2 x float> %1817, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2063 = fptrunc <4 x float> %2062 to <4 x bfloat>, !dbg !84
  %2064 = bitcast <4 x bfloat> %2063 to <2 x i32>, !dbg !84
  %2065 = shl i32 %1971, 1, !dbg !84
  %2066 = select i1 %2017, i32 %2065, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2064, ptr addrspace(8) %2046, i32 %2066, i32 0, i32 0), !dbg !84
  %2067 = shufflevector <2 x float> %1819, <2 x float> %1821, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2068 = fptrunc <4 x float> %2067 to <4 x bfloat>, !dbg !84
  %2069 = bitcast <4 x bfloat> %2068 to <2 x i32>, !dbg !84
  %2070 = shl i32 %1972, 1, !dbg !84
  %2071 = select i1 %2018, i32 %2070, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2069, ptr addrspace(8) %2046, i32 %2071, i32 0, i32 0), !dbg !84
  %2072 = shufflevector <2 x float> %1823, <2 x float> %1825, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2073 = fptrunc <4 x float> %2072 to <4 x bfloat>, !dbg !84
  %2074 = bitcast <4 x bfloat> %2073 to <2 x i32>, !dbg !84
  %2075 = shl i32 %1973, 1, !dbg !84
  %2076 = select i1 %2019, i32 %2075, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2074, ptr addrspace(8) %2046, i32 %2076, i32 0, i32 0), !dbg !84
  %2077 = shufflevector <2 x float> %1827, <2 x float> %1829, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2078 = fptrunc <4 x float> %2077 to <4 x bfloat>, !dbg !84
  %2079 = bitcast <4 x bfloat> %2078 to <2 x i32>, !dbg !84
  %2080 = shl i32 %1974, 1, !dbg !84
  %2081 = select i1 %2020, i32 %2080, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2079, ptr addrspace(8) %2046, i32 %2081, i32 0, i32 0), !dbg !84
  %2082 = shufflevector <2 x float> %1831, <2 x float> %1833, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2083 = fptrunc <4 x float> %2082 to <4 x bfloat>, !dbg !84
  %2084 = bitcast <4 x bfloat> %2083 to <2 x i32>, !dbg !84
  %2085 = shl i32 %1975, 1, !dbg !84
  %2086 = select i1 %2021, i32 %2085, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2084, ptr addrspace(8) %2046, i32 %2086, i32 0, i32 0), !dbg !84
  %2087 = shufflevector <2 x float> %1835, <2 x float> %1837, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2088 = fptrunc <4 x float> %2087 to <4 x bfloat>, !dbg !84
  %2089 = bitcast <4 x bfloat> %2088 to <2 x i32>, !dbg !84
  %2090 = shl i32 %1976, 1, !dbg !84
  %2091 = select i1 %2022, i32 %2090, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2089, ptr addrspace(8) %2046, i32 %2091, i32 0, i32 0), !dbg !84
  %2092 = shufflevector <2 x float> %1839, <2 x float> %1841, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2093 = fptrunc <4 x float> %2092 to <4 x bfloat>, !dbg !84
  %2094 = bitcast <4 x bfloat> %2093 to <2 x i32>, !dbg !84
  %2095 = shl i32 %1977, 1, !dbg !84
  %2096 = select i1 %2023, i32 %2095, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2094, ptr addrspace(8) %2046, i32 %2096, i32 0, i32 0), !dbg !84
  %2097 = shufflevector <2 x float> %1843, <2 x float> %1845, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2098 = fptrunc <4 x float> %2097 to <4 x bfloat>, !dbg !84
  %2099 = bitcast <4 x bfloat> %2098 to <2 x i32>, !dbg !84
  %2100 = shl i32 %1978, 1, !dbg !84
  %2101 = select i1 %2024, i32 %2100, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2099, ptr addrspace(8) %2046, i32 %2101, i32 0, i32 0), !dbg !84
  %2102 = shufflevector <2 x float> %1847, <2 x float> %1849, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2103 = fptrunc <4 x float> %2102 to <4 x bfloat>, !dbg !84
  %2104 = bitcast <4 x bfloat> %2103 to <2 x i32>, !dbg !84
  %2105 = shl i32 %1979, 1, !dbg !84
  %2106 = select i1 %2025, i32 %2105, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2104, ptr addrspace(8) %2046, i32 %2106, i32 0, i32 0), !dbg !84
  %2107 = shufflevector <2 x float> %1851, <2 x float> %1853, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2108 = fptrunc <4 x float> %2107 to <4 x bfloat>, !dbg !84
  %2109 = bitcast <4 x bfloat> %2108 to <2 x i32>, !dbg !84
  %2110 = shl i32 %1980, 1, !dbg !84
  %2111 = select i1 %2026, i32 %2110, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2109, ptr addrspace(8) %2046, i32 %2111, i32 0, i32 0), !dbg !84
  %2112 = shufflevector <2 x float> %1855, <2 x float> %1857, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2113 = fptrunc <4 x float> %2112 to <4 x bfloat>, !dbg !84
  %2114 = bitcast <4 x bfloat> %2113 to <2 x i32>, !dbg !84
  %2115 = shl i32 %1981, 1, !dbg !84
  %2116 = select i1 %2027, i32 %2115, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2114, ptr addrspace(8) %2046, i32 %2116, i32 0, i32 0), !dbg !84
  %2117 = shufflevector <2 x float> %1859, <2 x float> %1861, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2118 = fptrunc <4 x float> %2117 to <4 x bfloat>, !dbg !84
  %2119 = bitcast <4 x bfloat> %2118 to <2 x i32>, !dbg !84
  %2120 = shl i32 %1982, 1, !dbg !84
  %2121 = select i1 %2028, i32 %2120, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2119, ptr addrspace(8) %2046, i32 %2121, i32 0, i32 0), !dbg !84
  %2122 = shufflevector <2 x float> %1863, <2 x float> %1865, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2123 = fptrunc <4 x float> %2122 to <4 x bfloat>, !dbg !84
  %2124 = bitcast <4 x bfloat> %2123 to <2 x i32>, !dbg !84
  %2125 = shl i32 %1983, 1, !dbg !84
  %2126 = select i1 %2029, i32 %2125, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2124, ptr addrspace(8) %2046, i32 %2126, i32 0, i32 0), !dbg !84
  %2127 = shufflevector <2 x float> %1867, <2 x float> %1869, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2128 = fptrunc <4 x float> %2127 to <4 x bfloat>, !dbg !84
  %2129 = bitcast <4 x bfloat> %2128 to <2 x i32>, !dbg !84
  %2130 = shl i32 %1984, 1, !dbg !84
  %2131 = select i1 %2030, i32 %2130, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2129, ptr addrspace(8) %2046, i32 %2131, i32 0, i32 0), !dbg !84
  %2132 = shufflevector <2 x float> %1871, <2 x float> %1873, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2133 = fptrunc <4 x float> %2132 to <4 x bfloat>, !dbg !84
  %2134 = bitcast <4 x bfloat> %2133 to <2 x i32>, !dbg !84
  %2135 = shl i32 %1985, 1, !dbg !84
  %2136 = select i1 %2031, i32 %2135, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2134, ptr addrspace(8) %2046, i32 %2136, i32 0, i32 0), !dbg !84
  %2137 = shufflevector <2 x float> %1875, <2 x float> %1877, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2138 = fptrunc <4 x float> %2137 to <4 x bfloat>, !dbg !84
  %2139 = bitcast <4 x bfloat> %2138 to <2 x i32>, !dbg !84
  %2140 = shl i32 %1986, 1, !dbg !84
  %2141 = select i1 %2032, i32 %2140, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2139, ptr addrspace(8) %2046, i32 %2141, i32 0, i32 0), !dbg !84
  %2142 = shufflevector <2 x float> %1879, <2 x float> %1881, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2143 = fptrunc <4 x float> %2142 to <4 x bfloat>, !dbg !84
  %2144 = bitcast <4 x bfloat> %2143 to <2 x i32>, !dbg !84
  %2145 = shl i32 %1987, 1, !dbg !84
  %2146 = select i1 %2033, i32 %2145, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2144, ptr addrspace(8) %2046, i32 %2146, i32 0, i32 0), !dbg !84
  %2147 = shufflevector <2 x float> %1883, <2 x float> %1885, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2148 = fptrunc <4 x float> %2147 to <4 x bfloat>, !dbg !84
  %2149 = bitcast <4 x bfloat> %2148 to <2 x i32>, !dbg !84
  %2150 = shl i32 %1988, 1, !dbg !84
  %2151 = select i1 %2034, i32 %2150, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2149, ptr addrspace(8) %2046, i32 %2151, i32 0, i32 0), !dbg !84
  %2152 = shufflevector <2 x float> %1887, <2 x float> %1889, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2153 = fptrunc <4 x float> %2152 to <4 x bfloat>, !dbg !84
  %2154 = bitcast <4 x bfloat> %2153 to <2 x i32>, !dbg !84
  %2155 = shl i32 %1989, 1, !dbg !84
  %2156 = select i1 %2035, i32 %2155, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2154, ptr addrspace(8) %2046, i32 %2156, i32 0, i32 0), !dbg !84
  %2157 = shufflevector <2 x float> %1891, <2 x float> %1893, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2158 = fptrunc <4 x float> %2157 to <4 x bfloat>, !dbg !84
  %2159 = bitcast <4 x bfloat> %2158 to <2 x i32>, !dbg !84
  %2160 = shl i32 %1990, 1, !dbg !84
  %2161 = select i1 %2036, i32 %2160, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2159, ptr addrspace(8) %2046, i32 %2161, i32 0, i32 0), !dbg !84
  %2162 = shufflevector <2 x float> %1895, <2 x float> %1897, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2163 = fptrunc <4 x float> %2162 to <4 x bfloat>, !dbg !84
  %2164 = bitcast <4 x bfloat> %2163 to <2 x i32>, !dbg !84
  %2165 = shl i32 %1991, 1, !dbg !84
  %2166 = select i1 %2037, i32 %2165, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2164, ptr addrspace(8) %2046, i32 %2166, i32 0, i32 0), !dbg !84
  %2167 = shufflevector <2 x float> %1899, <2 x float> %1901, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2168 = fptrunc <4 x float> %2167 to <4 x bfloat>, !dbg !84
  %2169 = bitcast <4 x bfloat> %2168 to <2 x i32>, !dbg !84
  %2170 = shl i32 %1992, 1, !dbg !84
  %2171 = select i1 %2038, i32 %2170, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2169, ptr addrspace(8) %2046, i32 %2171, i32 0, i32 0), !dbg !84
  %2172 = shufflevector <2 x float> %1903, <2 x float> %1905, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2173 = fptrunc <4 x float> %2172 to <4 x bfloat>, !dbg !84
  %2174 = bitcast <4 x bfloat> %2173 to <2 x i32>, !dbg !84
  %2175 = shl i32 %1993, 1, !dbg !84
  %2176 = select i1 %2039, i32 %2175, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2174, ptr addrspace(8) %2046, i32 %2176, i32 0, i32 0), !dbg !84
  %2177 = shufflevector <2 x float> %1907, <2 x float> %1909, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2178 = fptrunc <4 x float> %2177 to <4 x bfloat>, !dbg !84
  %2179 = bitcast <4 x bfloat> %2178 to <2 x i32>, !dbg !84
  %2180 = shl i32 %1994, 1, !dbg !84
  %2181 = select i1 %2040, i32 %2180, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2179, ptr addrspace(8) %2046, i32 %2181, i32 0, i32 0), !dbg !84
  %2182 = shufflevector <2 x float> %1911, <2 x float> %1913, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2183 = fptrunc <4 x float> %2182 to <4 x bfloat>, !dbg !84
  %2184 = bitcast <4 x bfloat> %2183 to <2 x i32>, !dbg !84
  %2185 = shl i32 %1995, 1, !dbg !84
  %2186 = select i1 %2041, i32 %2185, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2184, ptr addrspace(8) %2046, i32 %2186, i32 0, i32 0), !dbg !84
  %2187 = shufflevector <2 x float> %1915, <2 x float> %1917, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2188 = fptrunc <4 x float> %2187 to <4 x bfloat>, !dbg !84
  %2189 = bitcast <4 x bfloat> %2188 to <2 x i32>, !dbg !84
  %2190 = shl i32 %1996, 1, !dbg !84
  %2191 = select i1 %2042, i32 %2190, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2189, ptr addrspace(8) %2046, i32 %2191, i32 0, i32 0), !dbg !84
  %2192 = shufflevector <2 x float> %1919, <2 x float> %1921, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2193 = fptrunc <4 x float> %2192 to <4 x bfloat>, !dbg !84
  %2194 = bitcast <4 x bfloat> %2193 to <2 x i32>, !dbg !84
  %2195 = shl i32 %1997, 1, !dbg !84
  %2196 = select i1 %2043, i32 %2195, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2194, ptr addrspace(8) %2046, i32 %2196, i32 0, i32 0), !dbg !84
  %2197 = shufflevector <2 x float> %1923, <2 x float> %1925, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2198 = fptrunc <4 x float> %2197 to <4 x bfloat>, !dbg !84
  %2199 = bitcast <4 x bfloat> %2198 to <2 x i32>, !dbg !84
  %2200 = shl i32 %1998, 1, !dbg !84
  %2201 = select i1 %2044, i32 %2200, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2199, ptr addrspace(8) %2046, i32 %2201, i32 0, i32 0), !dbg !84
  %2202 = shufflevector <2 x float> %1927, <2 x float> %1929, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !84
  %2203 = fptrunc <4 x float> %2202 to <4 x bfloat>, !dbg !84
  %2204 = bitcast <4 x bfloat> %2203 to <2 x i32>, !dbg !84
  %2205 = shl i32 %1999, 1, !dbg !84
  %2206 = select i1 %2045, i32 %2205, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32> %2204, ptr addrspace(8) %2046, i32 %2206, i32 0, i32 0), !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.amdgcn.raw.ptr.buffer.load.lds(ptr addrspace(8) readonly captures(none), ptr addrspace(3) writeonly captures(none), i32 immarg, i32, i32, i32 immarg, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i64 @llvm.amdgcn.ballot.i64(i1) #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.waitcnt(i32 immarg) #4

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #5

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.scale.f32.16x16x128.f8f6f4.v4i32.v4i32(<4 x i32>, <4 x i32>, <4 x float>, i32 immarg, i32 immarg, i32 immarg, i32, i32 immarg, i32) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.v2i32(<2 x i32>, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #7

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.sched.barrier(i32 immarg) #5

attributes #0 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn }
attributes #5 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #6 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #7 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gemm_afp4wfp4.py", directory: "/app/aiter/aiter/ops/triton")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = distinct !DISubprogram(name: "_gemm_afp4_wfp4_kernel", linkageName: "_gemm_afp4_wfp4_kernel", scope: !1, file: !1, line: 14, type: !5, scopeLine: 14, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 61, column: 24, scope: !4)
!8 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !11)
!9 = distinct !DILexicalBlockFile(scope: !4, file: !10, discriminator: 0)
!10 = !DIFile(filename: "standard.py", directory: "/app/OAI-triton/python/triton/language")
!11 = !DILocation(line: 62, column: 27, scope: !4)
!12 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !11)
!13 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !14)
!14 = !DILocation(line: 63, column: 27, scope: !4)
!15 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !14)
!16 = !DILocation(line: 35, column: 42, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !4, file: !18, discriminator: 0)
!18 = !DIFile(filename: "pid_preprocessing.py", directory: "/app/aiter/aiter/ops/triton/utils")
!19 = !DILocation(line: 67, column: 44, scope: !4)
!20 = !DILocation(line: 36, column: 26, scope: !17, inlinedAt: !19)
!21 = !DILocation(line: 37, column: 33, scope: !17, inlinedAt: !19)
!22 = !DILocation(line: 38, column: 39, scope: !17, inlinedAt: !19)
!23 = !DILocation(line: 38, column: 52, scope: !17, inlinedAt: !19)
!24 = !DILocation(line: 39, column: 37, scope: !17, inlinedAt: !19)
!25 = !DILocation(line: 39, column: 31, scope: !17, inlinedAt: !19)
!26 = !DILocation(line: 40, column: 23, scope: !17, inlinedAt: !19)
!27 = !DILocation(line: 40, column: 44, scope: !17, inlinedAt: !19)
!28 = !DILocation(line: 77, column: 23, scope: !4)
!29 = !DILocation(line: 77, column: 51, scope: !4)
!30 = !DILocation(line: 77, column: 38, scope: !4)
!31 = !DILocation(line: 77, column: 68, scope: !4)
!32 = !DILocation(line: 78, column: 23, scope: !4)
!33 = !DILocation(line: 78, column: 38, scope: !4)
!34 = !DILocation(line: 78, column: 68, scope: !4)
!35 = !DILocation(line: 79, column: 60, scope: !4)
!36 = !DILocation(line: 79, column: 22, scope: !4)
!37 = !DILocation(line: 80, column: 22, scope: !4)
!38 = !DILocation(line: 83, column: 74, scope: !4)
!39 = !DILocation(line: 83, column: 66, scope: !4)
!40 = !DILocation(line: 85, column: 66, scope: !4)
!41 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !42)
!42 = !DILocation(line: 89, column: 33, scope: !4)
!43 = !DILocation(line: 89, column: 22, scope: !4)
!44 = !DILocation(line: 90, column: 27, scope: !4)
!45 = !{!46}
!46 = !{!"amdgpu.AsyncCopies", !47, !"Scope containing all AsyncCopyGlobalToLocal and BufferLoadToLocal ops"}
!47 = !{!"amdgpu.AsyncOps", !"Domain to hold alias scopes to specify aliasing information between AsyncCopyGlobalToLocal, BufferLoadToLocal and LocalLoad ops"}
!48 = !DILocation(line: 91, column: 27, scope: !4)
!49 = !DILocation(line: 97, column: 24, scope: !4)
!50 = !DILocation(line: 98, column: 24, scope: !4)
!51 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !42)
!52 = !DILocation(line: 109, column: 61, scope: !4)
!53 = !DILocation(line: 108, column: 61, scope: !4)
!54 = !DILocation(line: 144, column: 7, scope: !4)
!55 = !DILocation(line: 146, column: 7, scope: !4)
!56 = !DILocation(line: 106, column: 18, scope: !4)
!57 = !DILocation(line: 107, column: 18, scope: !4)
!58 = !DILocation(line: 108, column: 24, scope: !4)
!59 = !DILocation(line: 109, column: 24, scope: !4)
!60 = !{!61}
!61 = !{!"amdgpu.LocalLoads", !47, !"Scope containing all LocalLoad ops"}
!62 = !DILocation(line: 50, column: 14, scope: !4)
!63 = !DILocation(line: 177, column: 7, scope: !4)
!64 = !DILocation(line: 103, column: 71, scope: !4)
!65 = !DILocation(line: 183, column: 7, scope: !4)
!66 = !DILocation(line: 204, column: 17, scope: !4)
!67 = !DILocation(line: 207, column: 17, scope: !4)
!68 = !DILocation(line: 210, column: 7, scope: !4)
!69 = !DILocation(line: 134, column: 69, scope: !4)
!70 = !DILocation(line: 139, column: 5, scope: !4)
!71 = !DILocation(line: 139, column: 19, scope: !4)
!72 = !DILocation(line: 139, column: 33, scope: !4)
!73 = !DILocation(line: 139, column: 47, scope: !4)
!74 = !DILocation(line: 111, column: 23, scope: !4)
!75 = !DILocation(line: 114, column: 67, scope: !4)
!76 = !DILocation(line: 114, column: 37, scope: !4)
!77 = !DILocation(line: 115, column: 37, scope: !4)
!78 = !DILocation(line: 116, column: 33, scope: !4)
!79 = !DILocation(line: 116, column: 21, scope: !4)
!80 = !DILocation(line: 116, column: 52, scope: !4)
!81 = !DILocation(line: 117, column: 33, scope: !4)
!82 = !DILocation(line: 117, column: 58, scope: !4)
!83 = !DILocation(line: 117, column: 39, scope: !4)
!84 = !DILocation(line: 118, column: 21, scope: !4)
!85 = !DILocation(line: 118, column: 4, scope: !4)
