#blocked = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4, 1], threadsPerWarp = [64, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 4], [32, 0], [64, 0], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[0, 0], [0, 0], [16, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 4], [64, 0], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[16, 0], [32, 0], [0, 0]], block = []}>
#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 2, maxPhase = 8, order = [0, 1]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %0 = tt.get_program_id x : i32 loc(#loc12)
    %1 = arith.addi %arg5, %c255_i32 : i32 loc(#loc85)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc86)
    %3 = arith.addi %arg6, %c255_i32 : i32 loc(#loc87)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc88)
    %5 = arith.muli %4, %c4_i32 : i32 loc(#loc89)
    %6 = arith.divsi %0, %5 : i32 loc(#loc90)
    %7 = arith.muli %6, %c4_i32 : i32 loc(#loc91)
    %8 = arith.subi %2, %7 : i32 loc(#loc92)
    %9 = arith.minsi %8, %c4_i32 : i32 loc(#loc93)
    %10 = arith.remsi %0, %9 : i32 loc(#loc94)
    %11 = arith.addi %7, %10 : i32 loc(#loc95)
    %12 = arith.remsi %0, %5 : i32 loc(#loc96)
    %13 = arith.divsi %12, %9 : i32 loc(#loc97)
    llvm.intr.assume %true : i1 loc(#loc27)
    llvm.intr.assume %true : i1 loc(#loc28)
    %14 = arith.muli %11, %c256_i32 : i32 loc(#loc29)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %16 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %17 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc30)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc30)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc30)
    %20 = tt.splat %14 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %21 = tt.splat %14 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc31)
    %22 = arith.addi %20, %15 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %23 = arith.addi %21, %16 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc31)
    %24 = tt.splat %arg5 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %25 = tt.splat %arg5 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %26 = arith.remsi %22, %24 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %27 = arith.remsi %23, %25 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %28 = arith.muli %13, %c256_i32 : i32 loc(#loc33)
    %29 = tt.splat %28 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc34)
    %30 = tt.splat %28 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %31 = arith.addi %29, %18 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc34)
    %32 = arith.addi %30, %16 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %33 = tt.splat %arg6 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc35)
    %34 = tt.splat %arg6 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc35)
    %35 = arith.remsi %31, %33 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc35)
    %36 = arith.remsi %32, %34 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc35)
    %37 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc36)
    %38 = tt.expand_dims %26 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc37)
    %39 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #blocked> loc(#loc37)
    %40 = arith.muli %38, %39 : tensor<256x1xi32, #blocked> loc(#loc37)
    %41 = tt.broadcast %40 : tensor<256x1xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc37)
    %42 = tt.expand_dims %37 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc37)
    %43 = tt.broadcast %42 : tensor<1x128xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc37)
    %44 = arith.addi %41, %43 : tensor<256x128xi32, #blocked> loc(#loc37)
    %45 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc38)
    %46 = tt.expand_dims %45 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc39)
    %47 = tt.broadcast %46 : tensor<128x1xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc39)
    %48 = tt.expand_dims %35 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc39)
    %49 = tt.splat %arg9 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc39)
    %50 = arith.muli %48, %49 : tensor<1x256xi32, #blocked2> loc(#loc39)
    %51 = tt.broadcast %50 : tensor<1x256xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc39)
    %52 = arith.addi %47, %51 : tensor<128x256xi32, #blocked2> loc(#loc39)
    %53 = tt.expand_dims %27 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc40)
    %54 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc41)
    %55 = tt.broadcast %53 : tensor<256x1xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc42)
    %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc42)
    %57 = tt.splat %arg11 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc42)
    %58 = arith.muli %56, %57 : tensor<1x8xi32, #blocked1> loc(#loc42)
    %59 = tt.broadcast %58 : tensor<1x8xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc42)
    %60 = arith.addi %59, %55 : tensor<256x8xi32, #blocked1> loc(#loc42)
    %61 = tt.expand_dims %36 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc43)
    %62 = tt.broadcast %61 : tensor<256x1xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc44)
    %63 = tt.splat %arg12 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc44)
    %64 = arith.muli %56, %63 : tensor<1x8xi32, #blocked1> loc(#loc44)
    %65 = tt.broadcast %64 : tensor<1x8xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc44)
    %66 = arith.addi %65, %62 : tensor<256x8xi32, #blocked1> loc(#loc44)
    %67 = arith.addi %arg7, %c127_i32 : i32 loc(#loc98)
    %68 = arith.divsi %67, %c128_i32 : i32 loc(#loc99)
    %69 = arith.muli %arg11, %c8_i32 : i32 loc(#loc46)
    %70 = arith.muli %arg12, %c8_i32 : i32 loc(#loc47)
    %71 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc48)
    %72 = ttg.local_alloc : () -> !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc49)
    %73 = ttg.local_alloc : () -> !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %74 = ttg.local_alloc : () -> !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %75 = arith.cmpi sgt, %68, %c0_i32 : i32 loc(#loc52)
    %76 = ttg.memdesc_subview %73[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %77 = tt.splat %75 : i1 -> tensor<256x8xi1, #blocked1> loc(#loc52)
    %78 = amdgpu.buffer_load_to_local %arg3[%60] mask = %77 stride = %arg11 into %76 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %79 = ttg.async_commit_group %78 loc(#loc50)
    %80 = ttg.memdesc_subview %74[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %81 = amdgpu.buffer_load_to_local %arg4[%66] mask = %77 stride = %arg12 into %80 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %82 = ttg.async_commit_group %81 loc(#loc51)
    %83 = ttg.memdesc_subview %71[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc48)
    %84 = tt.splat %75 : i1 -> tensor<256x128xi1, #blocked> loc(#loc52)
    %85 = amdgpu.buffer_load_to_local %arg0[%44] mask = %84 stride = %arg8 into %83 : <i8>[tensor<256x128xi32, #blocked>]  -> <256x128xi8, #shared, #smem, mutable> loc(#loc48)
    %86 = ttg.async_commit_group %85 loc(#loc48)
    %87 = ttg.memdesc_subview %72[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> loc(#loc49)
    %88 = tt.splat %75 : i1 -> tensor<128x256xi1, #blocked2> loc(#loc52)
    %89 = amdgpu.buffer_load_to_local %arg1[%52] mask = %88 stride = %arg9 into %87 : <i8>[tensor<128x256xi32, #blocked2>]  -> <128x256xi8, #shared1, #smem, mutable> loc(#loc49)
    %90 = ttg.async_commit_group %89 loc(#loc49)
    %91 = arith.subi %68, %c1_i32 : i32 loc(#loc52)
    %92:14 = scf.for %arg13 = %c0_i32 to %91 step %c1_i32 iter_args(%arg14 = %cst, %arg15 = %arg3, %arg16 = %arg4, %arg17 = %arg0, %arg18 = %arg1, %arg19 = %c0_i32, %arg20 = %79, %arg21 = %82, %arg22 = %86, %arg23 = %90, %arg24 = %76, %arg25 = %80, %arg26 = %83, %arg27 = %87) -> (tensor<256x256xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>, !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared, #smem, mutable>, !ttg.memdesc<128x256xi8, #shared1, #smem, mutable>)  : i32 {
      rocdl.sched.barrier 0 loc(#loc53)
      %134 = ttg.async_wait %arg20, %arg21, %arg22, %arg23 {num = 0 : i32} loc(#loc50)
      rocdl.sched.barrier 0 loc(#loc54)
      %135 = tt.addptr %arg17, %c128_i32 : !tt.ptr<i8>, i32 loc(#loc55)
      %136 = tt.addptr %arg18, %c128_i32 : !tt.ptr<i8>, i32 loc(#loc56)
      %137 = tt.addptr %arg15, %69 : !tt.ptr<i8>, i32 loc(#loc57)
      %138 = tt.addptr %arg16, %70 : !tt.ptr<i8>, i32 loc(#loc58)
      %139 = arith.addi %arg19, %c1_i32 : i32 loc(#loc52)
      %140 = arith.cmpi slt, %139, %c2_i32 : i32 loc(#loc52)
      %141 = arith.select %140, %139, %c0_i32 : i32 loc(#loc52)
      %142 = ttg.memdesc_subview %71[%141, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc48)
      %143 = amdgpu.buffer_load_to_local %135[%44] stride = %arg8 into %142 : <i8>[tensor<256x128xi32, #blocked>]  -> <256x128xi8, #shared, #smem, mutable> loc(#loc48)
      %144 = ttg.async_commit_group %143 loc(#loc48)
      %145 = ttg.memdesc_subview %73[%141, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc50)
      %146 = amdgpu.buffer_load_to_local %137[%60] stride = %arg11 into %145 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc50)
      %147 = ttg.async_commit_group %146 loc(#loc50)
      %148 = ttg.memdesc_subview %arg26[%c0_i32, %c0_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x64xi8, #shared, #smem, mutable, 256x128> loc(#loc59)
      %149 = ttg.local_load %148 token %134 : !ttg.memdesc<256x64xi8, #shared, #smem, mutable, 256x128> -> tensor<256x64xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)
      %150 = ttg.memdesc_subview %arg27[%c0_i32, %c0_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xi8, #shared1, #smem, mutable, 128x256> loc(#loc60)
      %151 = ttg.local_load %150 token %134 : !ttg.memdesc<64x256xi8, #shared1, #smem, mutable, 128x256> -> tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)
      %152 = ttg.memdesc_subview %arg24[%c0_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> loc(#loc61)
      %153 = ttg.local_load %152 token %134 : !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> -> tensor<256x4xi8, #linear> loc(#loc50)
      %154 = ttg.memdesc_subview %arg25[%c0_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> loc(#loc62)
      %155 = ttg.local_load %154 token %134 : !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> -> tensor<256x4xi8, #linear1> loc(#loc5)
      rocdl.sched.barrier 0 loc(#loc63)
      %156 = tt.dot_scaled %149 scale %153, %151 scale %155, %arg14 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<256x64xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear> * tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear1> -> tensor<256x256xf32, #mma> loc(#loc64)
      rocdl.sched.barrier 0 loc(#loc65)
      %157 = ttg.memdesc_subview %72[%141, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> loc(#loc49)
      %158 = amdgpu.buffer_load_to_local %136[%52] stride = %arg9 into %157 : <i8>[tensor<128x256xi32, #blocked2>]  -> <128x256xi8, #shared1, #smem, mutable> loc(#loc49)
      %159 = ttg.async_commit_group %158 loc(#loc49)
      %160 = ttg.memdesc_subview %74[%141, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc51)
      %161 = amdgpu.buffer_load_to_local %138[%66] stride = %arg12 into %160 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc51)
      %162 = ttg.async_commit_group %161 loc(#loc51)
      %163 = ttg.memdesc_subview %arg26[%c0_i32, %c64_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x64xi8, #shared, #smem, mutable, 256x128> loc(#loc66)
      %164 = ttg.local_load %163 token %134 : !ttg.memdesc<256x64xi8, #shared, #smem, mutable, 256x128> -> tensor<256x64xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)
      %165 = ttg.memdesc_subview %arg27[%c64_i32, %c0_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xi8, #shared1, #smem, mutable, 128x256> loc(#loc67)
      %166 = ttg.local_load %165 token %134 : !ttg.memdesc<64x256xi8, #shared1, #smem, mutable, 128x256> -> tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)
      %167 = ttg.memdesc_subview %arg24[%c0_i32, %c4_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> loc(#loc68)
      %168 = ttg.local_load %167 token %134 : !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> -> tensor<256x4xi8, #linear> loc(#loc50)
      %169 = ttg.memdesc_subview %arg25[%c0_i32, %c4_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> loc(#loc69)
      %170 = ttg.local_load %169 token %134 : !ttg.memdesc<256x4xi8, #shared2, #smem, mutable, 256x8> -> tensor<256x4xi8, #linear1> loc(#loc51)
      rocdl.sched.barrier 0 loc(#loc70)
      %171 = tt.dot_scaled %164 scale %168, %166 scale %170, %156 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<256x64xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear> * tensor<64x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x4xi8, #linear1> -> tensor<256x256xf32, #mma> loc(#loc64)
      scf.yield %171, %137, %138, %135, %136, %141, %147, %162, %144, %159, %145, %160, %142, %157 : tensor<256x256xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>, !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared, #smem, mutable>, !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> loc(#loc52)
    } loc(#loc52)
    %93 = arith.cmpi sge, %68, %c1_i32 : i32 loc(#loc52)
    %94 = ttg.async_wait %92#6, %92#7, %92#8, %92#9 {num = 0 : i32} loc(#loc50)
    %95 = ttg.local_load %92#10 token %94 : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> tensor<256x8xi8, #linear> loc(#loc50)
    %96 = ttg.local_load %92#11 token %94 : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> tensor<256x8xi8, #linear1> loc(#loc51)
    %97 = ttg.local_load %92#12 token %94 : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)
    %98 = ttg.local_load %92#13 token %94 : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)
    %99 = scf.if %93 -> (tensor<256x256xf32, #mma>) {
      %134 = tt.dot_scaled %97 scale %95, %98 scale %96, %92#0 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<256x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x8xi8, #linear> * tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x8xi8, #linear1> -> tensor<256x256xf32, #mma> loc(#loc64)
      scf.yield %134 : tensor<256x256xf32, #mma> loc(#loc64)
    } else {
      scf.yield %92#0 : tensor<256x256xf32, #mma> loc(#loc64)
    } loc(#loc64)
    %100 = arith.select %93, %99, %92#0 : tensor<256x256xf32, #mma> loc(#loc52)
    ttg.local_dealloc %71 : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %72 : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %73 : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %74 : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc52)
    %101 = arith.truncf %100 : tensor<256x256xf32, #mma> to tensor<256x256xbf16, #mma> loc(#loc71)
    %102 = arith.extsi %17 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc72)
    %103 = arith.extsi %19 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc72)
    %104 = arith.extsi %14 : i32 to i64 loc(#loc73)
    %105 = tt.splat %104 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc73)
    %106 = arith.addi %105, %102 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc73)
    %107 = arith.extsi %28 : i32 to i64 loc(#loc74)
    %108 = tt.splat %107 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc74)
    %109 = arith.addi %108, %103 : tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc74)
    %110 = tt.expand_dims %106 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi64, #mma> loc(#loc75)
    %111 = arith.extsi %arg10 : i32 to i64 loc(#loc76)
    %112 = tt.expand_dims %102 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi64, #mma> loc(#loc77)
    %113 = arith.muli %111, %104 : i64 loc(#loc77)
    %114 = tt.splat %111 : i64 -> tensor<256x1xi64, #mma> loc(#loc77)
    %115 = arith.muli %114, %112 : tensor<256x1xi64, #mma> loc(#loc77)
    %116 = tt.addptr %arg2, %113 : !tt.ptr<bf16>, i64 loc(#loc77)
    %117 = arith.trunci %115 : tensor<256x1xi64, #mma> to tensor<256x1xi32, #mma> loc(#loc77)
    %118 = tt.expand_dims %109 {axis = 0 : i32} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi64, #mma> loc(#loc78)
    %119 = tt.broadcast %117 : tensor<256x1xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc79)
    %120 = tt.expand_dims %103 {axis = 0 : i32} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi64, #mma> loc(#loc79)
    %121 = tt.broadcast %120 : tensor<1x256xi64, #mma> -> tensor<256x256xi64, #mma> loc(#loc79)
    %122 = tt.addptr %116, %107 : !tt.ptr<bf16>, i64 loc(#loc79)
    %123 = arith.trunci %121 : tensor<256x256xi64, #mma> to tensor<256x256xi32, #mma> loc(#loc79)
    %124 = arith.addi %123, %119 : tensor<256x256xi32, #mma> loc(#loc79)
    %125 = arith.extsi %arg5 : i32 to i64 loc(#loc80)
    %126 = tt.splat %125 : i64 -> tensor<256x1xi64, #mma> loc(#loc80)
    %127 = arith.cmpi slt, %110, %126 : tensor<256x1xi64, #mma> loc(#loc80)
    %128 = arith.extsi %arg6 : i32 to i64 loc(#loc81)
    %129 = tt.splat %128 : i64 -> tensor<1x256xi64, #mma> loc(#loc81)
    %130 = arith.cmpi slt, %118, %129 : tensor<1x256xi64, #mma> loc(#loc81)
    %131 = tt.broadcast %127 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc82)
    %132 = tt.broadcast %130 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc82)
    %133 = arith.andi %131, %132 : tensor<256x256xi1, #mma> loc(#loc82)
    amdgpu.buffer_store %101, %122[%124], %133 : tensor<256x256xbf16, #mma> loc(#loc83)
    tt.return loc(#loc84)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:14)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":48:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":61:24)
#loc13 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":62:27)
#loc15 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc16 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:27)
#loc17 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":35:42)
#loc18 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":67:44)
#loc19 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":36:26)
#loc20 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":37:33)
#loc21 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":38:39)
#loc22 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":38:52)
#loc23 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":39:37)
#loc24 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":39:31)
#loc25 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":40:23)
#loc26 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":40:44)
#loc27 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:14)
#loc28 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:14)
#loc29 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:23)
#loc30 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:51)
#loc31 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:38)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:68)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:23)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:38)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:68)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:60)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:22)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:29)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:22)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:34)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:74)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:66)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:34)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:66)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:33)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:61)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:61)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:24)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":98:24)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:27)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":91:27)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:22)
#loc53 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":144:7)
#loc54 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":146:7)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":106:18)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":107:18)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:24)
#loc58 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:24)
#loc59 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":165:16)
#loc60 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":168:16)
#loc61 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":171:17)
#loc62 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":174:17)
#loc63 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":177:7)
#loc64 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:71)
#loc65 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":183:7)
#loc66 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":197:16)
#loc67 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":201:16)
#loc68 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":204:17)
#loc69 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":207:17)
#loc70 = loc("/app/aiter/study_dense_mxfp4/hack_mfma16_1.ttgir":210:7)
#loc71 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":111:23)
#loc72 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:67)
#loc73 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:37)
#loc74 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:37)
#loc75 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:41)
#loc76 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:33)
#loc77 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:21)
#loc78 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:72)
#loc79 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:52)
#loc80 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:33)
#loc81 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:58)
#loc82 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:39)
#loc83 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:21)
#loc84 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:4)
#loc85 = loc(callsite(#loc13 at #loc14))
#loc86 = loc(callsite(#loc15 at #loc14))
#loc87 = loc(callsite(#loc13 at #loc16))
#loc88 = loc(callsite(#loc15 at #loc16))
#loc89 = loc(callsite(#loc17 at #loc18))
#loc90 = loc(callsite(#loc19 at #loc18))
#loc91 = loc(callsite(#loc20 at #loc18))
#loc92 = loc(callsite(#loc21 at #loc18))
#loc93 = loc(callsite(#loc22 at #loc18))
#loc94 = loc(callsite(#loc23 at #loc18))
#loc95 = loc(callsite(#loc24 at #loc18))
#loc96 = loc(callsite(#loc25 at #loc18))
#loc97 = loc(callsite(#loc26 at #loc18))
#loc98 = loc(callsite(#loc13 at #loc45))
#loc99 = loc(callsite(#loc15 at #loc45))
