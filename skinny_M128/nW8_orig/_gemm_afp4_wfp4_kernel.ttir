#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)
module {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst = arith.constant dense<106496> : tensor<128x1xi64> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<128x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<256x128xi32> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<128x256xi32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x128xf32> loc(#loc1)
    %cst_4 = arith.constant dense<512> : tensor<128x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<8192> : tensor<1x128xi32> loc(#loc1)
    %cst_6 = arith.constant dense<8192> : tensor<128x1xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %0 = tt.get_program_id x : i32 loc(#loc12)
    %1 = arith.addi %arg6, %c127_i32 : i32 loc(#loc75)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc76)
    %3 = arith.divsi %0, %2 : i32 loc(#loc77)
    %4 = arith.remsi %0, %2 : i32 loc(#loc78)
    %5 = arith.cmpi sgt, %3, %c0_i32 : i32 loc(#loc19)
    llvm.intr.assume %5 : i1 loc(#loc20)
    %6 = arith.cmpi sgt, %4, %c0_i32 : i32 loc(#loc21)
    llvm.intr.assume %6 : i1 loc(#loc22)
    %7 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc23)
    %8 = arith.muli %3, %c128_i32 : i32 loc(#loc24)
    %9 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc25)
    %10 = tt.splat %8 : i32 -> tensor<128xi32> loc(#loc26)
    %11 = arith.addi %10, %9 : tensor<128xi32> loc(#loc26)
    %12 = tt.splat %arg5 : i32 -> tensor<128xi32> loc(#loc27)
    %13 = arith.remsi %11, %12 : tensor<128xi32> loc(#loc27)
    %14 = arith.muli %4, %c128_i32 : i32 loc(#loc28)
    %15 = tt.splat %14 : i32 -> tensor<128xi32> loc(#loc29)
    %16 = arith.addi %15, %9 : tensor<128xi32> loc(#loc29)
    %17 = tt.splat %arg6 : i32 -> tensor<128xi32> loc(#loc30)
    %18 = arith.remsi %16, %17 : tensor<128xi32> loc(#loc30)
    %19 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc31)
    %20 = arith.muli %19, %cst_6 : tensor<128x1xi32> loc(#loc32)
    %21 = tt.expand_dims %7 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc33)
    %22 = tt.broadcast %20 : tensor<128x1xi32> -> tensor<128x256xi32> loc(#loc34)
    %23 = tt.broadcast %21 : tensor<1x256xi32> -> tensor<128x256xi32> loc(#loc34)
    %24 = arith.addi %22, %23 : tensor<128x256xi32> loc(#loc34)
    %25 = tt.splat %arg0 : !tt.ptr<i8> -> tensor<128x256x!tt.ptr<i8>> loc(#loc35)
    %26 = tt.addptr %25, %24 : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc35)
    %27 = tt.expand_dims %7 {axis = 1 : i32} : tensor<256xi32> -> tensor<256x1xi32> loc(#loc36)
    %28 = tt.expand_dims %18 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc37)
    %29 = arith.muli %28, %cst_5 : tensor<1x128xi32> loc(#loc38)
    %30 = tt.broadcast %27 : tensor<256x1xi32> -> tensor<256x128xi32> loc(#loc39)
    %31 = tt.broadcast %29 : tensor<1x128xi32> -> tensor<256x128xi32> loc(#loc39)
    %32 = arith.addi %30, %31 : tensor<256x128xi32> loc(#loc39)
    %33 = tt.splat %arg1 : !tt.ptr<i8> -> tensor<256x128x!tt.ptr<i8>> loc(#loc40)
    %34 = tt.addptr %33, %32 : tensor<256x128x!tt.ptr<i8>>, tensor<256x128xi32> loc(#loc40)
    %35 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc41)
    %36 = arith.muli %19, %cst_4 : tensor<128x1xi32> loc(#loc42)
    %37 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc43)
    %38 = tt.addptr %37, %36 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc43)
    %39 = tt.expand_dims %35 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc44)
    %40 = tt.broadcast %38 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x16x!tt.ptr<i8>> loc(#loc45)
    %41 = tt.broadcast %39 : tensor<1x16xi32> -> tensor<128x16xi32> loc(#loc45)
    %42 = tt.addptr %40, %41 : tensor<128x16x!tt.ptr<i8>>, tensor<128x16xi32> loc(#loc45)
    %43 = tt.expand_dims %18 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc46)
    %44 = arith.muli %43, %cst_4 : tensor<128x1xi32> loc(#loc47)
    %45 = tt.splat %arg4 : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc48)
    %46 = tt.addptr %45, %44 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc48)
    %47 = tt.broadcast %46 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x16x!tt.ptr<i8>> loc(#loc49)
    %48 = tt.addptr %47, %41 : tensor<128x16x!tt.ptr<i8>>, tensor<128x16xi32> loc(#loc49)
    %49:5 = scf.for %arg7 = %c0_i32 to %c32_i32 step %c1_i32 iter_args(%arg8 = %cst_3, %arg9 = %26, %arg10 = %34, %arg11 = %42, %arg12 = %48) -> (tensor<128x128xf32>, tensor<128x256x!tt.ptr<i8>>, tensor<256x128x!tt.ptr<i8>>, tensor<128x16x!tt.ptr<i8>>, tensor<128x16x!tt.ptr<i8>>)  : i32 {
      %75 = tt.load %arg11 : tensor<128x16x!tt.ptr<i8>> loc(#loc51)
      %76 = tt.load %arg12 : tensor<128x16x!tt.ptr<i8>> loc(#loc52)
      %77 = tt.load %arg9 : tensor<128x256x!tt.ptr<i8>> loc(#loc53)
      %78 = tt.load %arg10 cacheModifier = cg : tensor<256x128x!tt.ptr<i8>> loc(#loc54)
      %79 = tt.dot_scaled %77 scale %75, %78 scale %76, %arg8 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x256xi8>, tensor<128x16xi8> * tensor<256x128xi8>, tensor<128x16xi8> -> tensor<128x128xf32> loc(#loc55)
      %80 = tt.addptr %arg9, %cst_2 : tensor<128x256x!tt.ptr<i8>>, tensor<128x256xi32> loc(#loc56)
      %81 = tt.addptr %arg10, %cst_1 : tensor<256x128x!tt.ptr<i8>>, tensor<256x128xi32> loc(#loc57)
      %82 = tt.addptr %arg11, %cst_0 : tensor<128x16x!tt.ptr<i8>>, tensor<128x16xi32> loc(#loc58)
      %83 = tt.addptr %arg12, %cst_0 : tensor<128x16x!tt.ptr<i8>>, tensor<128x16xi32> loc(#loc59)
      scf.yield %79, %80, %81, %82, %83 : tensor<128x128xf32>, tensor<128x256x!tt.ptr<i8>>, tensor<256x128x!tt.ptr<i8>>, tensor<128x16x!tt.ptr<i8>>, tensor<128x16x!tt.ptr<i8>> loc(#loc60)
    } loc(#loc50)
    %50 = arith.truncf %49#0 : tensor<128x128xf32> to tensor<128x128xbf16> loc(#loc61)
    %51 = arith.extsi %9 : tensor<128xi32> to tensor<128xi64> loc(#loc62)
    %52 = arith.extsi %8 : i32 to i64 loc(#loc63)
    %53 = tt.splat %52 : i64 -> tensor<128xi64> loc(#loc63)
    %54 = arith.addi %53, %51 : tensor<128xi64> loc(#loc63)
    %55 = arith.extsi %14 : i32 to i64 loc(#loc64)
    %56 = tt.splat %55 : i64 -> tensor<128xi64> loc(#loc64)
    %57 = arith.addi %56, %51 : tensor<128xi64> loc(#loc64)
    %58 = tt.expand_dims %54 {axis = 1 : i32} : tensor<128xi64> -> tensor<128x1xi64> loc(#loc65)
    %59 = arith.muli %58, %cst : tensor<128x1xi64> loc(#loc66)
    %60 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc67)
    %61 = tt.addptr %60, %59 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi64> loc(#loc67)
    %62 = tt.expand_dims %57 {axis = 0 : i32} : tensor<128xi64> -> tensor<1x128xi64> loc(#loc68)
    %63 = tt.broadcast %61 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x128x!tt.ptr<bf16>> loc(#loc69)
    %64 = tt.broadcast %62 : tensor<1x128xi64> -> tensor<128x128xi64> loc(#loc69)
    %65 = tt.addptr %63, %64 : tensor<128x128x!tt.ptr<bf16>>, tensor<128x128xi64> loc(#loc69)
    %66 = arith.extsi %arg5 : i32 to i64 loc(#loc70)
    %67 = tt.splat %66 : i64 -> tensor<128x1xi64> loc(#loc70)
    %68 = arith.cmpi slt, %58, %67 : tensor<128x1xi64> loc(#loc70)
    %69 = arith.extsi %arg6 : i32 to i64 loc(#loc71)
    %70 = tt.splat %69 : i64 -> tensor<1x128xi64> loc(#loc71)
    %71 = arith.cmpi slt, %62, %70 : tensor<1x128xi64> loc(#loc71)
    %72 = tt.broadcast %68 : tensor<128x1xi1> -> tensor<128x128xi1> loc(#loc72)
    %73 = tt.broadcast %71 : tensor<1x128xi1> -> tensor<128x128xi1> loc(#loc72)
    %74 = arith.andi %72, %73 : tensor<128x128xi1> loc(#loc72)
    tt.store %65, %50, %74 : tensor<128x128x!tt.ptr<bf16>> loc(#loc73)
    tt.return loc(#loc74)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:14)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":48:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":61:24)
#loc13 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:27)
#loc15 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc16 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":32:23)
#loc17 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":67:44)
#loc18 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":33:22)
#loc19 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:22)
#loc20 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:14)
#loc21 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:22)
#loc22 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:14)
#loc23 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":76:26)
#loc24 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:23)
#loc25 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:51)
#loc26 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:38)
#loc27 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:68)
#loc28 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:23)
#loc29 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:38)
#loc30 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:68)
#loc31 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:30)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:41)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:60)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:53)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:22)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:29)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:60)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:71)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:52)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:22)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":82:27)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:53)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:34)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:74)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:66)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:42)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:53)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:34)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:66)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:22)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:27)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":91:27)
#loc53 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:24)
#loc54 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":98:24)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:71)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":106:18)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":107:18)
#loc58 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:24)
#loc59 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:24)
#loc60 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:8)
#loc61 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":111:23)
#loc62 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:67)
#loc63 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:37)
#loc64 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:37)
#loc65 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:41)
#loc66 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:33)
#loc67 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:21)
#loc68 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:72)
#loc69 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:52)
#loc70 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:33)
#loc71 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:58)
#loc72 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:39)
#loc73 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:21)
#loc74 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:4)
#loc75 = loc(callsite(#loc13 at #loc14))
#loc76 = loc(callsite(#loc15 at #loc14))
#loc77 = loc(callsite(#loc16 at #loc17))
#loc78 = loc(callsite(#loc18 at #loc17))
