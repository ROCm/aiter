#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 4], [0, 8], [32, 0], [64, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[0, 0], [0, 0], [16, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 4], [0, 8], [64, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[16, 0], [32, 0], [0, 0]], block = []}>
#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [0, 1]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)) attributes {noinline = false} {
    %cst = arith.constant dense<106496> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<512> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<8192> : tensor<1x128xi32, #blocked2> loc(#loc1)
    %cst_2 = arith.constant dense<8192> : tensor<128x1xi32, #blocked3> loc(#loc1)
    %c106496_i64 = arith.constant 106496 : i64 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<true> : tensor<256x128xi1, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<true> : tensor<128x256xi1, #blocked3> loc(#loc1)
    %cst_5 = arith.constant dense<true> : tensor<128x16xi1, #blocked1> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %0 = tt.get_program_id x : i32 loc(#loc12)
    %1 = arith.addi %arg6, %c127_i32 : i32 loc(#loc60)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc61)
    %3 = arith.divsi %0, %2 : i32 loc(#loc62)
    %4 = arith.remsi %0, %2 : i32 loc(#loc63)
    llvm.intr.assume %true : i1 loc(#loc19)
    llvm.intr.assume %true : i1 loc(#loc20)
    %5 = arith.muli %3, %c128_i32 : i32 loc(#loc21)
    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc22)
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc22)
    %8 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %9 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %10 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %11 = tt.splat %5 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc23)
    %12 = tt.splat %5 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %13 = arith.addi %11, %6 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc23)
    %14 = arith.addi %12, %7 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %15 = tt.splat %arg5 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc24)
    %16 = tt.splat %arg5 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %17 = arith.remsi %13, %15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc24)
    %18 = arith.remsi %14, %16 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %19 = arith.muli %4, %c128_i32 : i32 loc(#loc25)
    %20 = tt.splat %19 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %21 = tt.splat %19 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %22 = arith.addi %20, %9 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %23 = arith.addi %21, %7 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %24 = tt.splat %arg6 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %25 = tt.splat %arg6 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %26 = arith.remsi %22, %24 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %27 = arith.remsi %23, %25 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %28 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc28)
    %29 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc29)
    %30 = arith.muli %29, %cst_2 : tensor<128x1xi32, #blocked3> loc(#loc29)
    %31 = tt.broadcast %30 : tensor<128x1xi32, #blocked3> -> tensor<128x256xi32, #blocked3> loc(#loc29)
    %32 = tt.expand_dims %28 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x256xi32, #blocked3> loc(#loc29)
    %33 = tt.broadcast %32 : tensor<1x256xi32, #blocked3> -> tensor<128x256xi32, #blocked3> loc(#loc29)
    %34 = arith.addi %31, %33 : tensor<128x256xi32, #blocked3> loc(#loc29)
    %35 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc30)
    %36 = tt.expand_dims %35 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<256x1xi32, #blocked2> loc(#loc31)
    %37 = tt.broadcast %36 : tensor<256x1xi32, #blocked2> -> tensor<256x128xi32, #blocked2> loc(#loc31)
    %38 = tt.expand_dims %26 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x128xi32, #blocked2> loc(#loc31)
    %39 = arith.muli %38, %cst_1 : tensor<1x128xi32, #blocked2> loc(#loc31)
    %40 = tt.broadcast %39 : tensor<1x128xi32, #blocked2> -> tensor<256x128xi32, #blocked2> loc(#loc31)
    %41 = arith.addi %37, %40 : tensor<256x128xi32, #blocked2> loc(#loc31)
    %42 = tt.expand_dims %18 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc32)
    %43 = arith.muli %42, %cst_0 : tensor<128x1xi32, #blocked1> loc(#loc32)
    %44 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc33)
    %45 = tt.broadcast %43 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc34)
    %46 = tt.expand_dims %44 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc34)
    %47 = tt.broadcast %46 : tensor<1x16xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc34)
    %48 = arith.addi %47, %45 : tensor<128x16xi32, #blocked1> loc(#loc34)
    %49 = tt.expand_dims %27 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc35)
    %50 = arith.muli %49, %cst_0 : tensor<128x1xi32, #blocked1> loc(#loc35)
    %51 = tt.broadcast %50 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc36)
    %52 = arith.addi %47, %51 : tensor<128x16xi32, #blocked1> loc(#loc36)
    %53 = ttg.local_alloc : () -> !ttg.memdesc<2x128x256xi8, #shared, #smem, mutable> loc(#loc37)
    %54 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xi8, #shared1, #smem, mutable> loc(#loc38)
    %55 = ttg.local_alloc : () -> !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> loc(#loc39)
    %56 = ttg.local_alloc : () -> !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> loc(#loc40)
    %57 = ttg.memdesc_subview %55[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> loc(#loc39)
    %58 = amdgpu.buffer_load_to_local %arg3[%48] mask = %cst_5 into %57 : <i8>[tensor<128x16xi32, #blocked1>]  -> <128x16xi8, #shared2, #smem, mutable> loc(#loc39)
    %59 = ttg.async_commit_group %58 loc(#loc39)
    %60 = ttg.memdesc_subview %56[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> loc(#loc40)
    %61 = amdgpu.buffer_load_to_local %arg4[%52] mask = %cst_5 into %60 : <i8>[tensor<128x16xi32, #blocked1>]  -> <128x16xi8, #shared2, #smem, mutable> loc(#loc40)
    %62 = ttg.async_commit_group %61 loc(#loc40)
    %63 = ttg.memdesc_subview %53[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared, #smem, mutable> loc(#loc37)
    %64 = amdgpu.buffer_load_to_local %arg0[%34] mask = %cst_4 into %63 : <i8>[tensor<128x256xi32, #blocked3>]  -> <128x256xi8, #shared, #smem, mutable> loc(#loc37)
    %65 = ttg.async_commit_group %64 loc(#loc37)
    %66 = ttg.memdesc_subview %54[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared1, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared1, #smem, mutable> loc(#loc38)
    %67 = amdgpu.buffer_load_to_local %arg1[%41] mask = %cst_3 cacheModifier = cg into %66 : <i8>[tensor<256x128xi32, #blocked2>]  -> <256x128xi8, #shared1, #smem, mutable> loc(#loc38)
    %68 = ttg.async_commit_group %67 loc(#loc38)

    %tid = rocdl.workitem.id.x : i32
    %wgid = arith.divsi %tid, %c256_i32 : i32
    %w03 = arith.cmpi eq, %wgid, %c0_i32 : i32
    %w47 = arith.cmpi ne, %wgid, %c0_i32 : i32
    amdgpu.cond_barrier %w47

    /////////////////////////////////////////////////////////////////////
    // For loop starts
    /////////////////////////////////////////////////////////////////////
    %69:14 = scf.for %arg7 = %c0_i32 to %c31_i32 step %c1_i32 iter_args(%arg8 = %cst_6, %arg9 = %arg3, %arg10 = %arg4, %arg11 = %arg0, %arg12 = %arg1, %arg13 = %c0_i32, %arg14 = %59, %arg15 = %62, %arg16 = %65, %arg17 = %68, %arg18 = %57, %arg19 = %60, %arg20 = %63, %arg21 = %66) -> (tensor<128x128xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<128x16xi8, #shared2, #smem, mutable>, !ttg.memdesc<128x16xi8, #shared2, #smem, mutable>, !ttg.memdesc<128x256xi8, #shared, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared1, #smem, mutable>)  : i32 {

      %108 = ttg.async_wait %arg14, %arg15, %arg16, %arg17 {num = 0 : i32} loc(#loc39)
      rocdl.sched.barrier 0

      %109 = tt.addptr %arg11, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc42)
      %110 = tt.addptr %arg12, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc43)
      %111 = tt.addptr %arg9, %c16_i32 : !tt.ptr<i8>, i32 loc(#loc44)
      %112 = tt.addptr %arg10, %c16_i32 : !tt.ptr<i8>, i32 loc(#loc45)
      %113 = arith.addi %arg13, %c1_i32 : i32 loc(#loc41)
      %114 = arith.cmpi slt, %113, %c2_i32 : i32 loc(#loc41)
      %115 = arith.select %114, %113, %c0_i32 : i32 loc(#loc41)
      %116 = ttg.memdesc_subview %55[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> loc(#loc39)
      %117 = amdgpu.buffer_load_to_local %111[%48] into %116 : <i8>[tensor<128x16xi32, #blocked1>]  -> <128x16xi8, #shared2, #smem, mutable> loc(#loc39)
      %118 = ttg.async_commit_group %117 loc(#loc39)
      %120 = ttg.memdesc_subview %56[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> loc(#loc40)
      %121 = amdgpu.buffer_load_to_local %112[%52] into %120 : <i8>[tensor<128x16xi32, #blocked1>]  -> <128x16xi8, #shared2, #smem, mutable> loc(#loc40)
      %122 = ttg.async_commit_group %121 loc(#loc40)
      %124 = ttg.memdesc_subview %53[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared, #smem, mutable> loc(#loc37)
      %125 = amdgpu.buffer_load_to_local %109[%34] into %124 : <i8>[tensor<128x256xi32, #blocked3>]  -> <128x256xi8, #shared, #smem, mutable> loc(#loc37)
      %126 = ttg.async_commit_group %125 loc(#loc37)
      %128 = ttg.memdesc_subview %54[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared1, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared1, #smem, mutable> loc(#loc38)
      %129 = amdgpu.buffer_load_to_local %110[%41] cacheModifier = cg into %128 : <i8>[tensor<256x128xi32, #blocked2>]  -> <256x128xi8, #shared1, #smem, mutable> loc(#loc38)
      %130 = ttg.async_commit_group %129 loc(#loc38)

      rocdl.sched.barrier 0
      rocdl.s.barrier

      %119 = ttg.local_load %arg18 token %108 : !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> -> tensor<128x16xi8, #linear> loc(#loc39)
      %123 = ttg.local_load %arg19 token %108 : !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> -> tensor<128x16xi8, #linear1> loc(#loc40)
      %127 = ttg.local_load %arg20 token %108 : !ttg.memdesc<128x256xi8, #shared, #smem, mutable> -> tensor<128x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc37)
      %131 = ttg.local_load %arg21 token %108 : !ttg.memdesc<256x128xi8, #shared1, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc38)
      
      rocdl.sched.barrier 0

      %132 = tt.dot_scaled %127 scale %119, %131 scale %123, %arg8 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear> * tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear1> -> tensor<128x128xf32, #mma> loc(#loc46)
      scf.yield %132, %111, %112, %109, %110, %115, %118, %122, %126, %130, %116, %120, %124, %128 : tensor<128x128xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.memdesc<128x16xi8, #shared2, #smem, mutable>, !ttg.memdesc<128x16xi8, #shared2, #smem, mutable>, !ttg.memdesc<128x256xi8, #shared, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared1, #smem, mutable> loc(#loc41)
    } loc(#loc41)

    amdgpu.cond_barrier %w03

    %70 = ttg.async_wait %69#6, %69#7, %69#8, %69#9 {num = 0 : i32} loc(#loc39)
    %71 = ttg.local_load %69#10 token %70 : !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> -> tensor<128x16xi8, #linear> loc(#loc39)
    %72 = ttg.local_load %69#11 token %70 : !ttg.memdesc<128x16xi8, #shared2, #smem, mutable> -> tensor<128x16xi8, #linear1> loc(#loc40)
    %73 = ttg.local_load %69#12 token %70 : !ttg.memdesc<128x256xi8, #shared, #smem, mutable> -> tensor<128x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc37)
    %74 = ttg.local_load %69#13 token %70 : !ttg.memdesc<256x128xi8, #shared1, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc38)
    %75 = tt.dot_scaled %73 scale %71, %74 scale %72, %69#0 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear> * tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear1> -> tensor<128x128xf32, #mma> loc(#loc46)
    ttg.local_dealloc %53 : !ttg.memdesc<2x128x256xi8, #shared, #smem, mutable> loc(#loc41)
    ttg.local_dealloc %54 : !ttg.memdesc<2x256x128xi8, #shared1, #smem, mutable> loc(#loc41)
    ttg.local_dealloc %55 : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> loc(#loc41)
    ttg.local_dealloc %56 : !ttg.memdesc<2x128x16xi8, #shared2, #smem, mutable> loc(#loc41)
    %76 = arith.truncf %75 : tensor<128x128xf32, #mma> to tensor<128x128xbf16, #mma> loc(#loc47)
    %77 = arith.extsi %8 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %78 = arith.extsi %10 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc48)
    %79 = arith.extsi %5 : i32 to i64 loc(#loc49)
    %80 = tt.splat %79 : i64 -> tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %81 = arith.addi %80, %77 : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %82 = arith.extsi %19 : i32 to i64 loc(#loc50)
    %83 = tt.splat %82 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc50)
    %84 = arith.addi %83, %78 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc50)
    %85 = tt.expand_dims %81 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc51)
    %86 = tt.expand_dims %77 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc52)
    %87 = arith.muli %79, %c106496_i64 : i64 loc(#loc52)
    %88 = arith.muli %86, %cst : tensor<128x1xi64, #blocked> loc(#loc52)
    %89 = tt.addptr %arg2, %87 : !tt.ptr<bf16>, i64 loc(#loc52)
    %90 = arith.trunci %88 : tensor<128x1xi64, #blocked> to tensor<128x1xi32, #blocked> loc(#loc52)
    %91 = tt.expand_dims %84 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc53)
    %92 = tt.broadcast %90 : tensor<128x1xi32, #blocked> -> tensor<128x128xi32, #blocked> loc(#loc54)
    %93 = tt.expand_dims %78 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc54)
    %94 = tt.broadcast %93 : tensor<1x128xi64, #blocked> -> tensor<128x128xi64, #blocked> loc(#loc54)
    %95 = tt.addptr %89, %82 : !tt.ptr<bf16>, i64 loc(#loc54)
    %96 = arith.trunci %94 : tensor<128x128xi64, #blocked> to tensor<128x128xi32, #blocked> loc(#loc54)
    %97 = arith.addi %96, %92 : tensor<128x128xi32, #blocked> loc(#loc54)
    %98 = arith.extsi %arg5 : i32 to i64 loc(#loc55)
    %99 = tt.splat %98 : i64 -> tensor<128x1xi64, #blocked> loc(#loc55)
    %100 = arith.cmpi slt, %85, %99 : tensor<128x1xi64, #blocked> loc(#loc55)
    %101 = arith.extsi %arg6 : i32 to i64 loc(#loc56)
    %102 = tt.splat %101 : i64 -> tensor<1x128xi64, #blocked> loc(#loc56)
    %103 = arith.cmpi slt, %91, %102 : tensor<1x128xi64, #blocked> loc(#loc56)
    %104 = tt.broadcast %100 : tensor<128x1xi1, #blocked> -> tensor<128x128xi1, #blocked> loc(#loc57)
    %105 = tt.broadcast %103 : tensor<1x128xi1, #blocked> -> tensor<128x128xi1, #blocked> loc(#loc57)
    %106 = arith.andi %104, %105 : tensor<128x128xi1, #blocked> loc(#loc57)
    %107 = ttg.convert_layout %76 : tensor<128x128xbf16, #mma> -> tensor<128x128xbf16, #blocked> loc(#loc58)
    amdgpu.buffer_store %107, %95[%97], %106 : tensor<128x128xbf16, #blocked> loc(#loc58)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:14)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":48:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":61:24)
#loc13 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:27)
#loc15 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc16 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":32:23)
#loc17 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":67:44)
#loc18 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":33:22)
#loc19 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:14)
#loc20 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:14)
#loc21 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:23)
#loc22 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:51)
#loc23 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:38)
#loc24 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:68)
#loc25 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:23)
#loc26 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:38)
#loc27 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:68)
#loc28 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:60)
#loc29 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:22)
#loc30 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:29)
#loc31 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:22)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:34)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:74)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:66)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:34)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:66)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:24)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":98:24)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:27)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":91:27)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:22)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":106:18)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":107:18)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":108:24)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":109:24)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:71)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":111:23)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:67)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:37)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:37)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:41)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:21)
#loc53 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:72)
#loc54 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:52)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:33)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:58)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:39)
#loc58 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:21)
#loc59 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:4)
#loc60 = loc(callsite(#loc13 at #loc14))
#loc61 = loc(callsite(#loc15 at #loc14))
#loc62 = loc(callsite(#loc16 at #loc17))
#loc63 = loc(callsite(#loc18 at #loc17))
