; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_gluon_deepgemm_fp8_paged_mqa_logits_preshuffle(i32 inreg %0, i32 inreg %1, ptr addrspace(1) inreg readonly captures(none) %2, i32 inreg %3, i32 inreg %4, i32 inreg %5, ptr addrspace(1) inreg readonly captures(none) %6, i32 inreg %7, ptr addrspace(1) inreg readonly captures(none) %8, i32 inreg %9, ptr addrspace(1) inreg readonly captures(none) %10, ptr addrspace(1) inreg readonly captures(none) %11, ptr addrspace(1) inreg readonly captures(none) %12, i32 inreg %13, ptr addrspace(1) inreg writeonly captures(none) %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, ptr addrspace(1) inreg readnone captures(none) %19, ptr addrspace(1) inreg readnone captures(none) %20) local_unnamed_addr #0 !dbg !4 {
  %22 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %23 = add i32 %1, 63, !dbg !8
  %24 = sdiv i32 %23, 64, !dbg !9
  %.frozen = freeze i32 %0, !dbg !10
  %25 = sdiv i32 %22, %.frozen, !dbg !10
  %26 = mul i32 %25, %.frozen, !dbg !11
  %.decomposed = sub i32 %22, %26, !dbg !11
  %.frozen1091 = freeze i32 %24, !dbg !12
  %27 = sdiv i32 %25, %.frozen1091, !dbg !12
  %28 = sext i32 %.decomposed to i64, !dbg !13
  %29 = getelementptr i32, ptr addrspace(1) %10, i64 %28, !dbg !13
  %30 = load <1 x i32>, ptr addrspace(1) %29, align 4, !dbg !14
  %31 = extractelement <1 x i32> %30, i64 0, !dbg !14
  %32 = add i32 %31, 255, !dbg !15
  %33 = sdiv i32 %32, 256, !dbg !16
  %34 = add i32 %18, -1, !dbg !17
  %35 = add i32 %34, %33, !dbg !18
  %36 = sdiv i32 %35, %18, !dbg !19
  %37 = shl i32 %27, 8, !dbg !20
  %38 = mul i32 %37, %36, !dbg !21
  %39 = sub i32 %31, %38, !dbg !22
  %40 = shl i32 %36, 8, !dbg !23
  %41 = tail call i32 @llvm.smin.i32(i32 %39, i32 %40), !dbg !24
  %42 = icmp slt i32 %41, 1, !dbg !25
  br i1 %42, label %common.ret, label %43, !dbg !26

common.ret:                                       ; preds = %21, %._crit_edge
  ret void, !dbg !27

43:                                               ; preds = %21
  %44 = mul i32 %27, %.frozen1091, !dbg !28
  %.decomposed1092 = sub i32 %25, %44, !dbg !28
  %45 = add nuw i32 %41, 15, !dbg !29
  %46 = sdiv i32 %45, 16, !dbg !30
  %47 = shl nsw i32 %46, 4, !dbg !31
  %.neg = mul i32 %46, 240, !dbg !32
  %48 = and i32 %.neg, 240, !dbg !32
  %49 = mul i32 %.decomposed, %3, !dbg !33
  %50 = shl nsw i32 %.decomposed1092, 6, !dbg !34
  %51 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !35
  %52 = and i32 %51, 248, !dbg !35
  %53 = lshr exact i32 %52, 2, !dbg !35
  %54 = or disjoint i32 %53, 1, !dbg !35
  %55 = or disjoint i32 %50, %53, !dbg !36
  %56 = or disjoint i32 %50, %54, !dbg !36
  %57 = mul i32 %55, %5, !dbg !37
  %58 = mul i32 %56, %5, !dbg !37
  %59 = shl nuw nsw i32 %51, 4, !dbg !38
  %60 = and i32 %59, 112, !dbg !38
  %61 = add i32 %49, %60, !dbg !39
  %62 = add i32 %61, %57, !dbg !40
  %63 = add i32 %61, %58, !dbg !40
  %64 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %2, i16 0, i32 2147483646, i32 159744), !dbg !41
  %65 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %64, i32 %62, i32 0, i32 0), !dbg !41
  %66 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %64, i32 %63, i32 0, i32 0), !dbg !41
  %67 = mul i32 %.decomposed, %13, !dbg !42
  %68 = add i32 %50, %67, !dbg !43
  %69 = and i32 %51, 48, !dbg !44
  %70 = lshr exact i32 %69, 2, !dbg !44
  %71 = or disjoint i32 %70, 16, !dbg !44
  %72 = or disjoint i32 %70, 32, !dbg !44
  %73 = or disjoint i32 %70, 48, !dbg !44
  %74 = add i32 %68, %70, !dbg !45
  %75 = add i32 %71, %68, !dbg !45
  %76 = add i32 %72, %68, !dbg !45
  %77 = add i32 %73, %68, !dbg !45
  %78 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %12, i16 0, i32 2147483646, i32 159744), !dbg !46
  %79 = shl i32 %74, 2, !dbg !46
  %80 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %78, i32 %79, i32 0, i32 0), !dbg !46
  %81 = extractelement <4 x float> %80, i64 0, !dbg !46
  %82 = extractelement <4 x float> %80, i64 1, !dbg !46
  %83 = extractelement <4 x float> %80, i64 2, !dbg !46
  %84 = extractelement <4 x float> %80, i64 3, !dbg !46
  %85 = shl i32 %75, 2, !dbg !46
  %86 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %78, i32 %85, i32 0, i32 0), !dbg !46
  %87 = extractelement <4 x float> %86, i64 0, !dbg !46
  %88 = extractelement <4 x float> %86, i64 1, !dbg !46
  %89 = shl i32 %76, 2, !dbg !46
  %90 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %78, i32 %89, i32 0, i32 0), !dbg !46
  %91 = shl i32 %77, 2, !dbg !46
  %92 = tail call <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) %78, i32 %91, i32 0, i32 0), !dbg !46
  %93 = sub i32 %38, %48, !dbg !47
  %94 = ashr exact i32 %93, 4, !dbg !48
  %95 = and i32 %51, 15, !dbg !49
  %96 = lshr i32 %51, 2, !dbg !49
  %97 = and i32 %96, 48, !dbg !49
  %98 = or disjoint i32 %97, %95, !dbg !49
  %99 = or disjoint i32 %98, 64, !dbg !49
  %100 = or disjoint i32 %98, 128, !dbg !49
  %101 = or disjoint i32 %98, 192, !dbg !49
  %102 = lshr exact i32 %97, 4, !dbg !50
  %103 = lshr i32 %99, 4, !dbg !50
  %104 = lshr i32 %100, 4, !dbg !50
  %105 = lshr i32 %101, 4, !dbg !50
  %106 = add nsw i32 %94, %102, !dbg !51
  %107 = add nsw i32 %94, %103, !dbg !51
  %108 = add nsw i32 %94, %104, !dbg !51
  %109 = add nsw i32 %94, %105, !dbg !51
  %110 = icmp sgt i32 %106, -1, !dbg !52
  %111 = icmp sgt i32 %107, -1, !dbg !52
  %112 = icmp sgt i32 %108, -1, !dbg !52
  %113 = icmp sgt i32 %109, -1, !dbg !52
  %114 = mul i32 %.decomposed, %17, !dbg !53
  %115 = add i32 %94, %114, !dbg !54
  %116 = add i32 %115, %102, !dbg !55
  %117 = add i32 %115, %103, !dbg !55
  %118 = add i32 %115, %104, !dbg !55
  %119 = add i32 %115, %105, !dbg !55
  %120 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %11, i16 0, i32 2147483646, i32 159744), !dbg !56
  %121 = shl i32 %116, 2, !dbg !56
  %122 = select i1 %110, i32 %121, i32 -2147483648, !dbg !56
  %123 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %122, i32 0, i32 0), !dbg !56
  %124 = shl i32 %117, 2, !dbg !56
  %125 = select i1 %111, i32 %124, i32 -2147483648, !dbg !56
  %126 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %125, i32 0, i32 0), !dbg !56
  %127 = shl i32 %118, 2, !dbg !56
  %128 = select i1 %112, i32 %127, i32 -2147483648, !dbg !56
  %129 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %128, i32 0, i32 0), !dbg !56
  %130 = shl i32 %119, 2, !dbg !56
  %131 = select i1 %113, i32 %130, i32 -2147483648, !dbg !56
  %132 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %131, i32 0, i32 0), !dbg !56
  %133 = shl nuw nsw i32 %51, 4, !dbg !57
  %134 = and i32 %133, 1008, !dbg !57
  %135 = or disjoint i32 %134, 1024, !dbg !57
  %136 = select i1 %110, i32 %123, i32 0, !dbg !58
  %137 = select i1 %111, i32 %126, i32 0, !dbg !58
  %138 = select i1 %112, i32 %129, i32 0, !dbg !58
  %139 = select i1 %113, i32 %132, i32 0, !dbg !58
  %140 = mul i32 %136, %7, !dbg !59
  %141 = mul i32 %137, %7, !dbg !59
  %142 = mul i32 %138, %7, !dbg !59
  %143 = mul i32 %139, %7, !dbg !59
  %144 = add i32 %140, %134, !dbg !60
  %145 = add i32 %140, %135, !dbg !60
  %146 = add i32 %141, %134, !dbg !60
  %147 = add i32 %141, %135, !dbg !60
  %148 = add i32 %142, %134, !dbg !60
  %149 = add i32 %142, %135, !dbg !60
  %150 = add i32 %143, %134, !dbg !60
  %151 = add i32 %143, %135, !dbg !60
  %152 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %6, i16 0, i32 2147483646, i32 159744), !dbg !61
  %153 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %144, i32 0, i32 0), !dbg !61
  %154 = bitcast <4 x i32> %153 to <16 x i8>, !dbg !61
  %155 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %145, i32 0, i32 0), !dbg !61
  %156 = bitcast <4 x i32> %155 to <16 x i8>, !dbg !61
  %157 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %146, i32 0, i32 0), !dbg !61
  %158 = bitcast <4 x i32> %157 to <16 x i8>, !dbg !61
  %159 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %147, i32 0, i32 0), !dbg !61
  %160 = bitcast <4 x i32> %159 to <16 x i8>, !dbg !61
  %161 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %148, i32 0, i32 0), !dbg !61
  %162 = bitcast <4 x i32> %161 to <16 x i8>, !dbg !61
  %163 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %149, i32 0, i32 0), !dbg !61
  %164 = bitcast <4 x i32> %163 to <16 x i8>, !dbg !61
  %165 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %150, i32 0, i32 0), !dbg !61
  %166 = bitcast <4 x i32> %165 to <16 x i8>, !dbg !61
  %167 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %151, i32 0, i32 0), !dbg !61
  %168 = bitcast <4 x i32> %167 to <16 x i8>, !dbg !61
  %169 = mul i32 %136, %9, !dbg !62
  %170 = mul i32 %137, %9, !dbg !62
  %171 = mul i32 %138, %9, !dbg !62
  %172 = mul i32 %139, %9, !dbg !62
  %173 = add i32 %169, %95, !dbg !63
  %174 = add i32 %170, %95, !dbg !63
  %175 = add i32 %171, %95, !dbg !63
  %176 = add i32 %172, %95, !dbg !63
  %177 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %8, i16 0, i32 2147483646, i32 159744), !dbg !64
  %178 = shl i32 %173, 2, !dbg !64
  %179 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %178, i32 0, i32 0), !dbg !64
  %180 = bitcast float %179 to <1 x float>, !dbg !64
  %181 = extractelement <1 x float> %180, i64 0, !dbg !64
  %182 = shl i32 %174, 2, !dbg !64
  %183 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %182, i32 0, i32 0), !dbg !64
  %184 = bitcast float %183 to <1 x float>, !dbg !64
  %185 = extractelement <1 x float> %184, i64 0, !dbg !64
  %186 = shl i32 %175, 2, !dbg !64
  %187 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %186, i32 0, i32 0), !dbg !64
  %188 = bitcast float %187 to <1 x float>, !dbg !64
  %189 = extractelement <1 x float> %188, i64 0, !dbg !64
  %190 = shl i32 %176, 2, !dbg !64
  %191 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %190, i32 0, i32 0), !dbg !64
  %192 = bitcast float %191 to <1 x float>, !dbg !64
  %193 = extractelement <1 x float> %192, i64 0, !dbg !64
  %194 = shl nuw nsw i32 %69, 5, !dbg !65
  %195 = and i32 %59, 96, !dbg !65
  %196 = shl nuw nsw i32 %52, 1, !dbg !65
  %197 = and i32 %51, 1, !dbg !65
  %198 = shl nuw nsw i32 %197, 11, !dbg !65
  %199 = or disjoint i32 %194, %195, !dbg !65
  %200 = xor i32 %199, %196, !dbg !65
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %198, !dbg !65
  %202 = getelementptr inbounds nuw i8, ptr addrspace(3) %201, i32 %200, !dbg !65
  store <4 x i32> %65, ptr addrspace(3) %202, align 16, !dbg !65
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %202, i32 4096, !dbg !65
  store <4 x i32> %66, ptr addrspace(3) %203, align 16, !dbg !65
  fence syncscope("workgroup") release, !dbg !65
  tail call void @llvm.amdgcn.s.barrier(), !dbg !65
  fence syncscope("workgroup") acquire, !dbg !65
  %204 = shl nuw nsw i32 %51, 7, !dbg !65
  %205 = and i32 %204, 3584, !dbg !65
  %206 = shl nuw nsw i32 %51, 3, !dbg !65
  %207 = and i32 %206, 112, !dbg !65
  %208 = shl nuw nsw i32 %197, 12, !dbg !65
  %209 = and i32 %51, 32, !dbg !65
  %210 = or disjoint i32 %205, %207, !dbg !65
  %211 = xor i32 %210, %209, !dbg !65
  %212 = or disjoint i32 %211, %208, !dbg !65
  %213 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %212, !dbg !65
  %214 = load <2 x i64>, ptr addrspace(3) %213, align 16, !dbg !65
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %213, i32 128, !dbg !65
  %216 = load <2 x i64>, ptr addrspace(3) %215, align 16, !dbg !65
  %217 = getelementptr inbounds nuw i8, ptr addrspace(3) %213, i32 256, !dbg !65
  %218 = load <2 x i64>, ptr addrspace(3) %217, align 16, !dbg !65
  %219 = getelementptr inbounds nuw i8, ptr addrspace(3) %213, i32 384, !dbg !65
  %220 = load <2 x i64>, ptr addrspace(3) %219, align 16, !dbg !65
  %221 = xor i32 %212, 64, !dbg !65
  %222 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %221, !dbg !65
  %223 = load <2 x i64>, ptr addrspace(3) %222, align 16, !dbg !65
  %224 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 128, !dbg !65
  %225 = load <2 x i64>, ptr addrspace(3) %224, align 16, !dbg !65
  %226 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 256, !dbg !65
  %227 = load <2 x i64>, ptr addrspace(3) %226, align 16, !dbg !65
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 384, !dbg !65
  %229 = load <2 x i64>, ptr addrspace(3) %228, align 16, !dbg !65
  %230 = add i32 %38, -256, !dbg !66
  %231 = add i32 %230, %47, !dbg !67
  %232 = icmp slt i32 %93, %231, !dbg !68
  %.extract300 = extractelement <2 x i64> %214, i64 0
  %.extract302 = extractelement <2 x i64> %214, i64 1
  %.extract304 = extractelement <2 x i64> %223, i64 0
  %.extract306 = extractelement <2 x i64> %223, i64 1
  %.extract308 = extractelement <2 x i64> %216, i64 0
  %.extract310 = extractelement <2 x i64> %216, i64 1
  %.extract312 = extractelement <2 x i64> %225, i64 0
  %.extract314 = extractelement <2 x i64> %225, i64 1
  %.extract316 = extractelement <2 x i64> %218, i64 0
  %.extract318 = extractelement <2 x i64> %218, i64 1
  %.extract320 = extractelement <2 x i64> %227, i64 0
  %.extract322 = extractelement <2 x i64> %227, i64 1
  %.extract324 = extractelement <2 x i64> %220, i64 0
  %.extract326 = extractelement <2 x i64> %220, i64 1
  %.extract328 = extractelement <2 x i64> %229, i64 0
  %.extract330 = extractelement <2 x i64> %229, i64 1
  %233 = shl nuw nsw i32 %51, 2
  %234 = and i32 %233, 1020
  %235 = xor i32 %234, 128
  %236 = mul i32 %.decomposed, %15
  %237 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %14, i16 0, i32 2147483646, i32 159744)
  %238 = shufflevector <16 x i8> %154, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %239 = shufflevector <16 x i8> %154, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %240 = shufflevector <16 x i8> %154, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %241 = shufflevector <16 x i8> %154, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %242 = shufflevector <16 x i8> %156, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %243 = shufflevector <16 x i8> %156, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %244 = shufflevector <16 x i8> %156, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %245 = shufflevector <16 x i8> %156, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %246 = shufflevector <16 x i8> %158, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %247 = shufflevector <16 x i8> %158, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %248 = shufflevector <16 x i8> %158, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %249 = shufflevector <16 x i8> %158, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %250 = shufflevector <16 x i8> %160, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %251 = shufflevector <16 x i8> %160, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %252 = shufflevector <16 x i8> %160, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %253 = shufflevector <16 x i8> %160, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %254 = shufflevector <16 x i8> %162, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %255 = shufflevector <16 x i8> %162, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %256 = shufflevector <16 x i8> %162, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %257 = shufflevector <16 x i8> %162, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %258 = shufflevector <16 x i8> %164, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %259 = shufflevector <16 x i8> %164, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %260 = shufflevector <16 x i8> %164, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %261 = shufflevector <16 x i8> %164, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %262 = shufflevector <16 x i8> %166, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %263 = shufflevector <16 x i8> %166, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %264 = shufflevector <16 x i8> %166, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %265 = shufflevector <16 x i8> %166, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %266 = shufflevector <16 x i8> %168, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %267 = shufflevector <16 x i8> %168, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %268 = shufflevector <16 x i8> %168, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %269 = shufflevector <16 x i8> %168, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  br i1 %232, label %.lr.ph, label %._crit_edge, !dbg !68

.lr.ph:                                           ; preds = %43
  %270 = icmp eq i32 %69, 0
  %271 = shufflevector <4 x float> %92, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !69
  %272 = shufflevector <4 x float> %92, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !69
  %273 = shufflevector <4 x float> %90, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !69
  %274 = shufflevector <4 x float> %90, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !69
  %275 = shufflevector <4 x float> %86, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !69
  br label %276, !dbg !68

276:                                              ; preds = %.lr.ph, %276
  %.pn259466 = phi float [ %193, %.lr.ph ], [ %664, %276 ]
  %.pn261465 = phi float [ %189, %.lr.ph ], [ %660, %276 ]
  %.pn263464 = phi float [ %185, %.lr.ph ], [ %656, %276 ]
  %.pn265463 = phi float [ %181, %.lr.ph ], [ %652, %276 ]
  %277 = phi i32 [ %93, %.lr.ph ], [ %310, %276 ]
  %278 = phi <4 x i8> [ %238, %.lr.ph ], [ %910, %276 ]
  %279 = phi <4 x i8> [ %239, %.lr.ph ], [ %911, %276 ]
  %280 = phi <4 x i8> [ %240, %.lr.ph ], [ %912, %276 ]
  %281 = phi <4 x i8> [ %241, %.lr.ph ], [ %913, %276 ]
  %282 = phi <4 x i8> [ %242, %.lr.ph ], [ %914, %276 ]
  %283 = phi <4 x i8> [ %243, %.lr.ph ], [ %915, %276 ]
  %284 = phi <4 x i8> [ %244, %.lr.ph ], [ %916, %276 ]
  %285 = phi <4 x i8> [ %245, %.lr.ph ], [ %917, %276 ]
  %286 = phi <4 x i8> [ %246, %.lr.ph ], [ %918, %276 ]
  %287 = phi <4 x i8> [ %247, %.lr.ph ], [ %919, %276 ]
  %288 = phi <4 x i8> [ %248, %.lr.ph ], [ %920, %276 ]
  %289 = phi <4 x i8> [ %249, %.lr.ph ], [ %921, %276 ]
  %290 = phi <4 x i8> [ %250, %.lr.ph ], [ %922, %276 ]
  %291 = phi <4 x i8> [ %251, %.lr.ph ], [ %923, %276 ]
  %292 = phi <4 x i8> [ %252, %.lr.ph ], [ %924, %276 ]
  %293 = phi <4 x i8> [ %253, %.lr.ph ], [ %925, %276 ]
  %294 = phi <4 x i8> [ %254, %.lr.ph ], [ %926, %276 ]
  %295 = phi <4 x i8> [ %255, %.lr.ph ], [ %927, %276 ]
  %296 = phi <4 x i8> [ %256, %.lr.ph ], [ %928, %276 ]
  %297 = phi <4 x i8> [ %257, %.lr.ph ], [ %929, %276 ]
  %298 = phi <4 x i8> [ %258, %.lr.ph ], [ %930, %276 ]
  %299 = phi <4 x i8> [ %259, %.lr.ph ], [ %931, %276 ]
  %300 = phi <4 x i8> [ %260, %.lr.ph ], [ %932, %276 ]
  %301 = phi <4 x i8> [ %261, %.lr.ph ], [ %933, %276 ]
  %302 = phi <4 x i8> [ %262, %.lr.ph ], [ %934, %276 ]
  %303 = phi <4 x i8> [ %263, %.lr.ph ], [ %935, %276 ]
  %304 = phi <4 x i8> [ %264, %.lr.ph ], [ %936, %276 ]
  %305 = phi <4 x i8> [ %265, %.lr.ph ], [ %937, %276 ]
  %306 = phi <4 x i8> [ %266, %.lr.ph ], [ %938, %276 ]
  %307 = phi <4 x i8> [ %267, %.lr.ph ], [ %939, %276 ]
  %308 = phi <4 x i8> [ %268, %.lr.ph ], [ %940, %276 ]
  %309 = phi <4 x i8> [ %269, %.lr.ph ], [ %941, %276 ]
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !70
  %310 = add i32 %277, 256, !dbg !71
  %311 = ashr exact i32 %310, 4, !dbg !72
  %312 = add i32 %311, %114, !dbg !73
  %313 = add i32 %312, %102, !dbg !74
  %314 = add i32 %312, %103, !dbg !74
  %315 = add i32 %312, %104, !dbg !74
  %316 = add i32 %312, %105, !dbg !74
  %317 = shl i32 %313, 2, !dbg !75
  %318 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %317, i32 0, i32 0), !dbg !75
  %319 = shl i32 %314, 2, !dbg !75
  %320 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %319, i32 0, i32 0), !dbg !75
  %321 = shl i32 %315, 2, !dbg !75
  %322 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %321, i32 0, i32 0), !dbg !75
  %323 = shl i32 %316, 2, !dbg !75
  %324 = tail call i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) %120, i32 %323, i32 0, i32 0), !dbg !75
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !76
  %325 = shufflevector <4 x i8> %278, <4 x i8> %279, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %326 = bitcast <8 x i8> %325 to i64, !dbg !77
  %327 = shufflevector <4 x i8> %280, <4 x i8> %281, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %328 = bitcast <8 x i8> %327 to i64, !dbg !77
  %329 = shufflevector <4 x i8> %282, <4 x i8> %283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %330 = bitcast <8 x i8> %329 to i64, !dbg !77
  %331 = shufflevector <4 x i8> %284, <4 x i8> %285, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %332 = bitcast <8 x i8> %331 to i64, !dbg !77
  %333 = shufflevector <4 x i8> %286, <4 x i8> %287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %334 = bitcast <8 x i8> %333 to i64, !dbg !77
  %335 = shufflevector <4 x i8> %288, <4 x i8> %289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %336 = bitcast <8 x i8> %335 to i64, !dbg !77
  %337 = shufflevector <4 x i8> %290, <4 x i8> %291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %338 = bitcast <8 x i8> %337 to i64, !dbg !77
  %339 = shufflevector <4 x i8> %292, <4 x i8> %293, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %340 = bitcast <8 x i8> %339 to i64, !dbg !77
  %341 = shufflevector <4 x i8> %294, <4 x i8> %295, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %342 = bitcast <8 x i8> %341 to i64, !dbg !77
  %343 = shufflevector <4 x i8> %296, <4 x i8> %297, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %344 = bitcast <8 x i8> %343 to i64, !dbg !77
  %345 = shufflevector <4 x i8> %298, <4 x i8> %299, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %346 = bitcast <8 x i8> %345 to i64, !dbg !77
  %347 = shufflevector <4 x i8> %300, <4 x i8> %301, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %348 = bitcast <8 x i8> %347 to i64, !dbg !77
  %349 = shufflevector <4 x i8> %302, <4 x i8> %303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %350 = bitcast <8 x i8> %349 to i64, !dbg !77
  %351 = shufflevector <4 x i8> %304, <4 x i8> %305, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %352 = bitcast <8 x i8> %351 to i64, !dbg !77
  %353 = shufflevector <4 x i8> %306, <4 x i8> %307, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %354 = bitcast <8 x i8> %353 to i64, !dbg !77
  %355 = shufflevector <4 x i8> %308, <4 x i8> %309, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !77
  %356 = bitcast <8 x i8> %355 to i64, !dbg !77
  %357 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %326, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %358 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %328, <4 x float> %357, i32 0, i32 0, i32 0), !dbg !77
  %359 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %330, <4 x float> %358, i32 0, i32 0, i32 0), !dbg !77
  %360 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %332, <4 x float> %359, i32 0, i32 0, i32 0), !dbg !77
  %361 = extractelement <4 x float> %360, i64 0, !dbg !77
  %362 = extractelement <4 x float> %360, i64 1, !dbg !77
  %363 = extractelement <4 x float> %360, i64 2, !dbg !77
  %364 = extractelement <4 x float> %360, i64 3, !dbg !77
  %365 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %334, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %366 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %336, <4 x float> %365, i32 0, i32 0, i32 0), !dbg !77
  %367 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %338, <4 x float> %366, i32 0, i32 0, i32 0), !dbg !77
  %368 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %340, <4 x float> %367, i32 0, i32 0, i32 0), !dbg !77
  %369 = extractelement <4 x float> %368, i64 0, !dbg !77
  %370 = extractelement <4 x float> %368, i64 1, !dbg !77
  %371 = extractelement <4 x float> %368, i64 2, !dbg !77
  %372 = extractelement <4 x float> %368, i64 3, !dbg !77
  %373 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %342, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %374 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %344, <4 x float> %373, i32 0, i32 0, i32 0), !dbg !77
  %375 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %346, <4 x float> %374, i32 0, i32 0, i32 0), !dbg !77
  %376 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %348, <4 x float> %375, i32 0, i32 0, i32 0), !dbg !77
  %377 = extractelement <4 x float> %376, i64 0, !dbg !77
  %378 = extractelement <4 x float> %376, i64 1, !dbg !77
  %379 = extractelement <4 x float> %376, i64 2, !dbg !77
  %380 = extractelement <4 x float> %376, i64 3, !dbg !77
  %381 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %350, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %382 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %352, <4 x float> %381, i32 0, i32 0, i32 0), !dbg !77
  %383 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %354, <4 x float> %382, i32 0, i32 0, i32 0), !dbg !77
  %384 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %356, <4 x float> %383, i32 0, i32 0, i32 0), !dbg !77
  %385 = extractelement <4 x float> %384, i64 0, !dbg !77
  %386 = extractelement <4 x float> %384, i64 1, !dbg !77
  %387 = extractelement <4 x float> %384, i64 2, !dbg !77
  %388 = extractelement <4 x float> %384, i64 3, !dbg !77
  %389 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %326, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %390 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %328, <4 x float> %389, i32 0, i32 0, i32 0), !dbg !77
  %391 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %330, <4 x float> %390, i32 0, i32 0, i32 0), !dbg !77
  %392 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %332, <4 x float> %391, i32 0, i32 0, i32 0), !dbg !77
  %393 = extractelement <4 x float> %392, i64 0, !dbg !77
  %394 = extractelement <4 x float> %392, i64 1, !dbg !77
  %395 = extractelement <4 x float> %392, i64 2, !dbg !77
  %396 = extractelement <4 x float> %392, i64 3, !dbg !77
  %397 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %334, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %398 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %336, <4 x float> %397, i32 0, i32 0, i32 0), !dbg !77
  %399 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %338, <4 x float> %398, i32 0, i32 0, i32 0), !dbg !77
  %400 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %340, <4 x float> %399, i32 0, i32 0, i32 0), !dbg !77
  %401 = extractelement <4 x float> %400, i64 0, !dbg !77
  %402 = extractelement <4 x float> %400, i64 1, !dbg !77
  %403 = extractelement <4 x float> %400, i64 2, !dbg !77
  %404 = extractelement <4 x float> %400, i64 3, !dbg !77
  %405 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %342, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %406 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %344, <4 x float> %405, i32 0, i32 0, i32 0), !dbg !77
  %407 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %346, <4 x float> %406, i32 0, i32 0, i32 0), !dbg !77
  %408 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %348, <4 x float> %407, i32 0, i32 0, i32 0), !dbg !77
  %409 = extractelement <4 x float> %408, i64 0, !dbg !77
  %410 = extractelement <4 x float> %408, i64 1, !dbg !77
  %411 = extractelement <4 x float> %408, i64 2, !dbg !77
  %412 = extractelement <4 x float> %408, i64 3, !dbg !77
  %413 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %350, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %414 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %352, <4 x float> %413, i32 0, i32 0, i32 0), !dbg !77
  %415 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %354, <4 x float> %414, i32 0, i32 0, i32 0), !dbg !77
  %416 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %356, <4 x float> %415, i32 0, i32 0, i32 0), !dbg !77
  %417 = extractelement <4 x float> %416, i64 0, !dbg !77
  %418 = extractelement <4 x float> %416, i64 1, !dbg !77
  %419 = extractelement <4 x float> %416, i64 2, !dbg !77
  %420 = extractelement <4 x float> %416, i64 3, !dbg !77
  %421 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %326, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %422 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %328, <4 x float> %421, i32 0, i32 0, i32 0), !dbg !77
  %423 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %330, <4 x float> %422, i32 0, i32 0, i32 0), !dbg !77
  %424 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %332, <4 x float> %423, i32 0, i32 0, i32 0), !dbg !77
  %425 = extractelement <4 x float> %424, i64 0, !dbg !77
  %426 = extractelement <4 x float> %424, i64 1, !dbg !77
  %427 = extractelement <4 x float> %424, i64 2, !dbg !77
  %428 = extractelement <4 x float> %424, i64 3, !dbg !77
  %429 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %334, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %430 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %336, <4 x float> %429, i32 0, i32 0, i32 0), !dbg !77
  %431 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %338, <4 x float> %430, i32 0, i32 0, i32 0), !dbg !77
  %432 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %340, <4 x float> %431, i32 0, i32 0, i32 0), !dbg !77
  %433 = extractelement <4 x float> %432, i64 0, !dbg !77
  %434 = extractelement <4 x float> %432, i64 1, !dbg !77
  %435 = extractelement <4 x float> %432, i64 2, !dbg !77
  %436 = extractelement <4 x float> %432, i64 3, !dbg !77
  %437 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %342, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %438 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %344, <4 x float> %437, i32 0, i32 0, i32 0), !dbg !77
  %439 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %346, <4 x float> %438, i32 0, i32 0, i32 0), !dbg !77
  %440 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %348, <4 x float> %439, i32 0, i32 0, i32 0), !dbg !77
  %441 = extractelement <4 x float> %440, i64 0, !dbg !77
  %442 = extractelement <4 x float> %440, i64 1, !dbg !77
  %443 = extractelement <4 x float> %440, i64 2, !dbg !77
  %444 = extractelement <4 x float> %440, i64 3, !dbg !77
  %445 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %350, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %446 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %352, <4 x float> %445, i32 0, i32 0, i32 0), !dbg !77
  %447 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %354, <4 x float> %446, i32 0, i32 0, i32 0), !dbg !77
  %448 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %356, <4 x float> %447, i32 0, i32 0, i32 0), !dbg !77
  %449 = extractelement <4 x float> %448, i64 0, !dbg !77
  %450 = extractelement <4 x float> %448, i64 1, !dbg !77
  %451 = extractelement <4 x float> %448, i64 2, !dbg !77
  %452 = extractelement <4 x float> %448, i64 3, !dbg !77
  %453 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %326, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %454 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %328, <4 x float> %453, i32 0, i32 0, i32 0), !dbg !77
  %455 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %330, <4 x float> %454, i32 0, i32 0, i32 0), !dbg !77
  %456 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %332, <4 x float> %455, i32 0, i32 0, i32 0), !dbg !77
  %457 = extractelement <4 x float> %456, i64 0, !dbg !77
  %458 = extractelement <4 x float> %456, i64 1, !dbg !77
  %459 = extractelement <4 x float> %456, i64 2, !dbg !77
  %460 = extractelement <4 x float> %456, i64 3, !dbg !77
  %461 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %334, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %462 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %336, <4 x float> %461, i32 0, i32 0, i32 0), !dbg !77
  %463 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %338, <4 x float> %462, i32 0, i32 0, i32 0), !dbg !77
  %464 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %340, <4 x float> %463, i32 0, i32 0, i32 0), !dbg !77
  %465 = extractelement <4 x float> %464, i64 0, !dbg !77
  %466 = extractelement <4 x float> %464, i64 1, !dbg !77
  %467 = extractelement <4 x float> %464, i64 2, !dbg !77
  %468 = extractelement <4 x float> %464, i64 3, !dbg !77
  %469 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %342, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %470 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %344, <4 x float> %469, i32 0, i32 0, i32 0), !dbg !77
  %471 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %346, <4 x float> %470, i32 0, i32 0, i32 0), !dbg !77
  %472 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %348, <4 x float> %471, i32 0, i32 0, i32 0), !dbg !77
  %473 = extractelement <4 x float> %472, i64 0, !dbg !77
  %474 = extractelement <4 x float> %472, i64 1, !dbg !77
  %475 = extractelement <4 x float> %472, i64 2, !dbg !77
  %476 = extractelement <4 x float> %472, i64 3, !dbg !77
  %477 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %350, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !77
  %478 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %352, <4 x float> %477, i32 0, i32 0, i32 0), !dbg !77
  %479 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %354, <4 x float> %478, i32 0, i32 0, i32 0), !dbg !77
  %480 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %356, <4 x float> %479, i32 0, i32 0, i32 0), !dbg !77
  %481 = extractelement <4 x float> %480, i64 0, !dbg !77
  %482 = extractelement <4 x float> %480, i64 1, !dbg !77
  %483 = extractelement <4 x float> %480, i64 2, !dbg !77
  %484 = extractelement <4 x float> %480, i64 3, !dbg !77
  %485 = mul i32 %318, %7, !dbg !78
  %486 = mul i32 %320, %7, !dbg !78
  %487 = mul i32 %322, %7, !dbg !78
  %488 = mul i32 %324, %7, !dbg !78
  %489 = add i32 %485, %134, !dbg !79
  %490 = add i32 %485, %135, !dbg !79
  %491 = add i32 %486, %134, !dbg !79
  %492 = add i32 %486, %135, !dbg !79
  %493 = add i32 %487, %134, !dbg !79
  %494 = add i32 %487, %135, !dbg !79
  %495 = add i32 %488, %134, !dbg !79
  %496 = add i32 %488, %135, !dbg !79
  %497 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %489, i32 0, i32 0), !dbg !80
  %498 = bitcast <4 x i32> %497 to <16 x i8>, !dbg !80
  %499 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %490, i32 0, i32 0), !dbg !80
  %500 = bitcast <4 x i32> %499 to <16 x i8>, !dbg !80
  %501 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %491, i32 0, i32 0), !dbg !80
  %502 = bitcast <4 x i32> %501 to <16 x i8>, !dbg !80
  %503 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %492, i32 0, i32 0), !dbg !80
  %504 = bitcast <4 x i32> %503 to <16 x i8>, !dbg !80
  %505 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %493, i32 0, i32 0), !dbg !80
  %506 = bitcast <4 x i32> %505 to <16 x i8>, !dbg !80
  %507 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %494, i32 0, i32 0), !dbg !80
  %508 = bitcast <4 x i32> %507 to <16 x i8>, !dbg !80
  %509 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %495, i32 0, i32 0), !dbg !80
  %510 = bitcast <4 x i32> %509 to <16 x i8>, !dbg !80
  %511 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %152, i32 %496, i32 0, i32 0), !dbg !80
  %512 = bitcast <4 x i32> %511 to <16 x i8>, !dbg !80
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !81
  %513 = fmul float %.pn265463, %361, !dbg !82
  %514 = fmul float %.pn265463, %362, !dbg !82
  %515 = fmul float %.pn265463, %363, !dbg !82
  %516 = fmul float %.pn265463, %364, !dbg !82
  %517 = fmul float %.pn263464, %369, !dbg !82
  %518 = fmul float %.pn263464, %370, !dbg !82
  %519 = fmul float %.pn263464, %371, !dbg !82
  %520 = fmul float %.pn263464, %372, !dbg !82
  %521 = fmul float %.pn261465, %377, !dbg !82
  %522 = fmul float %.pn261465, %378, !dbg !82
  %523 = fmul float %.pn261465, %379, !dbg !82
  %524 = fmul float %.pn261465, %380, !dbg !82
  %525 = fmul float %.pn259466, %385, !dbg !82
  %526 = fmul float %.pn259466, %386, !dbg !82
  %527 = fmul float %.pn259466, %387, !dbg !82
  %528 = fmul float %.pn259466, %388, !dbg !82
  %529 = fmul float %.pn265463, %393, !dbg !82
  %530 = fmul float %.pn265463, %394, !dbg !82
  %531 = fmul float %.pn265463, %395, !dbg !82
  %532 = fmul float %.pn265463, %396, !dbg !82
  %533 = fmul float %.pn263464, %401, !dbg !82
  %534 = fmul float %.pn263464, %402, !dbg !82
  %535 = fmul float %.pn263464, %403, !dbg !82
  %536 = fmul float %.pn263464, %404, !dbg !82
  %537 = fmul float %.pn261465, %409, !dbg !82
  %538 = fmul float %.pn261465, %410, !dbg !82
  %539 = fmul float %.pn261465, %411, !dbg !82
  %540 = fmul float %.pn261465, %412, !dbg !82
  %541 = fmul float %.pn259466, %417, !dbg !82
  %542 = fmul float %.pn259466, %418, !dbg !82
  %543 = fmul float %.pn259466, %419, !dbg !82
  %544 = fmul float %.pn259466, %420, !dbg !82
  %545 = fmul float %.pn265463, %425, !dbg !82
  %546 = fmul float %.pn265463, %426, !dbg !82
  %547 = fmul float %.pn265463, %427, !dbg !82
  %548 = fmul float %.pn265463, %428, !dbg !82
  %549 = fmul float %.pn263464, %433, !dbg !82
  %550 = fmul float %.pn263464, %434, !dbg !82
  %551 = fmul float %.pn263464, %435, !dbg !82
  %552 = fmul float %.pn263464, %436, !dbg !82
  %553 = fmul float %.pn261465, %441, !dbg !82
  %554 = fmul float %.pn261465, %442, !dbg !82
  %555 = fmul float %.pn261465, %443, !dbg !82
  %556 = fmul float %.pn261465, %444, !dbg !82
  %557 = fmul float %.pn259466, %449, !dbg !82
  %558 = fmul float %.pn259466, %450, !dbg !82
  %559 = fmul float %.pn259466, %451, !dbg !82
  %560 = fmul float %.pn259466, %452, !dbg !82
  %561 = fmul float %.pn265463, %457, !dbg !82
  %562 = fmul float %.pn265463, %458, !dbg !82
  %563 = fmul float %.pn265463, %459, !dbg !82
  %564 = fmul float %.pn265463, %460, !dbg !82
  %565 = fmul float %.pn263464, %465, !dbg !82
  %566 = fmul float %.pn263464, %466, !dbg !82
  %567 = fmul float %.pn263464, %467, !dbg !82
  %568 = fmul float %.pn263464, %468, !dbg !82
  %569 = fmul float %.pn261465, %473, !dbg !82
  %570 = fmul float %.pn261465, %474, !dbg !82
  %571 = fmul float %.pn261465, %475, !dbg !82
  %572 = fmul float %.pn261465, %476, !dbg !82
  %573 = fmul float %.pn259466, %481, !dbg !82
  %574 = fmul float %.pn259466, %482, !dbg !82
  %575 = fmul float %.pn259466, %483, !dbg !82
  %576 = fmul float %.pn259466, %484, !dbg !82
  %577 = tail call float @llvm.maxnum.f32(float %513, float 0.000000e+00), !dbg !83
  %578 = tail call float @llvm.maxnum.f32(float %514, float 0.000000e+00), !dbg !83
  %579 = tail call float @llvm.maxnum.f32(float %515, float 0.000000e+00), !dbg !83
  %580 = tail call float @llvm.maxnum.f32(float %516, float 0.000000e+00), !dbg !83
  %581 = tail call float @llvm.maxnum.f32(float %517, float 0.000000e+00), !dbg !83
  %582 = tail call float @llvm.maxnum.f32(float %518, float 0.000000e+00), !dbg !83
  %583 = tail call float @llvm.maxnum.f32(float %519, float 0.000000e+00), !dbg !83
  %584 = tail call float @llvm.maxnum.f32(float %520, float 0.000000e+00), !dbg !83
  %585 = tail call float @llvm.maxnum.f32(float %521, float 0.000000e+00), !dbg !83
  %586 = tail call float @llvm.maxnum.f32(float %522, float 0.000000e+00), !dbg !83
  %587 = tail call float @llvm.maxnum.f32(float %523, float 0.000000e+00), !dbg !83
  %588 = tail call float @llvm.maxnum.f32(float %524, float 0.000000e+00), !dbg !83
  %589 = tail call float @llvm.maxnum.f32(float %525, float 0.000000e+00), !dbg !83
  %590 = tail call float @llvm.maxnum.f32(float %526, float 0.000000e+00), !dbg !83
  %591 = tail call float @llvm.maxnum.f32(float %527, float 0.000000e+00), !dbg !83
  %592 = tail call float @llvm.maxnum.f32(float %528, float 0.000000e+00), !dbg !83
  %593 = tail call float @llvm.maxnum.f32(float %529, float 0.000000e+00), !dbg !83
  %594 = tail call float @llvm.maxnum.f32(float %530, float 0.000000e+00), !dbg !83
  %595 = tail call float @llvm.maxnum.f32(float %531, float 0.000000e+00), !dbg !83
  %596 = tail call float @llvm.maxnum.f32(float %532, float 0.000000e+00), !dbg !83
  %597 = tail call float @llvm.maxnum.f32(float %533, float 0.000000e+00), !dbg !83
  %598 = tail call float @llvm.maxnum.f32(float %534, float 0.000000e+00), !dbg !83
  %599 = tail call float @llvm.maxnum.f32(float %535, float 0.000000e+00), !dbg !83
  %600 = tail call float @llvm.maxnum.f32(float %536, float 0.000000e+00), !dbg !83
  %601 = tail call float @llvm.maxnum.f32(float %537, float 0.000000e+00), !dbg !83
  %602 = tail call float @llvm.maxnum.f32(float %538, float 0.000000e+00), !dbg !83
  %603 = tail call float @llvm.maxnum.f32(float %539, float 0.000000e+00), !dbg !83
  %604 = tail call float @llvm.maxnum.f32(float %540, float 0.000000e+00), !dbg !83
  %605 = tail call float @llvm.maxnum.f32(float %541, float 0.000000e+00), !dbg !83
  %606 = tail call float @llvm.maxnum.f32(float %542, float 0.000000e+00), !dbg !83
  %607 = tail call float @llvm.maxnum.f32(float %543, float 0.000000e+00), !dbg !83
  %608 = tail call float @llvm.maxnum.f32(float %544, float 0.000000e+00), !dbg !83
  %609 = tail call float @llvm.maxnum.f32(float %545, float 0.000000e+00), !dbg !83
  %610 = tail call float @llvm.maxnum.f32(float %546, float 0.000000e+00), !dbg !83
  %611 = tail call float @llvm.maxnum.f32(float %547, float 0.000000e+00), !dbg !83
  %612 = tail call float @llvm.maxnum.f32(float %548, float 0.000000e+00), !dbg !83
  %613 = tail call float @llvm.maxnum.f32(float %549, float 0.000000e+00), !dbg !83
  %614 = tail call float @llvm.maxnum.f32(float %550, float 0.000000e+00), !dbg !83
  %615 = tail call float @llvm.maxnum.f32(float %551, float 0.000000e+00), !dbg !83
  %616 = tail call float @llvm.maxnum.f32(float %552, float 0.000000e+00), !dbg !83
  %617 = tail call float @llvm.maxnum.f32(float %553, float 0.000000e+00), !dbg !83
  %618 = tail call float @llvm.maxnum.f32(float %554, float 0.000000e+00), !dbg !83
  %619 = tail call float @llvm.maxnum.f32(float %555, float 0.000000e+00), !dbg !83
  %620 = tail call float @llvm.maxnum.f32(float %556, float 0.000000e+00), !dbg !83
  %621 = tail call float @llvm.maxnum.f32(float %557, float 0.000000e+00), !dbg !83
  %622 = tail call float @llvm.maxnum.f32(float %558, float 0.000000e+00), !dbg !83
  %623 = tail call float @llvm.maxnum.f32(float %559, float 0.000000e+00), !dbg !83
  %624 = tail call float @llvm.maxnum.f32(float %560, float 0.000000e+00), !dbg !83
  %625 = tail call float @llvm.maxnum.f32(float %561, float 0.000000e+00), !dbg !83
  %626 = tail call float @llvm.maxnum.f32(float %562, float 0.000000e+00), !dbg !83
  %627 = tail call float @llvm.maxnum.f32(float %563, float 0.000000e+00), !dbg !83
  %628 = tail call float @llvm.maxnum.f32(float %564, float 0.000000e+00), !dbg !83
  %629 = tail call float @llvm.maxnum.f32(float %565, float 0.000000e+00), !dbg !83
  %630 = tail call float @llvm.maxnum.f32(float %566, float 0.000000e+00), !dbg !83
  %631 = tail call float @llvm.maxnum.f32(float %567, float 0.000000e+00), !dbg !83
  %632 = tail call float @llvm.maxnum.f32(float %568, float 0.000000e+00), !dbg !83
  %633 = tail call float @llvm.maxnum.f32(float %569, float 0.000000e+00), !dbg !83
  %634 = tail call float @llvm.maxnum.f32(float %570, float 0.000000e+00), !dbg !83
  %635 = tail call float @llvm.maxnum.f32(float %571, float 0.000000e+00), !dbg !83
  %636 = tail call float @llvm.maxnum.f32(float %572, float 0.000000e+00), !dbg !83
  %637 = tail call float @llvm.maxnum.f32(float %573, float 0.000000e+00), !dbg !83
  %638 = tail call float @llvm.maxnum.f32(float %574, float 0.000000e+00), !dbg !83
  %639 = tail call float @llvm.maxnum.f32(float %575, float 0.000000e+00), !dbg !83
  %640 = tail call float @llvm.maxnum.f32(float %576, float 0.000000e+00), !dbg !83
  tail call void @llvm.amdgcn.sched.barrier(i32 0), !dbg !84
  %641 = mul i32 %318, %9, !dbg !85
  %642 = mul i32 %320, %9, !dbg !85
  %643 = mul i32 %322, %9, !dbg !85
  %644 = mul i32 %324, %9, !dbg !85
  %645 = add i32 %641, %95, !dbg !86
  %646 = add i32 %642, %95, !dbg !86
  %647 = add i32 %643, %95, !dbg !86
  %648 = add i32 %644, %95, !dbg !86
  %649 = shl i32 %645, 2, !dbg !87
  %650 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %649, i32 0, i32 0), !dbg !87
  %651 = bitcast float %650 to <1 x float>, !dbg !87
  %652 = extractelement <1 x float> %651, i64 0, !dbg !87
  %653 = shl i32 %646, 2, !dbg !87
  %654 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %653, i32 0, i32 0), !dbg !87
  %655 = bitcast float %654 to <1 x float>, !dbg !87
  %656 = extractelement <1 x float> %655, i64 0, !dbg !87
  %657 = shl i32 %647, 2, !dbg !87
  %658 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %657, i32 0, i32 0), !dbg !87
  %659 = bitcast float %658 to <1 x float>, !dbg !87
  %660 = extractelement <1 x float> %659, i64 0, !dbg !87
  %661 = shl i32 %648, 2, !dbg !87
  %662 = tail call float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) %177, i32 %661, i32 0, i32 0), !dbg !87
  %663 = bitcast float %662 to <1 x float>, !dbg !87
  %664 = extractelement <1 x float> %663, i64 0, !dbg !87
  %665 = fmul float %81, %577, !dbg !69
  %666 = fmul float %82, %578, !dbg !69
  %667 = fmul float %83, %579, !dbg !69
  %668 = fmul float %84, %580, !dbg !69
  %669 = fmul float %81, %581, !dbg !69
  %670 = fmul float %82, %582, !dbg !69
  %671 = fmul float %83, %583, !dbg !69
  %672 = fmul float %84, %584, !dbg !69
  %673 = fmul float %81, %585, !dbg !69
  %674 = fmul float %82, %586, !dbg !69
  %675 = fmul float %83, %587, !dbg !69
  %676 = fmul float %84, %588, !dbg !69
  %677 = fmul float %81, %589, !dbg !69
  %678 = fmul float %82, %590, !dbg !69
  %679 = fmul float %83, %591, !dbg !69
  %680 = fmul float %84, %592, !dbg !69
  %681 = fmul float %87, %593, !dbg !69
  %682 = fmul float %88, %594, !dbg !69
  %683 = insertelement <2 x float> poison, float %595, i64 0, !dbg !69
  %684 = insertelement <2 x float> %683, float %596, i64 1, !dbg !69
  %685 = fmul <2 x float> %275, %684, !dbg !69
  %686 = fmul float %87, %597, !dbg !69
  %687 = fmul float %88, %598, !dbg !69
  %688 = insertelement <2 x float> poison, float %599, i64 0, !dbg !69
  %689 = insertelement <2 x float> %688, float %600, i64 1, !dbg !69
  %690 = fmul <2 x float> %275, %689, !dbg !69
  %691 = fmul float %87, %601, !dbg !69
  %692 = fmul float %88, %602, !dbg !69
  %693 = insertelement <2 x float> poison, float %603, i64 0, !dbg !69
  %694 = insertelement <2 x float> %693, float %604, i64 1, !dbg !69
  %695 = fmul <2 x float> %275, %694, !dbg !69
  %696 = fmul float %87, %605, !dbg !69
  %697 = fmul float %88, %606, !dbg !69
  %698 = insertelement <2 x float> poison, float %607, i64 0, !dbg !69
  %699 = insertelement <2 x float> %698, float %608, i64 1, !dbg !69
  %700 = fmul <2 x float> %275, %699, !dbg !69
  %701 = insertelement <2 x float> poison, float %609, i64 0, !dbg !69
  %702 = insertelement <2 x float> %701, float %610, i64 1, !dbg !69
  %703 = fmul <2 x float> %274, %702, !dbg !69
  %704 = insertelement <2 x float> poison, float %611, i64 0, !dbg !69
  %705 = insertelement <2 x float> %704, float %612, i64 1, !dbg !69
  %706 = fmul <2 x float> %273, %705, !dbg !69
  %707 = insertelement <2 x float> poison, float %613, i64 0, !dbg !69
  %708 = insertelement <2 x float> %707, float %614, i64 1, !dbg !69
  %709 = fmul <2 x float> %274, %708, !dbg !69
  %710 = insertelement <2 x float> poison, float %615, i64 0, !dbg !69
  %711 = insertelement <2 x float> %710, float %616, i64 1, !dbg !69
  %712 = fmul <2 x float> %273, %711, !dbg !69
  %713 = insertelement <2 x float> poison, float %617, i64 0, !dbg !69
  %714 = insertelement <2 x float> %713, float %618, i64 1, !dbg !69
  %715 = fmul <2 x float> %274, %714, !dbg !69
  %716 = insertelement <2 x float> poison, float %619, i64 0, !dbg !69
  %717 = insertelement <2 x float> %716, float %620, i64 1, !dbg !69
  %718 = fmul <2 x float> %273, %717, !dbg !69
  %719 = insertelement <2 x float> poison, float %621, i64 0, !dbg !69
  %720 = insertelement <2 x float> %719, float %622, i64 1, !dbg !69
  %721 = fmul <2 x float> %274, %720, !dbg !69
  %722 = insertelement <2 x float> poison, float %623, i64 0, !dbg !69
  %723 = insertelement <2 x float> %722, float %624, i64 1, !dbg !69
  %724 = fmul <2 x float> %273, %723, !dbg !69
  %725 = insertelement <2 x float> poison, float %625, i64 0, !dbg !69
  %726 = insertelement <2 x float> %725, float %626, i64 1, !dbg !69
  %727 = fmul <2 x float> %272, %726, !dbg !69
  %728 = insertelement <2 x float> poison, float %627, i64 0, !dbg !69
  %729 = insertelement <2 x float> %728, float %628, i64 1, !dbg !69
  %730 = fmul <2 x float> %271, %729, !dbg !69
  %731 = insertelement <2 x float> poison, float %629, i64 0, !dbg !69
  %732 = insertelement <2 x float> %731, float %630, i64 1, !dbg !69
  %733 = fmul <2 x float> %272, %732, !dbg !69
  %734 = insertelement <2 x float> poison, float %631, i64 0, !dbg !69
  %735 = insertelement <2 x float> %734, float %632, i64 1, !dbg !69
  %736 = fmul <2 x float> %271, %735, !dbg !69
  %737 = insertelement <2 x float> poison, float %633, i64 0, !dbg !69
  %738 = insertelement <2 x float> %737, float %634, i64 1, !dbg !69
  %739 = fmul <2 x float> %272, %738, !dbg !69
  %740 = insertelement <2 x float> poison, float %635, i64 0, !dbg !69
  %741 = insertelement <2 x float> %740, float %636, i64 1, !dbg !69
  %742 = fmul <2 x float> %271, %741, !dbg !69
  %743 = insertelement <2 x float> poison, float %637, i64 0, !dbg !69
  %744 = insertelement <2 x float> %743, float %638, i64 1, !dbg !69
  %745 = fmul <2 x float> %272, %744, !dbg !69
  %746 = insertelement <2 x float> poison, float %639, i64 0, !dbg !69
  %747 = insertelement <2 x float> %746, float %640, i64 1, !dbg !69
  %748 = fmul <2 x float> %271, %747, !dbg !69
  %749 = add i32 %277, %98, !dbg !88
  %750 = add i32 %277, %99, !dbg !88
  %751 = add i32 %277, %100, !dbg !88
  %752 = add i32 %277, %101, !dbg !88
  %.not331 = icmp sgt i32 %749, %31, !dbg !89
  %.not332 = icmp sgt i32 %750, %31, !dbg !89
  %.not333 = icmp sgt i32 %751, %31, !dbg !89
  %.not334 = icmp sgt i32 %752, %31, !dbg !89
  %753 = fadd float %665, %666, !dbg !90
  %754 = fadd float %667, %753, !dbg !90
  %755 = fadd float %668, %754, !dbg !90
  %756 = fadd float %669, %670, !dbg !90
  %757 = fadd float %671, %756, !dbg !90
  %758 = fadd float %672, %757, !dbg !90
  %759 = fadd float %673, %674, !dbg !90
  %760 = fadd float %675, %759, !dbg !90
  %761 = fadd float %676, %760, !dbg !90
  %762 = fadd float %677, %678, !dbg !90
  %763 = fadd float %679, %762, !dbg !90
  %764 = fadd float %680, %763, !dbg !90
  %765 = fadd float %755, %681, !dbg !90
  %766 = fadd float %682, %765, !dbg !90
  %767 = extractelement <2 x float> %685, i64 0, !dbg !90
  %768 = fadd float %767, %766, !dbg !90
  %769 = extractelement <2 x float> %685, i64 1, !dbg !90
  %770 = fadd float %769, %768, !dbg !90
  %771 = fadd float %758, %686, !dbg !90
  %772 = fadd float %687, %771, !dbg !90
  %773 = extractelement <2 x float> %690, i64 0, !dbg !90
  %774 = fadd float %773, %772, !dbg !90
  %775 = extractelement <2 x float> %690, i64 1, !dbg !90
  %776 = fadd float %775, %774, !dbg !90
  %777 = fadd float %761, %691, !dbg !90
  %778 = fadd float %692, %777, !dbg !90
  %779 = extractelement <2 x float> %695, i64 0, !dbg !90
  %780 = fadd float %779, %778, !dbg !90
  %781 = extractelement <2 x float> %695, i64 1, !dbg !90
  %782 = fadd float %781, %780, !dbg !90
  %783 = fadd float %764, %696, !dbg !90
  %784 = fadd float %697, %783, !dbg !90
  %785 = extractelement <2 x float> %700, i64 0, !dbg !90
  %786 = fadd float %785, %784, !dbg !90
  %787 = extractelement <2 x float> %700, i64 1, !dbg !90
  %788 = fadd float %787, %786, !dbg !90
  %789 = extractelement <2 x float> %703, i64 0, !dbg !90
  %790 = fadd float %770, %789, !dbg !90
  %791 = extractelement <2 x float> %703, i64 1, !dbg !90
  %792 = fadd float %791, %790, !dbg !90
  %793 = extractelement <2 x float> %706, i64 0, !dbg !90
  %794 = fadd float %793, %792, !dbg !90
  %795 = extractelement <2 x float> %706, i64 1, !dbg !90
  %796 = fadd float %795, %794, !dbg !90
  %797 = extractelement <2 x float> %709, i64 0, !dbg !90
  %798 = fadd float %776, %797, !dbg !90
  %799 = extractelement <2 x float> %709, i64 1, !dbg !90
  %800 = fadd float %799, %798, !dbg !90
  %801 = extractelement <2 x float> %712, i64 0, !dbg !90
  %802 = fadd float %801, %800, !dbg !90
  %803 = extractelement <2 x float> %712, i64 1, !dbg !90
  %804 = fadd float %803, %802, !dbg !90
  %805 = extractelement <2 x float> %715, i64 0, !dbg !90
  %806 = fadd float %782, %805, !dbg !90
  %807 = extractelement <2 x float> %715, i64 1, !dbg !90
  %808 = fadd float %807, %806, !dbg !90
  %809 = extractelement <2 x float> %718, i64 0, !dbg !90
  %810 = fadd float %809, %808, !dbg !90
  %811 = extractelement <2 x float> %718, i64 1, !dbg !90
  %812 = fadd float %811, %810, !dbg !90
  %813 = extractelement <2 x float> %721, i64 0, !dbg !90
  %814 = fadd float %788, %813, !dbg !90
  %815 = extractelement <2 x float> %721, i64 1, !dbg !90
  %816 = fadd float %815, %814, !dbg !90
  %817 = extractelement <2 x float> %724, i64 0, !dbg !90
  %818 = fadd float %817, %816, !dbg !90
  %819 = extractelement <2 x float> %724, i64 1, !dbg !90
  %820 = fadd float %819, %818, !dbg !90
  %821 = extractelement <2 x float> %727, i64 0, !dbg !90
  %822 = fadd float %796, %821, !dbg !90
  %823 = extractelement <2 x float> %727, i64 1, !dbg !90
  %824 = fadd float %823, %822, !dbg !90
  %825 = extractelement <2 x float> %730, i64 0, !dbg !90
  %826 = fadd float %825, %824, !dbg !90
  %827 = extractelement <2 x float> %730, i64 1, !dbg !90
  %828 = fadd float %827, %826, !dbg !90
  %829 = select i1 %.not331, float 0xFFF0000000000000, float %828, !dbg !90
  %830 = extractelement <2 x float> %733, i64 0, !dbg !90
  %831 = fadd float %804, %830, !dbg !90
  %832 = extractelement <2 x float> %733, i64 1, !dbg !90
  %833 = fadd float %832, %831, !dbg !90
  %834 = extractelement <2 x float> %736, i64 0, !dbg !90
  %835 = fadd float %834, %833, !dbg !90
  %836 = extractelement <2 x float> %736, i64 1, !dbg !90
  %837 = fadd float %836, %835, !dbg !90
  %838 = select i1 %.not332, float 0xFFF0000000000000, float %837, !dbg !90
  %839 = extractelement <2 x float> %739, i64 0, !dbg !90
  %840 = fadd float %812, %839, !dbg !90
  %841 = extractelement <2 x float> %739, i64 1, !dbg !90
  %842 = fadd float %841, %840, !dbg !90
  %843 = extractelement <2 x float> %742, i64 0, !dbg !90
  %844 = fadd float %843, %842, !dbg !90
  %845 = extractelement <2 x float> %742, i64 1, !dbg !90
  %846 = fadd float %845, %844, !dbg !90
  %847 = select i1 %.not333, float 0xFFF0000000000000, float %846, !dbg !90
  %848 = extractelement <2 x float> %745, i64 0, !dbg !90
  %849 = fadd float %820, %848, !dbg !90
  %850 = extractelement <2 x float> %745, i64 1, !dbg !90
  %851 = fadd float %850, %849, !dbg !90
  %852 = extractelement <2 x float> %748, i64 0, !dbg !90
  %853 = fadd float %852, %851, !dbg !90
  %854 = extractelement <2 x float> %748, i64 1, !dbg !90
  %855 = fadd float %854, %853, !dbg !90
  %856 = select i1 %.not334, float 0xFFF0000000000000, float %855, !dbg !90
  %857 = bitcast float %829 to i32, !dbg !91
  %858 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %857), !dbg !91
  %859 = bitcast i32 %858 to float, !dbg !91
  %860 = fadd float %829, %859, !dbg !90
  %861 = bitcast float %860 to i32, !dbg !91
  %862 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %861, i32 16415), !dbg !91
  %863 = bitcast i32 %862 to float, !dbg !91
  %864 = fadd float %860, %863, !dbg !90
  %865 = bitcast float %838 to i32, !dbg !91
  %866 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %865), !dbg !91
  %867 = bitcast i32 %866 to float, !dbg !91
  %868 = fadd float %838, %867, !dbg !90
  %869 = bitcast float %868 to i32, !dbg !91
  %870 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %869, i32 16415), !dbg !91
  %871 = bitcast i32 %870 to float, !dbg !91
  %872 = fadd float %868, %871, !dbg !90
  %873 = bitcast float %847 to i32, !dbg !91
  %874 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %873), !dbg !91
  %875 = bitcast i32 %874 to float, !dbg !91
  %876 = fadd float %847, %875, !dbg !90
  %877 = bitcast float %876 to i32, !dbg !91
  %878 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %877, i32 16415), !dbg !91
  %879 = bitcast i32 %878 to float, !dbg !91
  %880 = fadd float %876, %879, !dbg !90
  %881 = bitcast float %856 to i32, !dbg !91
  %882 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %881), !dbg !91
  %883 = bitcast i32 %882 to float, !dbg !91
  %884 = fadd float %856, %883, !dbg !90
  %885 = bitcast float %884 to i32, !dbg !91
  %886 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %885, i32 16415), !dbg !91
  %887 = bitcast i32 %886 to float, !dbg !91
  %888 = fadd float %884, %887, !dbg !90
  %889 = add i32 %749, %236, !dbg !92
  %890 = add i32 %750, %236, !dbg !92
  %891 = add i32 %751, %236, !dbg !92
  %892 = add i32 %752, %236, !dbg !92
  %893 = icmp sgt i32 %749, -1, !dbg !93
  %894 = icmp sgt i32 %750, -1, !dbg !93
  %895 = icmp sgt i32 %751, -1, !dbg !93
  %896 = icmp sgt i32 %752, -1, !dbg !93
  %897 = and i1 %270, %893, !dbg !94
  %898 = shl i32 %889, 2, !dbg !94
  %899 = select i1 %897, i32 %898, i32 -2147483648, !dbg !94
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %864, ptr addrspace(8) %237, i32 %899, i32 0, i32 0), !dbg !94
  %900 = and i1 %270, %894, !dbg !94
  %901 = shl i32 %890, 2, !dbg !94
  %902 = select i1 %900, i32 %901, i32 -2147483648, !dbg !94
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %872, ptr addrspace(8) %237, i32 %902, i32 0, i32 0), !dbg !94
  %903 = and i1 %270, %895, !dbg !94
  %904 = shl i32 %891, 2, !dbg !94
  %905 = select i1 %903, i32 %904, i32 -2147483648, !dbg !94
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %880, ptr addrspace(8) %237, i32 %905, i32 0, i32 0), !dbg !94
  %906 = and i1 %270, %896, !dbg !94
  %907 = shl i32 %892, 2, !dbg !94
  %908 = select i1 %906, i32 %907, i32 -2147483648, !dbg !94
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %888, ptr addrspace(8) %237, i32 %908, i32 0, i32 0), !dbg !94
  %909 = icmp slt i32 %310, %231, !dbg !68
  %910 = shufflevector <16 x i8> %498, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %911 = shufflevector <16 x i8> %498, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %912 = shufflevector <16 x i8> %498, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %913 = shufflevector <16 x i8> %498, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %914 = shufflevector <16 x i8> %500, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %915 = shufflevector <16 x i8> %500, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %916 = shufflevector <16 x i8> %500, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %917 = shufflevector <16 x i8> %500, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %918 = shufflevector <16 x i8> %502, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %919 = shufflevector <16 x i8> %502, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %920 = shufflevector <16 x i8> %502, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %921 = shufflevector <16 x i8> %502, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %922 = shufflevector <16 x i8> %504, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %923 = shufflevector <16 x i8> %504, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %924 = shufflevector <16 x i8> %504, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %925 = shufflevector <16 x i8> %504, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %926 = shufflevector <16 x i8> %506, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %927 = shufflevector <16 x i8> %506, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %928 = shufflevector <16 x i8> %506, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %929 = shufflevector <16 x i8> %506, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %930 = shufflevector <16 x i8> %508, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %931 = shufflevector <16 x i8> %508, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %932 = shufflevector <16 x i8> %508, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %933 = shufflevector <16 x i8> %508, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %934 = shufflevector <16 x i8> %510, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %935 = shufflevector <16 x i8> %510, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %936 = shufflevector <16 x i8> %510, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %937 = shufflevector <16 x i8> %510, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %938 = shufflevector <16 x i8> %512, <16 x i8> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %939 = shufflevector <16 x i8> %512, <16 x i8> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %940 = shufflevector <16 x i8> %512, <16 x i8> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %941 = shufflevector <16 x i8> %512, <16 x i8> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  br i1 %909, label %276, label %._crit_edge, !dbg !68

._crit_edge:                                      ; preds = %276, %43
  %.pn265.lcssa = phi float [ %181, %43 ], [ %652, %276 ]
  %.pn263.lcssa = phi float [ %185, %43 ], [ %656, %276 ]
  %.pn261.lcssa = phi float [ %189, %43 ], [ %660, %276 ]
  %.pn259.lcssa = phi float [ %193, %43 ], [ %664, %276 ]
  %942 = phi <4 x i8> [ %238, %43 ], [ %910, %276 ]
  %943 = phi <4 x i8> [ %239, %43 ], [ %911, %276 ]
  %944 = phi <4 x i8> [ %240, %43 ], [ %912, %276 ]
  %945 = phi <4 x i8> [ %241, %43 ], [ %913, %276 ]
  %946 = phi <4 x i8> [ %242, %43 ], [ %914, %276 ]
  %947 = phi <4 x i8> [ %243, %43 ], [ %915, %276 ]
  %948 = phi <4 x i8> [ %244, %43 ], [ %916, %276 ]
  %949 = phi <4 x i8> [ %245, %43 ], [ %917, %276 ]
  %950 = phi <4 x i8> [ %246, %43 ], [ %918, %276 ]
  %951 = phi <4 x i8> [ %247, %43 ], [ %919, %276 ]
  %952 = phi <4 x i8> [ %248, %43 ], [ %920, %276 ]
  %953 = phi <4 x i8> [ %249, %43 ], [ %921, %276 ]
  %954 = phi <4 x i8> [ %250, %43 ], [ %922, %276 ]
  %955 = phi <4 x i8> [ %251, %43 ], [ %923, %276 ]
  %956 = phi <4 x i8> [ %252, %43 ], [ %924, %276 ]
  %957 = phi <4 x i8> [ %253, %43 ], [ %925, %276 ]
  %958 = phi <4 x i8> [ %254, %43 ], [ %926, %276 ]
  %959 = phi <4 x i8> [ %255, %43 ], [ %927, %276 ]
  %960 = phi <4 x i8> [ %256, %43 ], [ %928, %276 ]
  %961 = phi <4 x i8> [ %257, %43 ], [ %929, %276 ]
  %962 = phi <4 x i8> [ %258, %43 ], [ %930, %276 ]
  %963 = phi <4 x i8> [ %259, %43 ], [ %931, %276 ]
  %964 = phi <4 x i8> [ %260, %43 ], [ %932, %276 ]
  %965 = phi <4 x i8> [ %261, %43 ], [ %933, %276 ]
  %966 = phi <4 x i8> [ %262, %43 ], [ %934, %276 ]
  %967 = phi <4 x i8> [ %263, %43 ], [ %935, %276 ]
  %968 = phi <4 x i8> [ %264, %43 ], [ %936, %276 ]
  %969 = phi <4 x i8> [ %265, %43 ], [ %937, %276 ]
  %970 = phi <4 x i8> [ %266, %43 ], [ %938, %276 ]
  %971 = phi <4 x i8> [ %267, %43 ], [ %939, %276 ]
  %972 = phi <4 x i8> [ %268, %43 ], [ %940, %276 ]
  %973 = phi <4 x i8> [ %269, %43 ], [ %941, %276 ]
  %974 = shufflevector <4 x i8> %942, <4 x i8> %943, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %975 = bitcast <8 x i8> %974 to i64, !dbg !95
  %976 = shufflevector <4 x i8> %944, <4 x i8> %945, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %977 = bitcast <8 x i8> %976 to i64, !dbg !95
  %978 = shufflevector <4 x i8> %946, <4 x i8> %947, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %979 = bitcast <8 x i8> %978 to i64, !dbg !95
  %980 = shufflevector <4 x i8> %948, <4 x i8> %949, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %981 = bitcast <8 x i8> %980 to i64, !dbg !95
  %982 = shufflevector <4 x i8> %950, <4 x i8> %951, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %983 = bitcast <8 x i8> %982 to i64, !dbg !95
  %984 = shufflevector <4 x i8> %952, <4 x i8> %953, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %985 = bitcast <8 x i8> %984 to i64, !dbg !95
  %986 = shufflevector <4 x i8> %954, <4 x i8> %955, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %987 = bitcast <8 x i8> %986 to i64, !dbg !95
  %988 = shufflevector <4 x i8> %956, <4 x i8> %957, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %989 = bitcast <8 x i8> %988 to i64, !dbg !95
  %990 = shufflevector <4 x i8> %958, <4 x i8> %959, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %991 = bitcast <8 x i8> %990 to i64, !dbg !95
  %992 = shufflevector <4 x i8> %960, <4 x i8> %961, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %993 = bitcast <8 x i8> %992 to i64, !dbg !95
  %994 = shufflevector <4 x i8> %962, <4 x i8> %963, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %995 = bitcast <8 x i8> %994 to i64, !dbg !95
  %996 = shufflevector <4 x i8> %964, <4 x i8> %965, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %997 = bitcast <8 x i8> %996 to i64, !dbg !95
  %998 = shufflevector <4 x i8> %966, <4 x i8> %967, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %999 = bitcast <8 x i8> %998 to i64, !dbg !95
  %1000 = shufflevector <4 x i8> %968, <4 x i8> %969, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %1001 = bitcast <8 x i8> %1000 to i64, !dbg !95
  %1002 = shufflevector <4 x i8> %970, <4 x i8> %971, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %1003 = bitcast <8 x i8> %1002 to i64, !dbg !95
  %1004 = shufflevector <4 x i8> %972, <4 x i8> %973, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !95
  %1005 = bitcast <8 x i8> %1004 to i64, !dbg !95
  %1006 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %975, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1007 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %977, <4 x float> %1006, i32 0, i32 0, i32 0), !dbg !95
  %1008 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %979, <4 x float> %1007, i32 0, i32 0, i32 0), !dbg !95
  %1009 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %981, <4 x float> %1008, i32 0, i32 0, i32 0), !dbg !95
  %1010 = extractelement <4 x float> %1009, i64 0, !dbg !95
  %1011 = extractelement <4 x float> %1009, i64 1, !dbg !95
  %1012 = extractelement <4 x float> %1009, i64 2, !dbg !95
  %1013 = extractelement <4 x float> %1009, i64 3, !dbg !95
  %1014 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %983, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1015 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %985, <4 x float> %1014, i32 0, i32 0, i32 0), !dbg !95
  %1016 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %987, <4 x float> %1015, i32 0, i32 0, i32 0), !dbg !95
  %1017 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %989, <4 x float> %1016, i32 0, i32 0, i32 0), !dbg !95
  %1018 = extractelement <4 x float> %1017, i64 0, !dbg !95
  %1019 = extractelement <4 x float> %1017, i64 1, !dbg !95
  %1020 = extractelement <4 x float> %1017, i64 2, !dbg !95
  %1021 = extractelement <4 x float> %1017, i64 3, !dbg !95
  %1022 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %991, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1023 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %993, <4 x float> %1022, i32 0, i32 0, i32 0), !dbg !95
  %1024 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %995, <4 x float> %1023, i32 0, i32 0, i32 0), !dbg !95
  %1025 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %997, <4 x float> %1024, i32 0, i32 0, i32 0), !dbg !95
  %1026 = extractelement <4 x float> %1025, i64 0, !dbg !95
  %1027 = extractelement <4 x float> %1025, i64 1, !dbg !95
  %1028 = extractelement <4 x float> %1025, i64 2, !dbg !95
  %1029 = extractelement <4 x float> %1025, i64 3, !dbg !95
  %1030 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract300, i64 %999, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1031 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract302, i64 %1001, <4 x float> %1030, i32 0, i32 0, i32 0), !dbg !95
  %1032 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract304, i64 %1003, <4 x float> %1031, i32 0, i32 0, i32 0), !dbg !95
  %1033 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract306, i64 %1005, <4 x float> %1032, i32 0, i32 0, i32 0), !dbg !95
  %1034 = extractelement <4 x float> %1033, i64 0, !dbg !95
  %1035 = extractelement <4 x float> %1033, i64 1, !dbg !95
  %1036 = extractelement <4 x float> %1033, i64 2, !dbg !95
  %1037 = extractelement <4 x float> %1033, i64 3, !dbg !95
  %1038 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %975, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1039 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %977, <4 x float> %1038, i32 0, i32 0, i32 0), !dbg !95
  %1040 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %979, <4 x float> %1039, i32 0, i32 0, i32 0), !dbg !95
  %1041 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %981, <4 x float> %1040, i32 0, i32 0, i32 0), !dbg !95
  %1042 = extractelement <4 x float> %1041, i64 0, !dbg !95
  %1043 = extractelement <4 x float> %1041, i64 1, !dbg !95
  %1044 = extractelement <4 x float> %1041, i64 2, !dbg !95
  %1045 = extractelement <4 x float> %1041, i64 3, !dbg !95
  %1046 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %983, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1047 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %985, <4 x float> %1046, i32 0, i32 0, i32 0), !dbg !95
  %1048 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %987, <4 x float> %1047, i32 0, i32 0, i32 0), !dbg !95
  %1049 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %989, <4 x float> %1048, i32 0, i32 0, i32 0), !dbg !95
  %1050 = extractelement <4 x float> %1049, i64 0, !dbg !95
  %1051 = extractelement <4 x float> %1049, i64 1, !dbg !95
  %1052 = extractelement <4 x float> %1049, i64 2, !dbg !95
  %1053 = extractelement <4 x float> %1049, i64 3, !dbg !95
  %1054 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %991, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1055 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %993, <4 x float> %1054, i32 0, i32 0, i32 0), !dbg !95
  %1056 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %995, <4 x float> %1055, i32 0, i32 0, i32 0), !dbg !95
  %1057 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %997, <4 x float> %1056, i32 0, i32 0, i32 0), !dbg !95
  %1058 = extractelement <4 x float> %1057, i64 0, !dbg !95
  %1059 = extractelement <4 x float> %1057, i64 1, !dbg !95
  %1060 = extractelement <4 x float> %1057, i64 2, !dbg !95
  %1061 = extractelement <4 x float> %1057, i64 3, !dbg !95
  %1062 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract308, i64 %999, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1063 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract310, i64 %1001, <4 x float> %1062, i32 0, i32 0, i32 0), !dbg !95
  %1064 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract312, i64 %1003, <4 x float> %1063, i32 0, i32 0, i32 0), !dbg !95
  %1065 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract314, i64 %1005, <4 x float> %1064, i32 0, i32 0, i32 0), !dbg !95
  %1066 = extractelement <4 x float> %1065, i64 0, !dbg !95
  %1067 = extractelement <4 x float> %1065, i64 1, !dbg !95
  %1068 = extractelement <4 x float> %1065, i64 2, !dbg !95
  %1069 = extractelement <4 x float> %1065, i64 3, !dbg !95
  %1070 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %975, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1071 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %977, <4 x float> %1070, i32 0, i32 0, i32 0), !dbg !95
  %1072 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %979, <4 x float> %1071, i32 0, i32 0, i32 0), !dbg !95
  %1073 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %981, <4 x float> %1072, i32 0, i32 0, i32 0), !dbg !95
  %1074 = extractelement <4 x float> %1073, i64 0, !dbg !95
  %1075 = extractelement <4 x float> %1073, i64 1, !dbg !95
  %1076 = extractelement <4 x float> %1073, i64 2, !dbg !95
  %1077 = extractelement <4 x float> %1073, i64 3, !dbg !95
  %1078 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %983, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1079 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %985, <4 x float> %1078, i32 0, i32 0, i32 0), !dbg !95
  %1080 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %987, <4 x float> %1079, i32 0, i32 0, i32 0), !dbg !95
  %1081 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %989, <4 x float> %1080, i32 0, i32 0, i32 0), !dbg !95
  %1082 = extractelement <4 x float> %1081, i64 0, !dbg !95
  %1083 = extractelement <4 x float> %1081, i64 1, !dbg !95
  %1084 = extractelement <4 x float> %1081, i64 2, !dbg !95
  %1085 = extractelement <4 x float> %1081, i64 3, !dbg !95
  %1086 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %991, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1087 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %993, <4 x float> %1086, i32 0, i32 0, i32 0), !dbg !95
  %1088 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %995, <4 x float> %1087, i32 0, i32 0, i32 0), !dbg !95
  %1089 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %997, <4 x float> %1088, i32 0, i32 0, i32 0), !dbg !95
  %1090 = extractelement <4 x float> %1089, i64 0, !dbg !95
  %1091 = extractelement <4 x float> %1089, i64 1, !dbg !95
  %1092 = extractelement <4 x float> %1089, i64 2, !dbg !95
  %1093 = extractelement <4 x float> %1089, i64 3, !dbg !95
  %1094 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract316, i64 %999, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1095 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract318, i64 %1001, <4 x float> %1094, i32 0, i32 0, i32 0), !dbg !95
  %1096 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract320, i64 %1003, <4 x float> %1095, i32 0, i32 0, i32 0), !dbg !95
  %1097 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract322, i64 %1005, <4 x float> %1096, i32 0, i32 0, i32 0), !dbg !95
  %1098 = extractelement <4 x float> %1097, i64 0, !dbg !95
  %1099 = extractelement <4 x float> %1097, i64 1, !dbg !95
  %1100 = extractelement <4 x float> %1097, i64 2, !dbg !95
  %1101 = extractelement <4 x float> %1097, i64 3, !dbg !95
  %1102 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %975, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1103 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %977, <4 x float> %1102, i32 0, i32 0, i32 0), !dbg !95
  %1104 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %979, <4 x float> %1103, i32 0, i32 0, i32 0), !dbg !95
  %1105 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %981, <4 x float> %1104, i32 0, i32 0, i32 0), !dbg !95
  %1106 = extractelement <4 x float> %1105, i64 0, !dbg !95
  %1107 = extractelement <4 x float> %1105, i64 1, !dbg !95
  %1108 = extractelement <4 x float> %1105, i64 2, !dbg !95
  %1109 = extractelement <4 x float> %1105, i64 3, !dbg !95
  %1110 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %983, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1111 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %985, <4 x float> %1110, i32 0, i32 0, i32 0), !dbg !95
  %1112 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %987, <4 x float> %1111, i32 0, i32 0, i32 0), !dbg !95
  %1113 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %989, <4 x float> %1112, i32 0, i32 0, i32 0), !dbg !95
  %1114 = extractelement <4 x float> %1113, i64 0, !dbg !95
  %1115 = extractelement <4 x float> %1113, i64 1, !dbg !95
  %1116 = extractelement <4 x float> %1113, i64 2, !dbg !95
  %1117 = extractelement <4 x float> %1113, i64 3, !dbg !95
  %1118 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %991, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1119 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %993, <4 x float> %1118, i32 0, i32 0, i32 0), !dbg !95
  %1120 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %995, <4 x float> %1119, i32 0, i32 0, i32 0), !dbg !95
  %1121 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %997, <4 x float> %1120, i32 0, i32 0, i32 0), !dbg !95
  %1122 = extractelement <4 x float> %1121, i64 0, !dbg !95
  %1123 = extractelement <4 x float> %1121, i64 1, !dbg !95
  %1124 = extractelement <4 x float> %1121, i64 2, !dbg !95
  %1125 = extractelement <4 x float> %1121, i64 3, !dbg !95
  %1126 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract324, i64 %999, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !95
  %1127 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract326, i64 %1001, <4 x float> %1126, i32 0, i32 0, i32 0), !dbg !95
  %1128 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract328, i64 %1003, <4 x float> %1127, i32 0, i32 0, i32 0), !dbg !95
  %1129 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64 %.extract330, i64 %1005, <4 x float> %1128, i32 0, i32 0, i32 0), !dbg !95
  %1130 = extractelement <4 x float> %1129, i64 0, !dbg !95
  %1131 = extractelement <4 x float> %1129, i64 1, !dbg !95
  %1132 = extractelement <4 x float> %1129, i64 2, !dbg !95
  %1133 = extractelement <4 x float> %1129, i64 3, !dbg !95
  %1134 = fmul float %.pn265.lcssa, %1010, !dbg !96
  %1135 = fmul float %.pn265.lcssa, %1011, !dbg !96
  %1136 = fmul float %.pn265.lcssa, %1012, !dbg !96
  %1137 = fmul float %.pn265.lcssa, %1013, !dbg !96
  %1138 = fmul float %.pn263.lcssa, %1018, !dbg !96
  %1139 = fmul float %.pn263.lcssa, %1019, !dbg !96
  %1140 = fmul float %.pn263.lcssa, %1020, !dbg !96
  %1141 = fmul float %.pn263.lcssa, %1021, !dbg !96
  %1142 = fmul float %.pn261.lcssa, %1026, !dbg !96
  %1143 = fmul float %.pn261.lcssa, %1027, !dbg !96
  %1144 = fmul float %.pn261.lcssa, %1028, !dbg !96
  %1145 = fmul float %.pn261.lcssa, %1029, !dbg !96
  %1146 = fmul float %.pn259.lcssa, %1034, !dbg !96
  %1147 = fmul float %.pn259.lcssa, %1035, !dbg !96
  %1148 = fmul float %.pn259.lcssa, %1036, !dbg !96
  %1149 = fmul float %.pn259.lcssa, %1037, !dbg !96
  %1150 = fmul float %.pn265.lcssa, %1042, !dbg !96
  %1151 = fmul float %.pn265.lcssa, %1043, !dbg !96
  %1152 = fmul float %.pn265.lcssa, %1044, !dbg !96
  %1153 = fmul float %.pn265.lcssa, %1045, !dbg !96
  %1154 = fmul float %.pn263.lcssa, %1050, !dbg !96
  %1155 = fmul float %.pn263.lcssa, %1051, !dbg !96
  %1156 = fmul float %.pn263.lcssa, %1052, !dbg !96
  %1157 = fmul float %.pn263.lcssa, %1053, !dbg !96
  %1158 = fmul float %.pn261.lcssa, %1058, !dbg !96
  %1159 = fmul float %.pn261.lcssa, %1059, !dbg !96
  %1160 = fmul float %.pn261.lcssa, %1060, !dbg !96
  %1161 = fmul float %.pn261.lcssa, %1061, !dbg !96
  %1162 = fmul float %.pn259.lcssa, %1066, !dbg !96
  %1163 = fmul float %.pn259.lcssa, %1067, !dbg !96
  %1164 = fmul float %.pn259.lcssa, %1068, !dbg !96
  %1165 = fmul float %.pn259.lcssa, %1069, !dbg !96
  %1166 = fmul float %.pn265.lcssa, %1074, !dbg !96
  %1167 = fmul float %.pn265.lcssa, %1075, !dbg !96
  %1168 = fmul float %.pn265.lcssa, %1076, !dbg !96
  %1169 = fmul float %.pn265.lcssa, %1077, !dbg !96
  %1170 = fmul float %.pn263.lcssa, %1082, !dbg !96
  %1171 = fmul float %.pn263.lcssa, %1083, !dbg !96
  %1172 = fmul float %.pn263.lcssa, %1084, !dbg !96
  %1173 = fmul float %.pn263.lcssa, %1085, !dbg !96
  %1174 = fmul float %.pn261.lcssa, %1090, !dbg !96
  %1175 = fmul float %.pn261.lcssa, %1091, !dbg !96
  %1176 = fmul float %.pn261.lcssa, %1092, !dbg !96
  %1177 = fmul float %.pn261.lcssa, %1093, !dbg !96
  %1178 = fmul float %.pn259.lcssa, %1098, !dbg !96
  %1179 = fmul float %.pn259.lcssa, %1099, !dbg !96
  %1180 = fmul float %.pn259.lcssa, %1100, !dbg !96
  %1181 = fmul float %.pn259.lcssa, %1101, !dbg !96
  %1182 = fmul float %.pn265.lcssa, %1106, !dbg !96
  %1183 = fmul float %.pn265.lcssa, %1107, !dbg !96
  %1184 = fmul float %.pn265.lcssa, %1108, !dbg !96
  %1185 = fmul float %.pn265.lcssa, %1109, !dbg !96
  %1186 = fmul float %.pn263.lcssa, %1114, !dbg !96
  %1187 = fmul float %.pn263.lcssa, %1115, !dbg !96
  %1188 = fmul float %.pn263.lcssa, %1116, !dbg !96
  %1189 = fmul float %.pn263.lcssa, %1117, !dbg !96
  %1190 = fmul float %.pn261.lcssa, %1122, !dbg !96
  %1191 = fmul float %.pn261.lcssa, %1123, !dbg !96
  %1192 = fmul float %.pn261.lcssa, %1124, !dbg !96
  %1193 = fmul float %.pn261.lcssa, %1125, !dbg !96
  %1194 = fmul float %.pn259.lcssa, %1130, !dbg !96
  %1195 = fmul float %.pn259.lcssa, %1131, !dbg !96
  %1196 = fmul float %.pn259.lcssa, %1132, !dbg !96
  %1197 = fmul float %.pn259.lcssa, %1133, !dbg !96
  %1198 = tail call float @llvm.maxnum.f32(float %1134, float 0.000000e+00), !dbg !97
  %1199 = tail call float @llvm.maxnum.f32(float %1135, float 0.000000e+00), !dbg !97
  %1200 = tail call float @llvm.maxnum.f32(float %1136, float 0.000000e+00), !dbg !97
  %1201 = tail call float @llvm.maxnum.f32(float %1137, float 0.000000e+00), !dbg !97
  %1202 = tail call float @llvm.maxnum.f32(float %1138, float 0.000000e+00), !dbg !97
  %1203 = tail call float @llvm.maxnum.f32(float %1139, float 0.000000e+00), !dbg !97
  %1204 = tail call float @llvm.maxnum.f32(float %1140, float 0.000000e+00), !dbg !97
  %1205 = tail call float @llvm.maxnum.f32(float %1141, float 0.000000e+00), !dbg !97
  %1206 = tail call float @llvm.maxnum.f32(float %1142, float 0.000000e+00), !dbg !97
  %1207 = tail call float @llvm.maxnum.f32(float %1143, float 0.000000e+00), !dbg !97
  %1208 = tail call float @llvm.maxnum.f32(float %1144, float 0.000000e+00), !dbg !97
  %1209 = tail call float @llvm.maxnum.f32(float %1145, float 0.000000e+00), !dbg !97
  %1210 = tail call float @llvm.maxnum.f32(float %1146, float 0.000000e+00), !dbg !97
  %1211 = tail call float @llvm.maxnum.f32(float %1147, float 0.000000e+00), !dbg !97
  %1212 = tail call float @llvm.maxnum.f32(float %1148, float 0.000000e+00), !dbg !97
  %1213 = tail call float @llvm.maxnum.f32(float %1149, float 0.000000e+00), !dbg !97
  %1214 = tail call float @llvm.maxnum.f32(float %1150, float 0.000000e+00), !dbg !97
  %1215 = tail call float @llvm.maxnum.f32(float %1151, float 0.000000e+00), !dbg !97
  %1216 = tail call float @llvm.maxnum.f32(float %1152, float 0.000000e+00), !dbg !97
  %1217 = tail call float @llvm.maxnum.f32(float %1153, float 0.000000e+00), !dbg !97
  %1218 = tail call float @llvm.maxnum.f32(float %1154, float 0.000000e+00), !dbg !97
  %1219 = tail call float @llvm.maxnum.f32(float %1155, float 0.000000e+00), !dbg !97
  %1220 = tail call float @llvm.maxnum.f32(float %1156, float 0.000000e+00), !dbg !97
  %1221 = tail call float @llvm.maxnum.f32(float %1157, float 0.000000e+00), !dbg !97
  %1222 = tail call float @llvm.maxnum.f32(float %1158, float 0.000000e+00), !dbg !97
  %1223 = tail call float @llvm.maxnum.f32(float %1159, float 0.000000e+00), !dbg !97
  %1224 = tail call float @llvm.maxnum.f32(float %1160, float 0.000000e+00), !dbg !97
  %1225 = tail call float @llvm.maxnum.f32(float %1161, float 0.000000e+00), !dbg !97
  %1226 = tail call float @llvm.maxnum.f32(float %1162, float 0.000000e+00), !dbg !97
  %1227 = tail call float @llvm.maxnum.f32(float %1163, float 0.000000e+00), !dbg !97
  %1228 = tail call float @llvm.maxnum.f32(float %1164, float 0.000000e+00), !dbg !97
  %1229 = tail call float @llvm.maxnum.f32(float %1165, float 0.000000e+00), !dbg !97
  %1230 = tail call float @llvm.maxnum.f32(float %1166, float 0.000000e+00), !dbg !97
  %1231 = tail call float @llvm.maxnum.f32(float %1167, float 0.000000e+00), !dbg !97
  %1232 = tail call float @llvm.maxnum.f32(float %1168, float 0.000000e+00), !dbg !97
  %1233 = tail call float @llvm.maxnum.f32(float %1169, float 0.000000e+00), !dbg !97
  %1234 = tail call float @llvm.maxnum.f32(float %1170, float 0.000000e+00), !dbg !97
  %1235 = tail call float @llvm.maxnum.f32(float %1171, float 0.000000e+00), !dbg !97
  %1236 = tail call float @llvm.maxnum.f32(float %1172, float 0.000000e+00), !dbg !97
  %1237 = tail call float @llvm.maxnum.f32(float %1173, float 0.000000e+00), !dbg !97
  %1238 = tail call float @llvm.maxnum.f32(float %1174, float 0.000000e+00), !dbg !97
  %1239 = tail call float @llvm.maxnum.f32(float %1175, float 0.000000e+00), !dbg !97
  %1240 = tail call float @llvm.maxnum.f32(float %1176, float 0.000000e+00), !dbg !97
  %1241 = tail call float @llvm.maxnum.f32(float %1177, float 0.000000e+00), !dbg !97
  %1242 = tail call float @llvm.maxnum.f32(float %1178, float 0.000000e+00), !dbg !97
  %1243 = tail call float @llvm.maxnum.f32(float %1179, float 0.000000e+00), !dbg !97
  %1244 = tail call float @llvm.maxnum.f32(float %1180, float 0.000000e+00), !dbg !97
  %1245 = tail call float @llvm.maxnum.f32(float %1181, float 0.000000e+00), !dbg !97
  %1246 = tail call float @llvm.maxnum.f32(float %1182, float 0.000000e+00), !dbg !97
  %1247 = tail call float @llvm.maxnum.f32(float %1183, float 0.000000e+00), !dbg !97
  %1248 = tail call float @llvm.maxnum.f32(float %1184, float 0.000000e+00), !dbg !97
  %1249 = tail call float @llvm.maxnum.f32(float %1185, float 0.000000e+00), !dbg !97
  %1250 = tail call float @llvm.maxnum.f32(float %1186, float 0.000000e+00), !dbg !97
  %1251 = tail call float @llvm.maxnum.f32(float %1187, float 0.000000e+00), !dbg !97
  %1252 = tail call float @llvm.maxnum.f32(float %1188, float 0.000000e+00), !dbg !97
  %1253 = tail call float @llvm.maxnum.f32(float %1189, float 0.000000e+00), !dbg !97
  %1254 = tail call float @llvm.maxnum.f32(float %1190, float 0.000000e+00), !dbg !97
  %1255 = tail call float @llvm.maxnum.f32(float %1191, float 0.000000e+00), !dbg !97
  %1256 = tail call float @llvm.maxnum.f32(float %1192, float 0.000000e+00), !dbg !97
  %1257 = tail call float @llvm.maxnum.f32(float %1193, float 0.000000e+00), !dbg !97
  %1258 = tail call float @llvm.maxnum.f32(float %1194, float 0.000000e+00), !dbg !97
  %1259 = tail call float @llvm.maxnum.f32(float %1195, float 0.000000e+00), !dbg !97
  %1260 = tail call float @llvm.maxnum.f32(float %1196, float 0.000000e+00), !dbg !97
  %1261 = tail call float @llvm.maxnum.f32(float %1197, float 0.000000e+00), !dbg !97
  %1262 = fmul float %81, %1198, !dbg !98
  %1263 = fmul float %82, %1199, !dbg !98
  %1264 = fmul float %83, %1200, !dbg !98
  %1265 = fmul float %84, %1201, !dbg !98
  %1266 = fmul float %81, %1202, !dbg !98
  %1267 = fmul float %82, %1203, !dbg !98
  %1268 = fmul float %83, %1204, !dbg !98
  %1269 = fmul float %84, %1205, !dbg !98
  %1270 = fmul float %81, %1206, !dbg !98
  %1271 = fmul float %82, %1207, !dbg !98
  %1272 = fmul float %83, %1208, !dbg !98
  %1273 = fmul float %84, %1209, !dbg !98
  %1274 = fmul float %81, %1210, !dbg !98
  %1275 = fmul float %82, %1211, !dbg !98
  %1276 = fmul float %83, %1212, !dbg !98
  %1277 = fmul float %84, %1213, !dbg !98
  %1278 = fmul float %87, %1214, !dbg !98
  %1279 = fmul float %88, %1215, !dbg !98
  %1280 = shufflevector <4 x float> %86, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !98
  %1281 = insertelement <2 x float> poison, float %1216, i64 0, !dbg !98
  %1282 = insertelement <2 x float> %1281, float %1217, i64 1, !dbg !98
  %1283 = fmul <2 x float> %1280, %1282, !dbg !98
  %1284 = fmul float %87, %1218, !dbg !98
  %1285 = fmul float %88, %1219, !dbg !98
  %1286 = insertelement <2 x float> poison, float %1220, i64 0, !dbg !98
  %1287 = insertelement <2 x float> %1286, float %1221, i64 1, !dbg !98
  %1288 = fmul <2 x float> %1280, %1287, !dbg !98
  %1289 = fmul float %87, %1222, !dbg !98
  %1290 = fmul float %88, %1223, !dbg !98
  %1291 = insertelement <2 x float> poison, float %1224, i64 0, !dbg !98
  %1292 = insertelement <2 x float> %1291, float %1225, i64 1, !dbg !98
  %1293 = fmul <2 x float> %1280, %1292, !dbg !98
  %1294 = fmul float %87, %1226, !dbg !98
  %1295 = fmul float %88, %1227, !dbg !98
  %1296 = insertelement <2 x float> poison, float %1228, i64 0, !dbg !98
  %1297 = insertelement <2 x float> %1296, float %1229, i64 1, !dbg !98
  %1298 = fmul <2 x float> %1280, %1297, !dbg !98
  %1299 = shufflevector <4 x float> %90, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !98
  %1300 = insertelement <2 x float> poison, float %1230, i64 0, !dbg !98
  %1301 = insertelement <2 x float> %1300, float %1231, i64 1, !dbg !98
  %1302 = fmul <2 x float> %1299, %1301, !dbg !98
  %1303 = shufflevector <4 x float> %90, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !98
  %1304 = insertelement <2 x float> poison, float %1232, i64 0, !dbg !98
  %1305 = insertelement <2 x float> %1304, float %1233, i64 1, !dbg !98
  %1306 = fmul <2 x float> %1303, %1305, !dbg !98
  %1307 = insertelement <2 x float> poison, float %1234, i64 0, !dbg !98
  %1308 = insertelement <2 x float> %1307, float %1235, i64 1, !dbg !98
  %1309 = fmul <2 x float> %1299, %1308, !dbg !98
  %1310 = insertelement <2 x float> poison, float %1236, i64 0, !dbg !98
  %1311 = insertelement <2 x float> %1310, float %1237, i64 1, !dbg !98
  %1312 = fmul <2 x float> %1303, %1311, !dbg !98
  %1313 = insertelement <2 x float> poison, float %1238, i64 0, !dbg !98
  %1314 = insertelement <2 x float> %1313, float %1239, i64 1, !dbg !98
  %1315 = fmul <2 x float> %1299, %1314, !dbg !98
  %1316 = insertelement <2 x float> poison, float %1240, i64 0, !dbg !98
  %1317 = insertelement <2 x float> %1316, float %1241, i64 1, !dbg !98
  %1318 = fmul <2 x float> %1303, %1317, !dbg !98
  %1319 = insertelement <2 x float> poison, float %1242, i64 0, !dbg !98
  %1320 = insertelement <2 x float> %1319, float %1243, i64 1, !dbg !98
  %1321 = fmul <2 x float> %1299, %1320, !dbg !98
  %1322 = insertelement <2 x float> poison, float %1244, i64 0, !dbg !98
  %1323 = insertelement <2 x float> %1322, float %1245, i64 1, !dbg !98
  %1324 = fmul <2 x float> %1303, %1323, !dbg !98
  %1325 = shufflevector <4 x float> %92, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !98
  %1326 = insertelement <2 x float> poison, float %1246, i64 0, !dbg !98
  %1327 = insertelement <2 x float> %1326, float %1247, i64 1, !dbg !98
  %1328 = fmul <2 x float> %1325, %1327, !dbg !98
  %1329 = shufflevector <4 x float> %92, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !98
  %1330 = insertelement <2 x float> poison, float %1248, i64 0, !dbg !98
  %1331 = insertelement <2 x float> %1330, float %1249, i64 1, !dbg !98
  %1332 = fmul <2 x float> %1329, %1331, !dbg !98
  %1333 = insertelement <2 x float> poison, float %1250, i64 0, !dbg !98
  %1334 = insertelement <2 x float> %1333, float %1251, i64 1, !dbg !98
  %1335 = fmul <2 x float> %1325, %1334, !dbg !98
  %1336 = insertelement <2 x float> poison, float %1252, i64 0, !dbg !98
  %1337 = insertelement <2 x float> %1336, float %1253, i64 1, !dbg !98
  %1338 = fmul <2 x float> %1329, %1337, !dbg !98
  %1339 = insertelement <2 x float> poison, float %1254, i64 0, !dbg !98
  %1340 = insertelement <2 x float> %1339, float %1255, i64 1, !dbg !98
  %1341 = fmul <2 x float> %1325, %1340, !dbg !98
  %1342 = insertelement <2 x float> poison, float %1256, i64 0, !dbg !98
  %1343 = insertelement <2 x float> %1342, float %1257, i64 1, !dbg !98
  %1344 = fmul <2 x float> %1329, %1343, !dbg !98
  %1345 = insertelement <2 x float> poison, float %1258, i64 0, !dbg !98
  %1346 = insertelement <2 x float> %1345, float %1259, i64 1, !dbg !98
  %1347 = fmul <2 x float> %1325, %1346, !dbg !98
  %1348 = insertelement <2 x float> poison, float %1260, i64 0, !dbg !98
  %1349 = insertelement <2 x float> %1348, float %1261, i64 1, !dbg !98
  %1350 = fmul <2 x float> %1329, %1349, !dbg !98
  %1351 = add i32 %231, %98, !dbg !99
  %1352 = add i32 %231, %99, !dbg !99
  %1353 = add i32 %231, %100, !dbg !99
  %1354 = add i32 %231, %101, !dbg !99
  %.not = icmp sgt i32 %1351, %31, !dbg !100
  %.not296 = icmp sgt i32 %1352, %31, !dbg !100
  %.not297 = icmp sgt i32 %1353, %31, !dbg !100
  %.not298 = icmp sgt i32 %1354, %31, !dbg !100
  %1355 = fadd float %1262, %1263, !dbg !101
  %1356 = fadd float %1264, %1355, !dbg !101
  %1357 = fadd float %1265, %1356, !dbg !101
  %1358 = fadd float %1266, %1267, !dbg !101
  %1359 = fadd float %1268, %1358, !dbg !101
  %1360 = fadd float %1269, %1359, !dbg !101
  %1361 = fadd float %1270, %1271, !dbg !101
  %1362 = fadd float %1272, %1361, !dbg !101
  %1363 = fadd float %1273, %1362, !dbg !101
  %1364 = fadd float %1274, %1275, !dbg !101
  %1365 = fadd float %1276, %1364, !dbg !101
  %1366 = fadd float %1277, %1365, !dbg !101
  %1367 = fadd float %1357, %1278, !dbg !101
  %1368 = fadd float %1279, %1367, !dbg !101
  %1369 = extractelement <2 x float> %1283, i64 0, !dbg !101
  %1370 = fadd float %1369, %1368, !dbg !101
  %1371 = extractelement <2 x float> %1283, i64 1, !dbg !101
  %1372 = fadd float %1371, %1370, !dbg !101
  %1373 = fadd float %1360, %1284, !dbg !101
  %1374 = fadd float %1285, %1373, !dbg !101
  %1375 = extractelement <2 x float> %1288, i64 0, !dbg !101
  %1376 = fadd float %1375, %1374, !dbg !101
  %1377 = extractelement <2 x float> %1288, i64 1, !dbg !101
  %1378 = fadd float %1377, %1376, !dbg !101
  %1379 = fadd float %1363, %1289, !dbg !101
  %1380 = fadd float %1290, %1379, !dbg !101
  %1381 = extractelement <2 x float> %1293, i64 0, !dbg !101
  %1382 = fadd float %1381, %1380, !dbg !101
  %1383 = extractelement <2 x float> %1293, i64 1, !dbg !101
  %1384 = fadd float %1383, %1382, !dbg !101
  %1385 = fadd float %1366, %1294, !dbg !101
  %1386 = fadd float %1295, %1385, !dbg !101
  %1387 = extractelement <2 x float> %1298, i64 0, !dbg !101
  %1388 = fadd float %1387, %1386, !dbg !101
  %1389 = extractelement <2 x float> %1298, i64 1, !dbg !101
  %1390 = fadd float %1389, %1388, !dbg !101
  %1391 = extractelement <2 x float> %1302, i64 0, !dbg !101
  %1392 = fadd float %1372, %1391, !dbg !101
  %1393 = extractelement <2 x float> %1302, i64 1, !dbg !101
  %1394 = fadd float %1393, %1392, !dbg !101
  %1395 = extractelement <2 x float> %1306, i64 0, !dbg !101
  %1396 = fadd float %1395, %1394, !dbg !101
  %1397 = extractelement <2 x float> %1306, i64 1, !dbg !101
  %1398 = fadd float %1397, %1396, !dbg !101
  %1399 = extractelement <2 x float> %1309, i64 0, !dbg !101
  %1400 = fadd float %1378, %1399, !dbg !101
  %1401 = extractelement <2 x float> %1309, i64 1, !dbg !101
  %1402 = fadd float %1401, %1400, !dbg !101
  %1403 = extractelement <2 x float> %1312, i64 0, !dbg !101
  %1404 = fadd float %1403, %1402, !dbg !101
  %1405 = extractelement <2 x float> %1312, i64 1, !dbg !101
  %1406 = fadd float %1405, %1404, !dbg !101
  %1407 = extractelement <2 x float> %1315, i64 0, !dbg !101
  %1408 = fadd float %1384, %1407, !dbg !101
  %1409 = extractelement <2 x float> %1315, i64 1, !dbg !101
  %1410 = fadd float %1409, %1408, !dbg !101
  %1411 = extractelement <2 x float> %1318, i64 0, !dbg !101
  %1412 = fadd float %1411, %1410, !dbg !101
  %1413 = extractelement <2 x float> %1318, i64 1, !dbg !101
  %1414 = fadd float %1413, %1412, !dbg !101
  %1415 = extractelement <2 x float> %1321, i64 0, !dbg !101
  %1416 = fadd float %1390, %1415, !dbg !101
  %1417 = extractelement <2 x float> %1321, i64 1, !dbg !101
  %1418 = fadd float %1417, %1416, !dbg !101
  %1419 = extractelement <2 x float> %1324, i64 0, !dbg !101
  %1420 = fadd float %1419, %1418, !dbg !101
  %1421 = extractelement <2 x float> %1324, i64 1, !dbg !101
  %1422 = fadd float %1421, %1420, !dbg !101
  %1423 = extractelement <2 x float> %1328, i64 0, !dbg !101
  %1424 = fadd float %1398, %1423, !dbg !101
  %1425 = extractelement <2 x float> %1328, i64 1, !dbg !101
  %1426 = fadd float %1425, %1424, !dbg !101
  %1427 = extractelement <2 x float> %1332, i64 0, !dbg !101
  %1428 = fadd float %1427, %1426, !dbg !101
  %1429 = extractelement <2 x float> %1332, i64 1, !dbg !101
  %1430 = fadd float %1429, %1428, !dbg !101
  %1431 = select i1 %.not, float 0xFFF0000000000000, float %1430, !dbg !101
  %1432 = extractelement <2 x float> %1335, i64 0, !dbg !101
  %1433 = fadd float %1406, %1432, !dbg !101
  %1434 = extractelement <2 x float> %1335, i64 1, !dbg !101
  %1435 = fadd float %1434, %1433, !dbg !101
  %1436 = extractelement <2 x float> %1338, i64 0, !dbg !101
  %1437 = fadd float %1436, %1435, !dbg !101
  %1438 = extractelement <2 x float> %1338, i64 1, !dbg !101
  %1439 = fadd float %1438, %1437, !dbg !101
  %1440 = select i1 %.not296, float 0xFFF0000000000000, float %1439, !dbg !101
  %1441 = extractelement <2 x float> %1341, i64 0, !dbg !101
  %1442 = fadd float %1414, %1441, !dbg !101
  %1443 = extractelement <2 x float> %1341, i64 1, !dbg !101
  %1444 = fadd float %1443, %1442, !dbg !101
  %1445 = extractelement <2 x float> %1344, i64 0, !dbg !101
  %1446 = fadd float %1445, %1444, !dbg !101
  %1447 = extractelement <2 x float> %1344, i64 1, !dbg !101
  %1448 = fadd float %1447, %1446, !dbg !101
  %1449 = select i1 %.not297, float 0xFFF0000000000000, float %1448, !dbg !101
  %1450 = extractelement <2 x float> %1347, i64 0, !dbg !101
  %1451 = fadd float %1422, %1450, !dbg !101
  %1452 = extractelement <2 x float> %1347, i64 1, !dbg !101
  %1453 = fadd float %1452, %1451, !dbg !101
  %1454 = extractelement <2 x float> %1350, i64 0, !dbg !101
  %1455 = fadd float %1454, %1453, !dbg !101
  %1456 = extractelement <2 x float> %1350, i64 1, !dbg !101
  %1457 = fadd float %1456, %1455, !dbg !101
  %1458 = select i1 %.not298, float 0xFFF0000000000000, float %1457, !dbg !101
  %1459 = bitcast float %1431 to i32, !dbg !102
  %1460 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %1459), !dbg !102
  %1461 = bitcast i32 %1460 to float, !dbg !102
  %1462 = fadd float %1431, %1461, !dbg !101
  %1463 = bitcast float %1462 to i32, !dbg !102
  %1464 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1463, i32 16415), !dbg !102
  %1465 = bitcast i32 %1464 to float, !dbg !102
  %1466 = fadd float %1462, %1465, !dbg !101
  %1467 = bitcast float %1440 to i32, !dbg !102
  %1468 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %1467), !dbg !102
  %1469 = bitcast i32 %1468 to float, !dbg !102
  %1470 = fadd float %1440, %1469, !dbg !101
  %1471 = bitcast float %1470 to i32, !dbg !102
  %1472 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1471, i32 16415), !dbg !102
  %1473 = bitcast i32 %1472 to float, !dbg !102
  %1474 = fadd float %1470, %1473, !dbg !101
  %1475 = bitcast float %1449 to i32, !dbg !102
  %1476 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %1475), !dbg !102
  %1477 = bitcast i32 %1476 to float, !dbg !102
  %1478 = fadd float %1449, %1477, !dbg !101
  %1479 = bitcast float %1478 to i32, !dbg !102
  %1480 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1479, i32 16415), !dbg !102
  %1481 = bitcast i32 %1480 to float, !dbg !102
  %1482 = fadd float %1478, %1481, !dbg !101
  %1483 = bitcast float %1458 to i32, !dbg !102
  %1484 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %235, i32 %1483), !dbg !102
  %1485 = bitcast i32 %1484 to float, !dbg !102
  %1486 = fadd float %1458, %1485, !dbg !101
  %1487 = bitcast float %1486 to i32, !dbg !102
  %1488 = tail call i32 @llvm.amdgcn.ds.swizzle(i32 %1487, i32 16415), !dbg !102
  %1489 = bitcast i32 %1488 to float, !dbg !102
  %1490 = fadd float %1486, %1489, !dbg !101
  %1491 = add i32 %1351, %236, !dbg !103
  %1492 = add i32 %1352, %236, !dbg !103
  %1493 = add i32 %1353, %236, !dbg !103
  %1494 = add i32 %1354, %236, !dbg !103
  %1495 = icmp sgt i32 %1351, -1, !dbg !104
  %1496 = icmp sgt i32 %1352, -1, !dbg !104
  %1497 = icmp sgt i32 %1353, -1, !dbg !104
  %1498 = icmp sgt i32 %1354, -1, !dbg !104
  %1499 = icmp eq i32 %69, 0, !dbg !105
  %1500 = and i1 %1499, %1495, !dbg !105
  %1501 = shl i32 %1491, 2, !dbg !105
  %1502 = select i1 %1500, i32 %1501, i32 -2147483648, !dbg !105
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %1466, ptr addrspace(8) %237, i32 %1502, i32 0, i32 0), !dbg !105
  %1503 = and i1 %1499, %1496, !dbg !105
  %1504 = shl i32 %1492, 2, !dbg !105
  %1505 = select i1 %1503, i32 %1504, i32 -2147483648, !dbg !105
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %1474, ptr addrspace(8) %237, i32 %1505, i32 0, i32 0), !dbg !105
  %1506 = and i1 %1499, %1497, !dbg !105
  %1507 = shl i32 %1493, 2, !dbg !105
  %1508 = select i1 %1506, i32 %1507, i32 -2147483648, !dbg !105
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %1482, ptr addrspace(8) %237, i32 %1508, i32 0, i32 0), !dbg !105
  %1509 = and i1 %1499, %1498, !dbg !105
  %1510 = shl i32 %1494, 2, !dbg !105
  %1511 = select i1 %1509, i32 %1510, i32 -2147483648, !dbg !105
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.f32(float %1490, ptr addrspace(8) %237, i32 %1511, i32 0, i32 0), !dbg !105
  br label %common.ret, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x float> @llvm.amdgcn.raw.ptr.buffer.load.v4f32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare i32 @llvm.amdgcn.raw.ptr.buffer.load.i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare float @llvm.amdgcn.raw.ptr.buffer.load.f32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.fp8.fp8(i64, i64, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.swizzle(i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.f32(float, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #6

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.sched.barrier(i32 immarg) #3

attributes #0 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2,2" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "_gluon_deepgemm_fp8_paged_mqa_logits_preshuffle.ttgir", directory: "xxx2/EXVFLIHTCEFSEUBZG27CPQO2DVZM2QEROUBEXX6ECNGRBPWNACKQ")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = distinct !DISubprogram(name: "_gluon_deepgemm_fp8_paged_mqa_logits_preshuffle", linkageName: "_gluon_deepgemm_fp8_paged_mqa_logits_preshuffle", scope: !1, file: !1, line: 25, type: !5, scopeLine: 25, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 41, column: 4, scope: !4)
!8 = !DILocation(line: 42, column: 4, scope: !4)
!9 = !DILocation(line: 43, column: 4, scope: !4)
!10 = !DILocation(line: 45, column: 4, scope: !4)
!11 = !DILocation(line: 44, column: 4, scope: !4)
!12 = !DILocation(line: 47, column: 4, scope: !4)
!13 = !DILocation(line: 48, column: 4, scope: !4)
!14 = !DILocation(line: 49, column: 4, scope: !4)
!15 = !DILocation(line: 50, column: 4, scope: !4)
!16 = !DILocation(line: 51, column: 4, scope: !4)
!17 = !DILocation(line: 52, column: 4, scope: !4)
!18 = !DILocation(line: 53, column: 4, scope: !4)
!19 = !DILocation(line: 54, column: 4, scope: !4)
!20 = !DILocation(line: 55, column: 4, scope: !4)
!21 = !DILocation(line: 56, column: 4, scope: !4)
!22 = !DILocation(line: 57, column: 4, scope: !4)
!23 = !DILocation(line: 58, column: 4, scope: !4)
!24 = !DILocation(line: 59, column: 4, scope: !4)
!25 = !DILocation(line: 60, column: 4, scope: !4)
!26 = !DILocation(line: 61, column: 4, scope: !4)
!27 = !DILocation(line: 0, scope: !4)
!28 = !DILocation(line: 46, column: 4, scope: !4)
!29 = !DILocation(line: 67, column: 4, scope: !4)
!30 = !DILocation(line: 68, column: 4, scope: !4)
!31 = !DILocation(line: 69, column: 4, scope: !4)
!32 = !DILocation(line: 73, column: 4, scope: !4)
!33 = !DILocation(line: 74, column: 4, scope: !4)
!34 = !DILocation(line: 75, column: 4, scope: !4)
!35 = !DILocation(line: 76, column: 4, scope: !4)
!36 = !DILocation(line: 78, column: 4, scope: !4)
!37 = !DILocation(line: 80, column: 4, scope: !4)
!38 = !DILocation(line: 84, column: 4, scope: !4)
!39 = !DILocation(line: 83, column: 4, scope: !4)
!40 = !DILocation(line: 88, column: 4, scope: !4)
!41 = !DILocation(line: 89, column: 4, scope: !4)
!42 = !DILocation(line: 90, column: 4, scope: !4)
!43 = !DILocation(line: 91, column: 4, scope: !4)
!44 = !DILocation(line: 92, column: 4, scope: !4)
!45 = !DILocation(line: 94, column: 4, scope: !4)
!46 = !DILocation(line: 95, column: 4, scope: !4)
!47 = !DILocation(line: 96, column: 4, scope: !4)
!48 = !DILocation(line: 97, column: 4, scope: !4)
!49 = !DILocation(line: 98, column: 4, scope: !4)
!50 = !DILocation(line: 99, column: 4, scope: !4)
!51 = !DILocation(line: 101, column: 4, scope: !4)
!52 = !DILocation(line: 102, column: 4, scope: !4)
!53 = !DILocation(line: 103, column: 4, scope: !4)
!54 = !DILocation(line: 104, column: 4, scope: !4)
!55 = !DILocation(line: 106, column: 4, scope: !4)
!56 = !DILocation(line: 107, column: 4, scope: !4)
!57 = !DILocation(line: 119, column: 4, scope: !4)
!58 = !DILocation(line: 120, column: 4, scope: !4)
!59 = !DILocation(line: 123, column: 4, scope: !4)
!60 = !DILocation(line: 125, column: 4, scope: !4)
!61 = !DILocation(line: 126, column: 4, scope: !4)
!62 = !DILocation(line: 128, column: 4, scope: !4)
!63 = !DILocation(line: 129, column: 4, scope: !4)
!64 = !DILocation(line: 130, column: 4, scope: !4)
!65 = !DILocation(line: 131, column: 4, scope: !4)
!66 = !DILocation(line: 132, column: 4, scope: !4)
!67 = !DILocation(line: 133, column: 4, scope: !4)
!68 = !DILocation(line: 134, column: 4, scope: !4)
!69 = !DILocation(line: 162, column: 6, scope: !4)
!70 = !DILocation(line: 135, column: 6, scope: !4)
!71 = !DILocation(line: 136, column: 6, scope: !4)
!72 = !DILocation(line: 137, column: 6, scope: !4)
!73 = !DILocation(line: 138, column: 6, scope: !4)
!74 = !DILocation(line: 140, column: 6, scope: !4)
!75 = !DILocation(line: 141, column: 6, scope: !4)
!76 = !DILocation(line: 142, column: 6, scope: !4)
!77 = !DILocation(line: 144, column: 6, scope: !4)
!78 = !DILocation(line: 146, column: 6, scope: !4)
!79 = !DILocation(line: 148, column: 6, scope: !4)
!80 = !DILocation(line: 149, column: 6, scope: !4)
!81 = !DILocation(line: 150, column: 6, scope: !4)
!82 = !DILocation(line: 154, column: 6, scope: !4)
!83 = !DILocation(line: 155, column: 6, scope: !4)
!84 = !DILocation(line: 156, column: 6, scope: !4)
!85 = !DILocation(line: 157, column: 6, scope: !4)
!86 = !DILocation(line: 158, column: 6, scope: !4)
!87 = !DILocation(line: 159, column: 6, scope: !4)
!88 = !DILocation(line: 165, column: 6, scope: !4)
!89 = !DILocation(line: 167, column: 6, scope: !4)
!90 = !DILocation(line: 173, column: 8, scope: !4)
!91 = !DILocation(line: 171, column: 6, scope: !4)
!92 = !DILocation(line: 178, column: 6, scope: !4)
!93 = !DILocation(line: 179, column: 6, scope: !4)
!94 = !DILocation(line: 180, column: 6, scope: !4)
!95 = !DILocation(line: 184, column: 4, scope: !4)
!96 = !DILocation(line: 188, column: 4, scope: !4)
!97 = !DILocation(line: 189, column: 4, scope: !4)
!98 = !DILocation(line: 192, column: 4, scope: !4)
!99 = !DILocation(line: 195, column: 4, scope: !4)
!100 = !DILocation(line: 197, column: 4, scope: !4)
!101 = !DILocation(line: 203, column: 6, scope: !4)
!102 = !DILocation(line: 201, column: 4, scope: !4)
!103 = !DILocation(line: 208, column: 4, scope: !4)
!104 = !DILocation(line: 209, column: 4, scope: !4)
!105 = !DILocation(line: 210, column: 4, scope: !4)
!106 = !DILocation(line: 211, column: 4, scope: !4)
