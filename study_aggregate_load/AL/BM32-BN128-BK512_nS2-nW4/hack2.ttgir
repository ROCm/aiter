#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [2, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 4], [0, 8], [16, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[0, 0], [0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 4], [0, 8], [64, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 1], [0, 2]], warp = [[16, 0], [32, 0]], block = []}>
#loc = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [1, 4], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":14:0)) attributes {noinline = false} {
    %cst = arith.constant dense<53248> : tensor<32x1xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<53248> : tensor<1x512xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x512xi32, #blocked2> loc(#loc1)
    %cst_2 = arith.constant dense<8192> : tensor<1x128xi32, #blocked3> loc(#loc1)
    %cst_3 = arith.constant dense<8192> : tensor<32x1xi32, #blocked4> loc(#loc1)
    %c53248_i64 = arith.constant 53248 : i64 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c496_i32 = arith.constant 496 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<true> : tensor<256x128xi1, #blocked3> loc(#loc1)
    %cst_6 = arith.constant dense<true> : tensor<32x256xi1, #blocked4> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %0 = tt.get_program_id x : i32 loc(#loc12)
    %1 = arith.addi %arg6, %c127_i32 : i32 loc(#loc58)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc59)
    %3 = arith.divsi %0, %2 : i32 loc(#loc60)
    %4 = arith.remsi %0, %2 : i32 loc(#loc61)
    llvm.intr.assume %true : i1 loc(#loc19)
    llvm.intr.assume %true : i1 loc(#loc20)
    %5 = arith.muli %3, %c32_i32 : i32 loc(#loc21)
    %6 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc22)
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc22)
    %8 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %9 = tt.splat %5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc23)
    %10 = tt.splat %5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc23)
    %11 = arith.addi %9, %6 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc23)
    %12 = arith.addi %10, %7 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc23)
    %13 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc24)
    %14 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc24)
    %15 = arith.remsi %11, %13 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc24)
    %16 = arith.remsi %12, %14 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc24)
    %17 = arith.muli %4, %c128_i32 : i32 loc(#loc25)
    %18 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %19 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %20 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %21 = tt.splat %17 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc27)
    %22 = tt.splat %17 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %23 = arith.addi %21, %18 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc27)
    %24 = arith.addi %22, %20 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %25 = tt.splat %arg6 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc28)
    %26 = tt.splat %arg6 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %27 = arith.remsi %23, %25 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc28)
    %28 = arith.remsi %24, %26 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %29 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc29)
    %30 = tt.expand_dims %15 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<32x1xi32, #blocked4> loc(#loc30)
    %31 = arith.muli %30, %cst_3 : tensor<32x1xi32, #blocked4> loc(#loc30)
    %32 = tt.broadcast %31 : tensor<32x1xi32, #blocked4> -> tensor<32x256xi32, #blocked4> loc(#loc30)
    %33 = tt.expand_dims %29 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x256xi32, #blocked4> loc(#loc30)
    %34 = tt.broadcast %33 : tensor<1x256xi32, #blocked4> -> tensor<32x256xi32, #blocked4> loc(#loc30)
    %35 = arith.addi %32, %34 : tensor<32x256xi32, #blocked4> loc(#loc30)
    %36 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc31)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<256x1xi32, #blocked3> loc(#loc32)
    %38 = tt.broadcast %37 : tensor<256x1xi32, #blocked3> -> tensor<256x128xi32, #blocked3> loc(#loc32)
    %39 = tt.expand_dims %27 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x128xi32, #blocked3> loc(#loc32)
    %40 = arith.muli %39, %cst_2 : tensor<1x128xi32, #blocked3> loc(#loc32)
    %41 = tt.broadcast %40 : tensor<1x128xi32, #blocked3> -> tensor<256x128xi32, #blocked3> loc(#loc32)
    %42 = arith.addi %38, %41 : tensor<256x128xi32, #blocked3> loc(#loc32)
    %43 = tt.expand_dims %16 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc33)
    %44 = tt.expand_dims %28 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc34)
    %45 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc35)
    %46 = tt.broadcast %43 : tensor<32x1xi32, #blocked2> -> tensor<32x512xi32, #blocked2> loc(#loc36)
    %47 = tt.expand_dims %45 {axis = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x512xi32, #blocked2> loc(#loc36)
    %48 = arith.muli %47, %cst_1 : tensor<1x512xi32, #blocked2> loc(#loc36)
    %49 = tt.broadcast %48 : tensor<1x512xi32, #blocked2> -> tensor<32x512xi32, #blocked2> loc(#loc36)
    %50 = arith.addi %49, %46 : tensor<32x512xi32, #blocked2> loc(#loc36)
    %51 = amdgpu.buffer_load %arg3[%50] : tensor<32x512xi8, #blocked2> loc(#loc37)
    %52 = ttg.local_alloc %51 : (tensor<32x512xi8, #blocked2>) -> !ttg.memdesc<32x512xi8, #shared, #smem, mutable> loc(#loc37)
    %53 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc35)
    %54 = tt.broadcast %44 : tensor<128x1xi32, #blocked1> -> tensor<128x512xi32, #blocked1> loc(#loc38)
    %55 = tt.expand_dims %53 {axis = 0 : i32} : tensor<512xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x512xi32, #blocked1> loc(#loc38)
    %56 = arith.muli %55, %cst_0 : tensor<1x512xi32, #blocked1> loc(#loc38)
    %57 = tt.broadcast %56 : tensor<1x512xi32, #blocked1> -> tensor<128x512xi32, #blocked1> loc(#loc38)
    %58 = arith.addi %57, %54 : tensor<128x512xi32, #blocked1> loc(#loc38)
    %59 = amdgpu.buffer_load %arg4[%58] : tensor<128x512xi8, #blocked1> loc(#loc37)
    %60 = ttg.local_alloc %59 : (tensor<128x512xi8, #blocked1>) -> !ttg.memdesc<128x512xi8, #shared, #smem, mutable> loc(#loc37)
    %61 = ttg.local_alloc : () -> !ttg.memdesc<2x32x256xi8, #shared1, #smem, mutable> loc(#loc39)
    %62 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc40)
    %63 = ttg.memdesc_subview %61[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<32x256xi8, #shared1, #smem, mutable> loc(#loc39)
    %64 = amdgpu.buffer_load_to_local %arg0[%35] mask = %cst_6 into %63 : <i8>[tensor<32x256xi32, #blocked4>]  -> <32x256xi8, #shared1, #smem, mutable> loc(#loc39)
    %65 = ttg.async_commit_group %64 loc(#loc39)
    %66 = ttg.memdesc_subview %62[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc40)
    %67 = amdgpu.buffer_load_to_local %arg1[%42] mask = %cst_5 cacheModifier = cg into %66 : <i8>[tensor<256x128xi32, #blocked3>]  -> <256x128xi8, #shared, #smem, mutable> loc(#loc40)
    %68 = ttg.async_commit_group %67 loc(#loc40)
    %69:8 = scf.for %arg7 = %c0_i32 to %c31_i32 step %c1_i32 iter_args(%arg8 = %cst_4, %arg9 = %arg0, %arg10 = %arg1, %arg11 = %c0_i32, %arg12 = %65, %arg13 = %68, %arg14 = %63, %arg15 = %66) -> (tensor<32x128xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.memdesc<32x256xi8, #shared1, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared, #smem, mutable>)  : i32 {
      %111 = tt.addptr %arg9, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc41)
      %112 = tt.addptr %arg10, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc42)

      %113 = arith.addi %arg11, %c1_i32 : i32 loc(#loc37)
      %114 = arith.cmpi slt, %113, %c2_i32 : i32 loc(#loc37)
      %115 = arith.select %114, %113, %c0_i32 : i32 loc(#loc37)

      %110 = ttg.async_wait %arg12, %arg13 {num = 0 : i32} loc(#loc39)

      %121 = ttg.memdesc_subview %61[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<32x256xi8, #shared1, #smem, mutable> loc(#loc39)
      %122 = amdgpu.buffer_load_to_local %111[%35] into %121 : <i8>[tensor<32x256xi32, #blocked4>]  -> <32x256xi8, #shared1, #smem, mutable> loc(#loc39)
      %123 = ttg.async_commit_group %122 loc(#loc39)

      %125 = ttg.memdesc_subview %62[%115, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc40)
      %126 = amdgpu.buffer_load_to_local %112[%42] cacheModifier = cg into %125 : <i8>[tensor<256x128xi32, #blocked3>]  -> <256x128xi8, #shared, #smem, mutable> loc(#loc40)
      %127 = ttg.async_commit_group %126 loc(#loc40)

      rocdl.sched.barrier 0


      %116 = arith.muli %arg7, %c16_i32 : i32 loc(#loc37)
      %117 = ttg.memdesc_subview %52[%c0_i32, %116] : !ttg.memdesc<32x512xi8, #shared, #smem, mutable> -> !ttg.memdesc<32x16xi8, #shared, #smem, mutable, 32x512> loc(#loc37)
      %118 = ttg.local_load %117 token %110 : !ttg.memdesc<32x16xi8, #shared, #smem, mutable, 32x512> -> tensor<32x16xi8, #linear> loc(#loc37)
      %119 = ttg.memdesc_subview %60[%c0_i32, %116] : !ttg.memdesc<128x512xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared, #smem, mutable, 128x512> loc(#loc37)
      %120 = ttg.local_load %119 token %110 : !ttg.memdesc<128x16xi8, #shared, #smem, mutable, 128x512> -> tensor<128x16xi8, #linear1> loc(#loc37)

      %124 = ttg.local_load %arg14 token %110 : !ttg.memdesc<32x256xi8, #shared1, #smem, mutable> -> tensor<32x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc39)
      %128 = ttg.local_load %arg15 token %110 : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc40)
      %129 = tt.dot_scaled %124 scale %118, %128 scale %120, %arg8 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<32x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<32x16xi8, #linear> * tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear1> -> tensor<32x128xf32, #mma> loc(#loc43)
      scf.yield %129, %111, %112, %115, %123, %127, %121, %125 : tensor<32x128xf32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>, i32, !ttg.async.token, !ttg.async.token, !ttg.memdesc<32x256xi8, #shared1, #smem, mutable>, !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc37)
    } loc(#loc37)
    %70 = ttg.async_wait %69#4, %69#5 {num = 0 : i32} loc(#loc39)
    %71 = ttg.memdesc_subview %52[%c0_i32, %c496_i32] : !ttg.memdesc<32x512xi8, #shared, #smem, mutable> -> !ttg.memdesc<32x16xi8, #shared, #smem, mutable, 32x512> loc(#loc37)
    %72 = ttg.local_load %71 : !ttg.memdesc<32x16xi8, #shared, #smem, mutable, 32x512> -> tensor<32x16xi8, #linear> loc(#loc37)
    %73 = ttg.memdesc_subview %60[%c0_i32, %c496_i32] : !ttg.memdesc<128x512xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x16xi8, #shared, #smem, mutable, 128x512> loc(#loc37)
    %74 = ttg.local_load %73 : !ttg.memdesc<128x16xi8, #shared, #smem, mutable, 128x512> -> tensor<128x16xi8, #linear1> loc(#loc37)
    %75 = ttg.local_load %69#6 token %70 : !ttg.memdesc<32x256xi8, #shared1, #smem, mutable> -> tensor<32x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc39)
    %76 = ttg.local_load %69#7 token %70 : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc40)
    %77 = tt.dot_scaled %75 scale %72, %76 scale %74, %69#0 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<32x256xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<32x16xi8, #linear> * tensor<256x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x16xi8, #linear1> -> tensor<32x128xf32, #mma> loc(#loc43)
    ttg.local_dealloc %61 : !ttg.memdesc<2x32x256xi8, #shared1, #smem, mutable> loc(#loc37)
    ttg.local_dealloc %62 : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc37)
    %78 = arith.truncf %77 : tensor<32x128xf32, #mma> to tensor<32x128xbf16, #mma> loc(#loc44)
    %79 = arith.extsi %8 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %80 = arith.extsi %5 : i32 to i64 loc(#loc46)
    %81 = tt.splat %80 : i64 -> tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %82 = arith.addi %81, %79 : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %83 = arith.extsi %19 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc47)
    %84 = arith.extsi %17 : i32 to i64 loc(#loc48)
    %85 = tt.splat %84 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc48)
    %86 = arith.addi %85, %83 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc48)
    %87 = tt.expand_dims %82 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc49)
    %88 = tt.expand_dims %79 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc50)
    %89 = arith.muli %80, %c53248_i64 : i64 loc(#loc50)
    %90 = arith.muli %88, %cst : tensor<32x1xi64, #blocked> loc(#loc50)
    %91 = tt.addptr %arg2, %89 : !tt.ptr<bf16>, i64 loc(#loc50)
    %92 = arith.trunci %90 : tensor<32x1xi64, #blocked> to tensor<32x1xi32, #blocked> loc(#loc50)
    %93 = tt.expand_dims %86 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc51)
    %94 = tt.broadcast %92 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc52)
    %95 = tt.expand_dims %83 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc52)
    %96 = tt.broadcast %95 : tensor<1x128xi64, #blocked> -> tensor<32x128xi64, #blocked> loc(#loc52)
    %97 = tt.addptr %91, %84 : !tt.ptr<bf16>, i64 loc(#loc52)
    %98 = arith.trunci %96 : tensor<32x128xi64, #blocked> to tensor<32x128xi32, #blocked> loc(#loc52)
    %99 = arith.addi %98, %94 : tensor<32x128xi32, #blocked> loc(#loc52)
    %100 = arith.extsi %arg5 : i32 to i64 loc(#loc53)
    %101 = tt.splat %100 : i64 -> tensor<32x1xi64, #blocked> loc(#loc53)
    %102 = arith.cmpi slt, %87, %101 : tensor<32x1xi64, #blocked> loc(#loc53)
    %103 = arith.extsi %arg6 : i32 to i64 loc(#loc54)
    %104 = tt.splat %103 : i64 -> tensor<1x128xi64, #blocked> loc(#loc54)
    %105 = arith.cmpi slt, %93, %104 : tensor<1x128xi64, #blocked> loc(#loc54)
    %106 = tt.broadcast %102 : tensor<32x1xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc55)
    %107 = tt.broadcast %105 : tensor<1x128xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc55)
    %108 = arith.andi %106, %107 : tensor<32x128xi1, #blocked> loc(#loc55)
    %109 = ttg.convert_layout %78 : tensor<32x128xbf16, #mma> -> tensor<32x128xbf16, #blocked> loc(#loc56)
    amdgpu.buffer_store %109, %97[%99], %108 : tensor<32x128xbf16, #blocked> loc(#loc56)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":47:14)
#loc3 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":48:14)
#loc4 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc5 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc6 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc7 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc8 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc9 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc10 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc11 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc12 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":61:24)
#loc13 = loc("/app/OAI-triton/python/triton/language/standard.py":40:22)
#loc14 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:27)
#loc15 = loc("/app/OAI-triton/python/triton/language/standard.py":40:28)
#loc16 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":32:23)
#loc17 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":67:44)
#loc18 = loc("/app/aiter/aiter/ops/triton/utils/pid_preprocessing.py":33:22)
#loc19 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:14)
#loc20 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":70:14)
#loc21 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:23)
#loc22 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:51)
#loc23 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:38)
#loc24 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":77:68)
#loc25 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:23)
#loc26 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:51)
#loc27 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:38)
#loc28 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":78:68)
#loc29 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:60)
#loc30 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:22)
#loc31 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:29)
#loc32 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:22)
#loc33 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:34)
#loc34 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:34)
#loc35 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:74)
#loc36 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":83:66)
#loc37 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":89:22)
#loc38 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":85:66)
#loc39 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:24)
#loc40 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":98:24)
#loc41 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":106:18)
#loc42 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":107:18)
#loc43 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:71)
#loc44 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":111:23)
#loc45 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:67)
#loc46 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":114:37)
#loc47 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:67)
#loc48 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":115:37)
#loc49 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:41)
#loc50 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:21)
#loc51 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:72)
#loc52 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:52)
#loc53 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:33)
#loc54 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:58)
#loc55 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:39)
#loc56 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:21)
#loc57 = loc("/app/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:4)
#loc58 = loc(callsite(#loc13 at #loc14))
#loc59 = loc(callsite(#loc15 at #loc14))
#loc60 = loc(callsite(#loc16 at #loc17))
#loc61 = loc(callsite(#loc18 at #loc17))
